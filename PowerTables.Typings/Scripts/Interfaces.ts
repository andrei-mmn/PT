//     This code was generated by a Reinforced.Typings tool. 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.


module PowerTables.Configuration.Json {
	export interface ITableConfiguration
	{
		EmptyFiltersPlaceholder: string;
		Prefix: string;
		TableRootId: string;
		OperationalAjaxUrl: string;
		LoadImmediately: boolean;
		DatepickerOptions: PowerTables.IDatepickerOptions;
		Columns: PowerTables.Configuration.Json.IColumnConfiguration[];
		PluginsConfiguration: PowerTables.Configuration.Json.IPluginConfiguration[];
		StaticData: string;
		CoreTemplates: PowerTables.ICoreTemplateIds;
		KeyFields: string[];
		TouchedCellTemplateId: string;
		TouchedRowTemplateId: string;
		AddedRowTemplateId: string;
		CallbackFunction: (table:IMasterTable) => void;
		TemplateSelector: (row:IRow)=>string;
		MessageFunction: (msg: ITableMessage) => void;
		Subscriptions: PowerTables.Configuration.Json.IConfiguredSubscriptionInfo[];
		QueryConfirmation: (query:IPowerTableRequest,scope:QueryScope,continueFn:any) => void;
		PrefetchedData: any[];
	}
	export interface IColumnConfiguration
	{
		Title: string;
		Description: string;
		Meta?: any;
		RawColumnName: string;
		CellRenderingTemplateId: string;
		CellRenderingValueFunction: (a:any) => string;
		ColumnType: string;
		IsDataOnly: boolean;
		IsEnum: boolean;
		IsNullable: boolean;
		ClientValueFunction: (a:any) => any;
	}
	export interface IPluginConfiguration
	{
		PluginId: string;
		Placement: string;
		Configuration: any;
		Order: number;
		TemplateId: string;
	}
	export interface IConfiguredSubscriptionInfo
	{
		IsRowSubscription: boolean;
		ColumnName: string;
		Selector: string;
		DomEvent: string;
		Handler: (dataObject:any, originalEvent:any) => void;
	}
}
module PowerTables {
	export interface IDatepickerOptions
	{
		CreateDatePicker: (element:HTMLElement, isNullableDate: boolean) => void;
		PutToDatePicker: (element:HTMLElement, date?:Date) => void;
		GetFromDatePicker: (element:HTMLElement) => Date;
		DestroyDatepicker: (element:HTMLElement) => void;
	}
	export interface ICoreTemplateIds
	{
		Layout: string;
		PluginWrapper: string;
		RowWrapper: string;
		CellWrapper: string;
		HeaderWrapper: string;
		Messages: string;
	}
	export interface ITableMessage
	{
		Type: PowerTables.MessageType;
		Title: string;
		Details: string;
		Class: string;
	}
	export interface IPowerTablesResponse
	{
		IsLatticeResponse: boolean;
		Message: PowerTables.ITableMessage;
		ResultsCount: number;
		PageIndex: number;
		Data: any[];
		AdditionalData: { [key:string]: any };
		Success: boolean;
	}
	export interface IPowerTableRequest
	{
		Command: string;
		Query: PowerTables.IQuery;
	}
	export interface IQuery
	{
		Paging: PowerTables.IPaging;
		Orderings: { [key:string]: PowerTables.Ordering };
		Filterings: { [key:string]: string };
		AdditionalData: { [key:string]: string };
		StaticDataJson: string;
	}
	export interface IPaging
	{
		PageIndex: number;
		PageSize: number;
	}
	export enum MessageType { 
		UserMessage = 0, 
		Banner = 1, 
	}
	export enum Ordering { 
		Ascending = 0, 
		Descending = 1, 
		Neutral = 2, 
	}
}
module PowerTables.Plugins.Checkboxify {
	export interface ICheckboxifyClientConfig
	{
		SelectionColumnName: string;
		ResetOnReload: boolean;
		EnableSelectAll: boolean;
		SelectAllSelectsServerUndisplayedData: boolean;
		SelectAllSelectsClientUndisplayedData: boolean;
		SelectAllOnlyIfAllData: boolean;
		ResetOnClientReload: boolean;
		SelectAllTemplateId: string;
		RowTemplateId: string;
		CellTemplateId: string;
		CanSelectFunction: (v:any)=>boolean;
	}
	export interface ISelectionAdditionalData
	{
		ReplaceSelection: boolean;
		SelectionToReplace: string[];
		ModifySelection: boolean;
		AddToSelection: string[];
		RemoveFromSelection: string[];
	}
}
module PowerTables.Plugins.Formwatch {
	export interface IFormwatchClientConfiguration
	{
		DoNotEmbed: boolean;
		FieldsConfiguration: PowerTables.Plugins.Formwatch.IFormwatchFieldData[];
		FiltersMappings: { [key:string]: PowerTables.Plugins.Formwatch.IFormWatchFilteringsMappings };
	}
	export interface IFormwatchFieldData
	{
		FieldJsonName: string;
		FieldSelector: string;
		FieldValueFunction: () => any;
		TriggerSearchOnEvents: string[];
		ConstantValue: string;
		SearchTriggerDelay: number;
		SetConstantIfNotSupplied: boolean;
		AutomaticallyAttachDatepicker: boolean;
		IsDateTime: boolean;
		IsArray: boolean;
		ArrayDelimiter: string;
	}
	export interface IFormWatchFilteringsMappings
	{
		FilterType: number;
		FieldKeys: string[];
		ForServer: boolean;
		ForClient: boolean;
	}
}
module PowerTables.Plugins.Hideout {
	export interface IHideoutPluginConfiguration
	{
		ShowMenu: boolean;
		HideableColumnsNames: string[];
		ColumnInitiatingReload: string[];
		HiddenColumns: { [key:string]: boolean };
		DefaultTemplateId: string;
	}
}
module PowerTables.Filters.Range {
	export interface IRangeFilterUiConfig
	{
		ColumnName: string;
		FromPlaceholder: string;
		ToPlaceholder: string;
		InputDelay: number;
		FromValue: string;
		ToValue: string;
		ClientFiltering: boolean;
		ClientFilteringFunction: (object: any, fromValue:string, toValue:string, query: IQuery)=>boolean;
		TreatEqualDateAsWholeDay: boolean;
		Hidden: boolean;
		DefaultTemplateId: string;
	}
}
module PowerTables.Filters.Value {
	export interface IValueFilterUiConfig
	{
		Placeholder: string;
		InputDelay: number;
		DefaultValue: string;
		ColumnName: string;
		ClientFiltering: boolean;
		ClientFilteringFunction: (object: any, filterValue:string, query: IQuery)=>boolean;
		Hidden: boolean;
		CompareOnlyDates: boolean;
		DefaultTemplateId: string;
	}
}
module PowerTables.Plugins.ResponseInfo {
	export interface IResponseInfoClientConfiguration
	{
		ClientCalculators: { [key:string] : (data:IClientDataResults) => any };
		ClientTemplateFunction: (data:any) => string;
		ResponseObjectOverriden: boolean;
		DefaultTemplateId: string;
	}
}
module System.Web.Mvc {
	export interface ISelectListItem
	{
		Disabled: boolean;
		Selected: boolean;
		Text: string;
		Value: string;
	}
}
module PowerTables.Filters.Select {
	export interface ISelectFilterUiConfig
	{
		SelectedValue: string;
		AllowSelectNothing: boolean;
		AllowSelectNotPresent: boolean;
		IsMultiple: boolean;
		ColumnName: string;
		Items: System.Web.Mvc.ISelectListItem[];
		Hidden: boolean;
		ClientFiltering: boolean;
		ClientFilteringFunction: (object: any, selectedValues:string[], query: IQuery)=>boolean;
		DefaultTemplateId: string;
	}
}
module PowerTables.Plugins.Limit {
	export interface ILimitClientConfiguration
	{
		DefaultValue: string;
		LimitValues: number[];
		LimitLabels: string[];
		ReloadTableOnLimitChange: boolean;
		EnableClientLimiting: boolean;
		DefaultTemplateId: string;
	}
}
module PowerTables.Plugins.Ordering {
	export interface IOrderingConfiguration
	{
		DefaultOrderingsForColumns: { [key:string]: PowerTables.Ordering };
		ClientSortableColumns: {[key:string]:(a:any,b:any) => number};
		DefaultTemplateId: string;
	}
}
module PowerTables.Plugins.Paging {
	export interface IPagingClientConfiguration
	{
		ArrowsMode: boolean;
		UsePeriods: boolean;
		PagesToHideUnderPeriod: number;
		UseFirstLastPage: boolean;
		UseGotoPage: boolean;
		EnableClientPaging: boolean;
		DefaultTemplateId: string;
	}
}
module PowerTables.Plugins.Toolbar {
	export interface IToolbarButtonsClientConfiguration
	{
		Buttons: PowerTables.Plugins.Toolbar.IToolbarButtonClientConfiguration[];
		DefaultTemplateId: string;
	}
	export interface IToolbarButtonClientConfiguration
	{
		Id: string;
		Css: string;
		Style: string;
		HtmlContent: string;
		Command: string;
		BlackoutWhileCommand: boolean;
		DisableIfNothingChecked: boolean;
		Title: string;
		CommandCallbackFunction: (table:any /*PowerTables.PowerTable*/,response:IPowerTablesResponse)=>void;
		ConfirmationFunction: (continuation:(queryModifier?:(a:IQuery)=>void)=>void)=>void;
		OnClick: (table:any /*PowerTables.PowerTable*/,menuElement:any)=>void;
		Submenu: PowerTables.Plugins.Toolbar.IToolbarButtonClientConfiguration[];
		HasSubmenu: boolean;
		IsMenu: boolean;
		Separator: boolean;
		InternalId: number;
		IsDisabled: boolean;
		ConfirmationTemplateId: string;
		ConfirmationTargetSelector: string;
		ConfirmationFormConfiguration: PowerTables.Plugins.Formwatch.IFormwatchFieldData[];
	}
}
module PowerTables.Plugins.Total {
	export interface ITotalResponse
	{
		TotalsForColumns: { [key:string]: any };
	}
	export interface ITotalClientConfiguration
	{
		ShowOnTop: boolean;
		ColumnsValueFunctions: { [key:string] : (a:any)=>string };
		ColumnsCalculatorFunctions: { [key:string] : (data:IClientDataResults) => any };
	}
}
module PowerTables.Editors {
	export interface ICellEditorUiConfigBase
	{
		PluginId: string;
		TemplateId: string;
		ValidationMessagesTemplateId: string;
	}
	export interface IEditorUiConfig
	{
		BeginEditEventId: string;
		CommitEventId: string;
		RejectEventId: string;
		EditorsForColumns: { [key:string]: PowerTables.Editors.ICellEditorUiConfigBase };
		IntegrityCheckFunction: (dataObject:any)=>boolean;
		DeferChanges: boolean;
		EditorType: PowerTables.Editors.EditorType;
	}
	export interface IEditionResult
	{
		Message: PowerTables.ITableMessage;
		IsUpdateResult: boolean;
		ConfirmedObject: any;
		TableAdjustments: PowerTables.Editors.IAdjustmentData;
		OtherTablesAdjustments: { [key:string]: PowerTables.Editors.IAdjustmentData };
	}
	export interface IAdjustmentData
	{
		Removals: any[];
		Updates: any[];
		AdditionalData: { [key:string]: any };
	}
	export enum EditorType { 
		Cell = 0, 
		Row = 1, 
		Form = 2, 
	}
}
module PowerTables.Editors.SelectList {
	export interface ISelectListEditorUiConfig extends PowerTables.Editors.ICellEditorUiConfigBase
	{
		PluginId: string;
		SelectListItems: System.Web.Mvc.ISelectListItem[];
		AllowEmptyString: boolean;
		EmptyElementText: string;
		AddEmptyElement: boolean;
	}
}
module PowerTables.Editors.Memo {
	export interface IMemoEditorUiConfig extends PowerTables.Editors.ICellEditorUiConfigBase
	{
		PluginId: string;
		WarningChars: number;
		MaxChars: number;
		Rows: number;
		Columns: number;
		AllowEmptyString: boolean;
	}
}
module PowerTables.Editors.Check {
	export interface ICheckEditorUiConfig extends PowerTables.Editors.ICellEditorUiConfigBase
	{
		PluginId: string;
		IsMandatory: boolean;
	}
}
module PowerTables.Editors.PlainText {
	export interface IPlainTextEditorUiConfig extends PowerTables.Editors.ICellEditorUiConfigBase
	{
		PluginId: string;
		ValidationRegex: string;
		EnableBasicValidation: boolean;
		FormatFunction: (value:any,column:IColumn) => string;
		ParseFunction: (value:string,column:IColumn,errors:PowerTables.Editors.IValidationMessage[]) => any;
		FloatRemoveSeparatorsRegex: string;
		FloatDotReplaceSeparatorsRegex: string;
		AllowEmptyString: boolean;
		MaxAllowedLength: number;
	}
}
module PowerTables.Plugins.LoadingOverlap {
	export interface ILoadingOverlapUiConfig
	{
		Overlaps: { [key:string]: string };
		DefaultTemplateId: string;
	}
	export enum OverlapMode { 
		All = 0, 
		BodyOnly = 1, 
	}
}
module PowerTables.Plugins.Reload {
	export interface IReloadUiConfiguration
	{
		ForceReload: boolean;
		RenderTo: string;
		DefaultTemplateId: string;
	}
}
module PowerTables.Plugins.Hierarchy {
	export interface IHierarchyUiConfiguration
	{
		ExpandBehavior: PowerTables.Plugins.Hierarchy.NodeExpandBehavior;
		CollapsedNodeFilterBehavior: PowerTables.Plugins.Hierarchy.TreeCollapsedNodeFilterBehavior;
	}
	export enum NodeExpandBehavior { 
		LoadFromCacheWhenPossible = 0, 
		AlwaysLoadRemotely = 1, 
	}
	export enum TreeCollapsedNodeFilterBehavior { 
		IncludeCollapsed = 0, 
		ExcludeCollapsed = 1, 
	}
}
