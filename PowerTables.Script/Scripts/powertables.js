//     This code was generated by a Reinforced.Typings tool. 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
var PowerTables;
(function (PowerTables) {
    /** Ordering */
    (function (Ordering) {
        /** Ascending */
        Ordering[Ordering["Ascending"] = 0] = "Ascending";
        /** Descending */
        Ordering[Ordering["Descending"] = 1] = "Descending";
        /** Ordering is not applied */
        Ordering[Ordering["Neutral"] = 2] = "Neutral";
    })(PowerTables.Ordering || (PowerTables.Ordering = {}));
    var Ordering = PowerTables.Ordering;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Checkboxify;
        (function (Checkboxify) {
            (function (SelectAllLocation) {
                SelectAllLocation[SelectAllLocation["FiltersHeader"] = 0] = "FiltersHeader";
                SelectAllLocation[SelectAllLocation["ColumnHeader"] = 1] = "ColumnHeader";
            })(Checkboxify.SelectAllLocation || (Checkboxify.SelectAllLocation = {}));
            var SelectAllLocation = Checkboxify.SelectAllLocation;
        })(Checkboxify = Plugins.Checkboxify || (Plugins.Checkboxify = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Components container for registration/resolving plugins
     */
    var ComponentsContainer = (function () {
        function ComponentsContainer() {
        }
        /**
         * Registers component in components container for further instantiation
         * @param key Text ID for component
         * @param ctor Constructor function
         * @returns {}
         */
        ComponentsContainer.registerComponent = function (key, ctor) {
            this._components[key] = ctor;
        };
        /**
         * Instantiates component by its ID with specified arguments
         * @param key Text ID of desired component
         * @param args String arguments for instantiation
         * @returns {}
         */
        ComponentsContainer.resolveComponent = function (key, args) {
            if (!this._components[key])
                throw new Error("Component " + key + " is not registered. Please ensure that you have connected all the additional scripts");
            if (!args)
                return new this._components[key];
            else {
                var ctor = this._components[key];
                var boundCtor = Function.prototype.bind.apply(ctor, [null].concat(args));
                return new boundCtor();
            }
        };
        ComponentsContainer._components = {};
        return ComponentsContainer;
    })();
    PowerTables.ComponentsContainer = ComponentsContainer;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * This enumeration distinguishes which way
     * underlying query will be used
     */
    (function (QueryScope) {
        /**
         * Mentioned query will be sent to server to obtain
         * data (probably) for further local filtration.
         * All locally filtered fields should be excluded from
         * underlying query
         */
        QueryScope[QueryScope["Server"] = 0] = "Server";
        /**
         * Mentioned query will be used for local data filtration.
         * To gain performance, please exclude all data settings that were
         * applied during server request
         */
        QueryScope[QueryScope["Client"] = 1] = "Client";
        /**
         * This query should contain both data for client and server filtering.
         * Transboundary queries are used to obtain query settings
         * that will be used on server side to retrieve data set that
         * will be used for server command handling, so server needs all filtering settings
         */
        QueryScope[QueryScope["Transboundary"] = 2] = "Transboundary";
    })(PowerTables.QueryScope || (PowerTables.QueryScope = {}));
    var QueryScope = PowerTables.QueryScope;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Class that is responsible for holding and managing data loaded from server
     */
    var DataHolder = (function () {
        function DataHolder(rawColumnNames, isColumnDateTimeFunc, events) {
            this._comparators = {};
            this._filters = [];
            this._anyClientFiltration = false;
            /**
             * Selector of source data on client-side
             */
            this.Selector = null;
            this._rawColumnNames = rawColumnNames;
            this._isColumnDateTimeFunc = isColumnDateTimeFunc;
            this._events = events;
        }
        /**
         * Registers client filter
         *
         * @param filter Client filter
         */
        DataHolder.prototype.registerClientFilter = function (filter) {
            this._anyClientFiltration = true;
            this._filters.push(filter);
        };
        /**
         * Registers new client ordering comparer function
         *
         * @param dataField Field for which this comparator is applicable
         * @param comparator Comparator fn that should return 0 if entries are equal, -1 if a<b, +1 if a>b
         * @returns {}
         */
        DataHolder.prototype.registerClientOrdering = function (dataField, comparator) {
            this._anyClientFiltration = true;
            this._comparators[dataField] = comparator;
        };
        /**
         * Is there any client filtration pending
         * @returns True if there are any actions to be performed on query after loading, false otherwise
         */
        DataHolder.prototype.isClientFiltrationPending = function () {
            return ((!(!this.Selector)) || this._anyClientFiltration);
        };
        /**
        * Parses response from server and turns it to objects array
        */
        DataHolder.prototype.storeResponse = function (response, clientQuery) {
            var data = [];
            var obj = {};
            var currentColIndex = 0;
            var currentCol = this._rawColumnNames[currentColIndex];
            for (var i = 0; i < response.Data.length; i++) {
                if (this._isColumnDateTimeFunc(currentCol)) {
                    if (response.Data[i]) {
                        obj[currentCol] = Date.parse(response.Data[i]);
                    }
                    else {
                        obj[currentCol] = null;
                    }
                }
                else {
                    obj[currentCol] = response.Data[i];
                }
                currentColIndex++;
                if (currentColIndex >= this._rawColumnNames.length) {
                    currentColIndex = 0;
                    data.push(obj);
                    obj = {};
                }
                currentCol = this._rawColumnNames[currentColIndex];
            }
            this.LastLoaded = data;
            if (this.isClientFiltrationPending() && (!(!clientQuery))) {
                this.filterRecentData(clientQuery);
            }
        };
        /**
         * Filter recent data and store it to currently displaying data
         *
         * @param query Table query
         * @returns {}
         */
        DataHolder.prototype.filterRecentData = function (query) {
            if (this.isClientFiltrationPending() && (!(!query))) {
                if (this._filters.length === 0) {
                    this.CurrentlyDisplaying = this.LastLoaded;
                }
                else {
                    var result = [];
                    for (var i = 0; i < this.LastLoaded.length; i++) {
                        var obj = this.LastLoaded[i];
                        var acceptable = true;
                        for (var j = 0; j < this._filters.length; j++) {
                            var filter = this._filters[j];
                            acceptable = filter.filterPredicate(obj, query);
                            if (!acceptable)
                                break;
                        }
                        if (!acceptable)
                            continue;
                        result.push(obj);
                    }
                    this.CurrentlyDisplaying = result;
                }
                if (query.Orderings) {
                    var sortFn = '';
                    var comparersArg = '';
                    var orderFns = [];
                    for (var orderingKey in query.Orderings) {
                        if (query.Orderings.hasOwnProperty(orderingKey)) {
                            var orderingDirection = query.Orderings[orderingKey];
                            if (orderingDirection === PowerTables.Ordering.Neutral)
                                continue;
                            if (!this._comparators[orderingKey])
                                continue;
                            var negate = orderingDirection === PowerTables.Ordering.Descending;
                            sortFn += "cc = f" + orderFns.length + "(a,b); ";
                            comparersArg += "f" + orderFns.length + ",";
                            orderFns.push(this._comparators[orderingKey]);
                            sortFn += "if (cc!=0) return " + (negate ? '-cc' : 'cc') + "; ";
                        }
                    }
                    comparersArg = comparersArg.substr(0, comparersArg.length - 1);
                    sortFn = "function(" + comparersArg + "){ return function (a,b) { var cc = 0; " + sortFn + " return 0; } }";
                    var sortFunction = eval(sortFn).apply(null, orderFns);
                    var ordered = this.CurrentlyDisplaying.sort(sortFunction);
                    this.CurrentlyDisplaying = ordered;
                }
                if (this.Selector) {
                    this.CurrentlyDisplaying = this.Selector.selectData(this.CurrentlyDisplaying, query);
                }
            }
        };
        return DataHolder;
    })();
    PowerTables.DataHolder = DataHolder;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Wrapper for table event with ability to subscribe/unsubscribe
     */
    var TableEvent = (function () {
        function TableEvent(masterTable) {
            this._handlers = {};
            this._masterTable = masterTable;
        }
        /**
         * Invokes event with overridden this arg and specified event args
         *
         * @param thisArg "this" argument to be substituted to callee
         * @param eventArgs Event args will be passed to callee
         */
        TableEvent.prototype.invoke = function (thisArg, eventArgs) {
            var ea = {
                MasterTable: this._masterTable,
                EventArgs: eventArgs
            };
            var hndlrs = this._handlers;
            var i = 0;
            for (var k in hndlrs) {
                if (hndlrs.hasOwnProperty(k)) {
                    var kHandlers = hndlrs[k];
                    for (i = 0; i < kHandlers.length; i++) {
                        kHandlers[i].apply(thisArg, ea);
                    }
                    i = 0;
                }
            }
        };
        /**
         * Subscribes specified function to event with supplied string key.
         * Subscriber key is needed to have an ability to unsubscribe from event
         * and should reflect entity that has been subscriben
         *
         * @param handler Event handler to subscribe
         * @param subscriber Subscriber key to associate with handler
         */
        TableEvent.prototype.subscribe = function (handler, subscriber) {
            if (!this._handlers[subscriber]) {
                this._handlers[subscriber] = [];
            }
            this._handlers[subscriber].push(handler);
        };
        /**
         * Unsubscribes specified addressee from event
         * @param subscriber Subscriber key associated with handler
         */
        TableEvent.prototype.unsubscribe = function (subscriber) {
            this._handlers[subscriber] = null;
            delete this._handlers[subscriber];
        };
        return TableEvent;
    })();
    PowerTables.TableEvent = TableEvent;
    /**
     * Events manager for table.
     * Contains all available events
     */
    var EventsManager = (function () {
        function EventsManager(masterTable) {
            this._masterTable = masterTable;
            this.BeforeQueryGathering = new TableEvent(masterTable);
            this.AfterQueryGathering = new TableEvent(masterTable);
            this.BeforeLoading = new TableEvent(masterTable);
            this.LoadingError = new TableEvent(masterTable);
            this.ColumnsCreation = new TableEvent(masterTable);
            this.DataReceived = new TableEvent(masterTable);
            this.AfterLoading = new TableEvent(masterTable);
        }
        /**
         * Registers new event for events manager.
         * This method is to be used by plugins to provide their
         * own events.
         *
         * Events being added should be described in plugin's .d.ts file
         * as extensions to Events manager
         * @param eventName Event name
         * @returns {}
         */
        EventsManager.prototype.registerEvent = function (eventName) {
            this[eventName] = new TableEvent(this._masterTable);
        };
        return EventsManager;
    })();
    PowerTables.EventsManager = EventsManager;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Component responsible for handling of user events raised on table cells
     */
    var CellEventDelegator = (function () {
        function CellEventDelegator(bodyRootElement) {
            this._bodyRootElement = bodyRootElement;
        }
        return CellEventDelegator;
    })();
    PowerTables.CellEventDelegator = CellEventDelegator;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * This thing is used to manage instances of columns, plugins etc.
     * It consumes PT configuration as source and provides caller with
     * plugins instances, variable ways to query them and accessing their properties
     */
    var InstanceManager = (function () {
        function InstanceManager(configuration, masterTable) {
            /**
             * Dictionary containing current table columns configurations.
             * Key - raw column name. Value - IColumn instance
             */
            this.Columns = {};
            /**
             * Dictionary containing all instances of table plugins.
             * Key - full plugin ID (incl. placement). Value - plugin itself
             */
            this.Plugins = {};
            this._rawColumnNames = [];
            this.Configuration = configuration;
            this._masterTable = masterTable;
        }
        InstanceManager.prototype.initColumns = function () {
            var columns = [];
            for (var i = 0; i < this.Configuration.Columns.length; i++) {
                var c = {
                    Configuration: this.Configuration.Columns[i],
                    RawName: this.Configuration.Columns[i].RawColumnName,
                    MasterTable: null,
                    Header: null,
                    Order: i
                };
                c.Header = {
                    Column: c,
                    renderContent: null,
                    renderElement: null
                };
                this.Columns[c.RawName] = c;
                columns.push(c);
            }
            columns = columns.sort(function (a, b) { return a.Order - b.Order; });
            for (var j = 0; j < columns.length; j++) {
                this._rawColumnNames.push(columns[j].RawName);
            }
            this._events.ColumnsCreation.invoke(this, this.Columns);
        };
        InstanceManager.prototype.initPlugins = function () {
            var pluginsConfiguration = this.Configuration.PluginsConfiguration;
            for (var pluginId in pluginsConfiguration) {
                if (pluginsConfiguration.hasOwnProperty(pluginId)) {
                    var conf = pluginsConfiguration[pluginId];
                    var plugin = PowerTables.ComponentsContainer.resolveComponent(conf.PluginId);
                    plugin.init(this._masterTable, conf);
                    this.Plugins[pluginId] = plugin;
                }
            }
        };
        InstanceManager.prototype.getPlugin = function (pluginId, placement) {
            if (!placement)
                placement = 'lt';
            var key = placement + "-" + pluginId;
            if (this.Plugins[key])
                return (this.Plugins[key]);
            else {
                for (var k in this.Plugins) {
                    if (this.Plugins.hasOwnProperty(k)) {
                        var kp = k.substring(0, pluginId.length);
                        if (kp === pluginId)
                            return this.Plugins[k];
                    }
                }
            }
            throw new Error("There is no plugin " + pluginId + " on place " + placement);
        };
        /**
         * Retrieves plugins list at specific placement
         *
         * @param placement Plugins placement
         * @returns {}
         */
        InstanceManager.prototype.getPlugins = function (placement) {
            var result = [];
            for (var k in this.Plugins) {
                if (this.Plugins.hasOwnProperty(k)) {
                    var kp = k.substring(0, placement.length);
                    if (kp === placement) {
                        result.push(this.Plugins[k]);
                    }
                }
            }
            return result;
        };
        /**
         * Reteives plugin at specified placement
         * @param pluginId Plugin ID
         * @param placement Pluign placement
         * @returns {}
         */
        InstanceManager.prototype.getColumnFilter = function (columnName) {
            var filterId = 'filter-' + columnName;
            for (var k in this.Plugins) {
                if (this.Plugins.hasOwnProperty(k)) {
                    var kp = k.substring(0, filterId.length);
                    if (kp === filterId)
                        return this.Plugins[k];
                }
            }
            throw new Error("There is no filter for " + columnName);
        };
        /**
         * Determines is column of DateTime type or not
         * @param columnName Column name
         * @returns {}
         */
        InstanceManager.prototype.isDateTime = function (columnName) {
            var tpn = this.Columns[columnName].Configuration.ColumnType;
            return ((tpn === 'DateTime') || (tpn === 'DateTime?'));
        };
        /**
         * Retrieves sequential columns names in corresponding order
         * @returns {}
         */
        InstanceManager.prototype.getColumnNames = function () {
            return this._rawColumnNames;
        };
        /**
         * Retreives columns suitable for UI rendering in corresponding order
         *
         * @returns {}
         */
        InstanceManager.prototype.getUiColumns = function () {
            var result = [];
            for (var ck in this.Columns) {
                if (this.Columns.hasOwnProperty(ck)) {
                    var col = this.Columns[ck];
                    if (col.Configuration.IsDataOnly)
                        continue;
                    result.push(col);
                }
            }
            result = result.sort(function (a, b) { return a.Order - b.Order; });
            return result;
        };
        /**
         * Retrieves column by its raw name
         *
         * @param columnName Raw column name
         * @returns {}
         */
        InstanceManager.prototype.getColumn = function (columnName) {
            if (!this.Columns.hasOwnProperty(columnName))
                throw new Error("Column " + columnName + " not found for rendering");
            return this.Columns[columnName];
        };
        return InstanceManager;
    })();
    PowerTables.InstanceManager = InstanceManager;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Component that is responsible for querying server
     */
    var Loader = (function () {
        function Loader(staticData, operationalAjaxUrl, events, dataHolder) {
            this._queryPartProviders = [];
            this._isFirstTimeLoading = false;
            this._staticData = staticData;
            this._operationalAjaxUrl = operationalAjaxUrl;
            this._events = events;
            this._dataHolder = dataHolder;
        }
        /**
         * Registers new query part provider to be used while collecting
         * query data before sending it to server.
         *
         * @param provider instance implementing IQueryPartProvider interface
         * @returns {}
         */
        Loader.prototype.registerQueryPartProvider = function (provider) {
            this._queryPartProviders.push(provider);
        };
        Loader.prototype.gatherQuery = function (queryScope) {
            var a = {
                Paging: {
                    PageSize: 0,
                    PageIndex: 0
                },
                Orderings: {},
                Filterings: {},
                AdditionalData: {},
                StaticDataJson: this._staticData
            };
            this._events.BeforeQueryGathering.invoke(this, { Query: a, Scope: queryScope });
            for (var i = 0; i < this._queryPartProviders.length; i++) {
                this._queryPartProviders[i].modifyQuery(a, queryScope);
            }
            this._events.AfterQueryGathering.invoke(this, { Query: a, Scope: queryScope });
            return a;
        };
        Loader.prototype.getXmlHttp = function () {
            if (this._previousRequest) {
                this._previousRequest.abort();
                this._previousRequest = null;
            }
            var xmlhttp;
            try {
                xmlhttp = new ActiveXObject('Msxml2.XMLHTTP');
            }
            catch (e) {
                try {
                    xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
                }
                catch (E) {
                    xmlhttp = false;
                }
            }
            if (!xmlhttp && typeof XMLHttpRequest != 'undefined') {
                xmlhttp = new XMLHttpRequest();
            }
            this._previousRequest = xmlhttp;
            return xmlhttp;
        };
        Loader.prototype.doServerQuery = function (data, clientQuery, callback) {
            var _this = this;
            var dataText = JSON.stringify(data);
            var req = this.getXmlHttp();
            this._events.BeforeLoading.invoke(this, {
                Request: data,
                XMLHttp: req
            });
            req.open('POST', this._operationalAjaxUrl, 1);
            req.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            req.setRequestHeader('Content-type', 'application/json');
            var reqEvent = req.onload ? 'onload' : 'onreadystatechange'; // for IE
            req[reqEvent] = (function () {
                if (req.readyState != 4)
                    return false;
                if (req.status === 200) {
                    var ctype = req.getResponseHeader('content-type');
                    if (ctype)
                        ctype = ctype.toLowerCase();
                    if (ctype && ctype.indexOf('application/json') >= 0) {
                        var json = JSON.parse(req.responseText);
                        if (data.Command === 'query') {
                            if (json['Success'] != undefined && !json.Success) {
                                _this._events.LoadingError.invoke(_this, {
                                    Request: data,
                                    XMLHttp: req,
                                    Reason: json.Message
                                });
                            }
                            else {
                                _this._events.DataReceived.invoke(_this, {
                                    Request: data,
                                    XMLHttp: req,
                                    Data: json
                                });
                                _this._dataHolder.storeResponse(json, clientQuery);
                                callback(json);
                            }
                            _this._previousQueryString = JSON.stringify(data.Query);
                        }
                        else {
                            _this._events.DataReceived.invoke(_this, {
                                Request: data,
                                XMLHttp: req,
                                Data: json
                            }); //?
                            callback(json);
                        }
                    }
                    else {
                        if (ctype && ctype.indexOf('lattice/service') >= 0) {
                            if (req.responseText.indexOf('$Token=') === 0) {
                                var token = req.responseText.substr(7, req.responseText.length - 7);
                                _this._events.DeferredDataReceived.invoke(_this, {
                                    Request: data,
                                    XMLHttp: req,
                                    Token: token,
                                    DataUrl: _this._operationalAjaxUrl + '?q=' + token
                                });
                                callback({ $isDeferred: true, $url: _this._operationalAjaxUrl + '?q=' + token, $token: token });
                            }
                        }
                    }
                }
                else {
                    if (req.status === 0)
                        return false; // for IE
                    _this._events.LoadingError.invoke(_this, {
                        Request: data,
                        XMLHttp: req,
                        Reason: 'Network error'
                    });
                }
                _this._events.AfterLoading.invoke(_this, {
                    Request: data,
                    XMLHttp: req
                });
            });
            //req.onabort = (e => {
            //    this.Events.AfterLoading.invoke(this, [this]);
            //});
            //failTimeout = setTimeout(() => { req.abort(); this.Renderer.showError('Network error: network unreacheable'); }, 10000);
            req.send(dataText);
        };
        /**
         * Sends specified request to server and lets table handle it.
         * Always use this method to invoke table's server functionality because this method
         * correctly rises all events, handles errors etc
         *
         * @param command Query command
         * @param callback Callback that will be invoked after data received
         * @param queryModifier Inline query modifier for in-place query modification
         * @returns {}
         */
        Loader.prototype.requestServer = function (command, callback, queryModifier) {
            var scope = PowerTables.QueryScope.Transboundary;
            if (command === 'query')
                scope = PowerTables.QueryScope.Server;
            var serverQuery = this.gatherQuery(scope);
            var clientQuery = null;
            if (command === 'query')
                clientQuery = this.gatherQuery(PowerTables.QueryScope.Client);
            if (queryModifier) {
                queryModifier(serverQuery);
                queryModifier(clientQuery);
            }
            var queriesEqual = (command === 'query') && (JSON.stringify(serverQuery) === this._previousQueryString);
            if (!queriesEqual) {
                var data = {
                    Command: command,
                    Query: serverQuery
                };
                this.doServerQuery(data, clientQuery, callback);
            }
            else {
                this._dataHolder.filterRecentData(clientQuery);
                callback(null);
            }
        };
        return Loader;
    })();
    PowerTables.Loader = Loader;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var PowerTable = (function () {
        function PowerTable(configuration) {
            this._configuration = configuration;
            this.bindReady();
        }
        PowerTable.prototype.bindReady = function () {
            var _self = this;
            if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", function () {
                    document.removeEventListener("DOMContentLoaded", arguments.callee, false);
                    _self.initialize();
                }, false);
            }
            else if (document.attachEvent) {
                document.attachEvent("onreadystatechange", function () {
                    if (document.readyState === "complete") {
                        document.detachEvent("onreadystatechange", arguments.callee);
                        _self.initialize();
                    }
                });
                if (document.documentElement.doScroll && window == window.top)
                    (function () {
                        if (_self._isReady)
                            return;
                        try {
                            document.documentElement.doScroll("left");
                        }
                        catch (error) {
                            setTimeout(arguments.callee, 0);
                            return;
                        }
                        _self.initialize();
                    })();
            }
            window.addEventListener('load', function (e) {
                if (_self._isReady)
                    return;
                _self.initialize();
            });
        };
        PowerTable.prototype.initialize = function () {
            this._isReady = true;
            this.Events = new PowerTables.EventsManager(this);
            this.InstanceManager = new PowerTables.InstanceManager(this._configuration, this);
            var isDt = this.InstanceManager.isDateTime.bind(this.InstanceManager);
            this.DataHolder = new PowerTables.DataHolder(this.InstanceManager.getColumnNames(), isDt, this.Events);
            this.Loader = new PowerTables.Loader(this._configuration.StaticData, this._configuration.OperationalAjaxUrl, this.Events, this.DataHolder);
            this.Renderer = new PowerTables.Rendering.Renderer(this._configuration.TableRootId, this._configuration.Prefix, isDt, this.InstanceManager);
            this.Renderer.layout();
        };
        return PowerTable;
    })();
    PowerTables.PowerTable = PowerTable;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Part of renderer that is responsible for rendering of dynamically loaded content
         */
        var ContentRenderer = (function () {
            function ContentRenderer(templatesProvider, stack, instances) {
                this._hb = templatesProvider.HandlebarsInstance;
                this._templatesProvider = templatesProvider;
                this._stack = stack;
                this._instances = instances;
            }
            /**
             * Renders supplied table rows to string
             *
             * @param rows Table rows
             * @returns String containing HTML of table rows
             */
            ContentRenderer.prototype.renderBody = function (rows) {
                var result = '';
                var wrapper = this._templatesProvider.getCachedTemplate('rowWrapper');
                for (var i = 0; i < rows.length; i++) {
                    var rw = rows[i];
                    if (rw.renderElement) {
                        result += rw.renderElement(this._templatesProvider);
                    }
                    else {
                        result += wrapper(rw);
                    }
                }
                return result;
            };
            ContentRenderer.prototype.renderContent = function (columnName) {
                var result = '';
                switch (this._stack.Current.Type) {
                    case Rendering.RenderingContextType.Row:
                        var row = this._stack.Current.Object;
                        var columns = this._instances.getUiColumns();
                        var cellWrapper = this._templatesProvider.getCachedTemplate('cellWrapper');
                        for (var i = 0; i < columns.length; i++) {
                            var cell = row.Cells[columns[i].RawName];
                            this._stack.push(Rendering.RenderingContextType.Cell, cell, columns[i].RawName);
                            result += cellWrapper(cell);
                            this._stack.popContext();
                        }
                        break;
                    case Rendering.RenderingContextType.Cell:
                        var tmpl = this._columnsRenderFunctions[this._stack.Current.Object.Column.RawName];
                        result += tmpl(this._stack.Current.Object);
                        break;
                }
                return result;
            };
            ContentRenderer.prototype.cacheColumnRenderers = function (columns) {
                for (var key in columns) {
                    if (columns.hasOwnProperty(key)) {
                        var columnConfig = columns[key].Configuration;
                        if (columnConfig.CellRenderingValueFunction) {
                            this._columnsRenderFunctions[columnConfig.RawColumnName] =
                                function (x) {
                                    return x.Column.Configuration.CellRenderingValueFunction(x.DataObject);
                                };
                            continue;
                        }
                        if (columnConfig.CellRenderingTemplateId) {
                            var compiled = this._hb.compile(document.getElementById(columnConfig.CellRenderingTemplateId).innerHTML);
                            this._columnsRenderFunctions[columnConfig.RawColumnName] =
                                (function (compl) { return function (x) { return compl(x.DataObject); }; })(compiled);
                            continue;
                        }
                        this._columnsRenderFunctions[columnConfig.RawColumnName] =
                            function (x) { return ((x.Data !== null && x.Data !== undefined) ? x.Data : ''); };
                    }
                }
                ;
            };
            return ContentRenderer;
        })();
        Rendering.ContentRenderer = ContentRenderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
        * Helper class for producing track ids
        */
        var TrackHelper = (function () {
            function TrackHelper() {
            }
            /*
             * Returns string track ID for cell
             */
            TrackHelper.getCellTrack = function (cell) {
                var colIdx = cell.Column.MasterTable.getColumnNames().indexOf(cell.Column.RawName);
                var rowIdx = cell.Row.Index;
                return "c-r" + rowIdx + "-c" + colIdx;
            };
            /*
             * Returns string track ID for plugin
             */
            TrackHelper.getPluginTrack = function (plugin) {
                return "p-" + plugin.PluginLocation; //todo
            };
            /*
             * Returns string track ID for header
             */
            TrackHelper.getHeaderTrack = function (header) {
                return "h-" + header.Column.RawName;
            };
            /*
             * Returns string track ID for row
             */
            TrackHelper.getRowTrack = function (row) {
                return "r-" + row.Index;
            };
            /*
             * Retrieves cell element from supplied body
             */
            TrackHelper.getCellElement = function (body, cell) {
                var track = this.getCellTrack(cell);
                return body.querySelector("[data-track=\"" + track + "\"]");
            };
            /*
             * Retrieves row element from supplied body
             */
            TrackHelper.getRowElement = function (body, row) {
                var track = this.getRowTrack(row);
                return body.querySelector("[data-track=\"" + track + "\"]");
            };
            /*
             * Retrieves cells for each column
             */
            TrackHelper.getColumnCellsElements = function (body, column) {
                var colIdx = column.MasterTable.getColumnNames().indexOf(column.RawName);
                return body.querySelectorAll("[data-track$=\"-c" + colIdx + "\"]");
            };
            /*
             * Retrieves cells for each column
             */
            TrackHelper.getRowCellsElements = function (body, row) {
                return body.querySelectorAll("[data-track^=\"c-r" + row.Index + "-\"]");
            };
            TrackHelper.getHeaderElement = function (table, header) {
                var track = this.getHeaderTrack(header);
                return table.querySelector("[data-track=\"" + track + "\"]");
            };
            TrackHelper.getPluginElement = function (table, plugin) {
                var track = this.getPluginTrack(plugin);
                return table.querySelector("[data-track=\"" + track + "\"]");
            };
            return TrackHelper;
        })();
        Rendering.TrackHelper = TrackHelper;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
/// <reference path="TrackHelper.ts"/>
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Rendering stack class. Provives common helper
         * infrastructure for context-oriented rendering
         */
        var RenderingStack = (function () {
            function RenderingStack() {
                this._contextStack = [];
                /**
                 * Current rendering context
                 */
                this.Current = null;
            }
            /**
             * Pushes rendering context into stack
             * @param ctx
             * @returns {}
             */
            RenderingStack.prototype.pushContext = function (ctx) {
                this._contextStack.push(ctx);
                this.Current = ctx;
            };
            /**
             * Pushes rendering context into stack
             * @param elementType What is being rendered
             * @param element Reference to object is being rendered
             * @param columnName Optional column name - for column-contexted rendering objects
             * @returns {}
             */
            RenderingStack.prototype.push = function (elementType, element, columnName) {
                if (columnName === void 0) { columnName = ''; }
                var ctx = {
                    Type: elementType,
                    Object: element,
                    ColumnName: columnName,
                    CurrentTrack: this.getTrack(elementType, element)
                };
                this._contextStack.push(ctx);
                this.Current = ctx;
            };
            RenderingStack.prototype.getTrack = function (elementType, element) {
                var trk;
                switch (elementType) {
                    case RenderingContextType.Plugin:
                        trk = Rendering.TrackHelper.getPluginTrack(element);
                        break;
                    case RenderingContextType.Header:
                        trk = Rendering.TrackHelper.getHeaderTrack(element);
                        break;
                    case RenderingContextType.Cell:
                        trk = Rendering.TrackHelper.getCellTrack(element);
                        break;
                    case RenderingContextType.Row:
                        trk = Rendering.TrackHelper.getRowTrack(element);
                        break;
                    default:
                        throw new Error("Invalid context element type");
                }
                return trk;
            };
            /**
             * Pops rendering context from stack
             * @returns {}
             */
            RenderingStack.prototype.popContext = function () {
                this._contextStack.pop();
                if (this._contextStack.length === 0)
                    this.Current = null;
                else
                    this.Current = this._contextStack[this._contextStack.length - 1];
            };
            return RenderingStack;
        })();
        Rendering.RenderingStack = RenderingStack;
        /**
         * What renders in current helper method
         */
        (function (RenderingContextType) {
            /**
             * Plugin (0)
             */
            RenderingContextType[RenderingContextType["Plugin"] = 0] = "Plugin";
            /**
             * Column header (1)
             */
            RenderingContextType[RenderingContextType["Header"] = 1] = "Header";
            /**
             * Row (containing cells) (2)
             */
            RenderingContextType[RenderingContextType["Row"] = 2] = "Row";
            /**
             * Cell (belonging to row and column) (3)
             */
            RenderingContextType[RenderingContextType["Cell"] = 3] = "Cell";
        })(Rendering.RenderingContextType || (Rendering.RenderingContextType = {}));
        var RenderingContextType = Rendering.RenderingContextType;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
/// <reference path="../ExternalTypings.d.ts"/>
/// <reference path="RenderingStack.ts"/>
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Layout renderer
         * Is responsive for common layout rendering (with plugins, columns, etc)
         */
        var LayoutRenderer = (function () {
            function LayoutRenderer(templates, stack, instances) {
                this._hb = templates.HandlebarsInstance;
                this._templatesProvider = templates;
                this._stack = stack;
                this._instances = instances;
                this._hb.registerHelper('Body', this.bodyHelper);
                this._hb.registerHelper('Plugin', this.pluginHelper.bind(this));
                this._hb.registerHelper('Plugins', this.pluginsHelper.bind(this));
                this._hb.registerHelper('Header', this.headerHelper.bind(this));
                this._hb.registerHelper('Headers', this.headersHelper.bind(this));
                this._hb.registerHelper('BindEvent', this.bindEventHelper.bind(this));
            }
            LayoutRenderer.prototype.bindEventsQueue = function (parentElement) {
                // bind plugins/filters events
                var sources = parentElement.querySelectorAll('[data-be]');
                for (var i = 0; i < sources.length; i++) {
                    var evSource = sources.item(i);
                    var bindTrack = parseInt(evSource.getAttribute('data-be'));
                    var evDescription = this._eventsQueue[bindTrack];
                    for (var j = 0; j < evDescription.Functions.length; j++) {
                        var bindFn = evDescription.Functions[j];
                        var fnItself = null;
                        if (evDescription.Target[bindFn] && (typeof evDescription.Target[bindFn] === 'function')) {
                            fnItself = evDescription[bindFn];
                        }
                        else {
                            fnItself = eval(bindFn);
                        }
                        for (var k = 0; k < evDescription.Events.length; k++) {
                            (function (r, s, fn, e) {
                                s.addEventListener(e, function (evt) { return fn.apply(r, [s, evt]); });
                            })(evDescription.Target, evSource, fnItself, evDescription.Events[k]);
                        }
                    }
                    evSource.removeAttribute('data-be');
                }
            };
            //#region Handlebars helpers
            LayoutRenderer.prototype.bodyHelper = function () {
                return '<input type="hidden" data-track="tableBodyHere" style="display:none;"/>';
            };
            //#region Plugin helpers
            LayoutRenderer.prototype.pluginHelper = function (pluginPosition, pluginId) {
                var plugin = this._instances.getPlugin(pluginId, pluginPosition);
                return this.pluginHelperInner(plugin);
            };
            LayoutRenderer.prototype.pluginsHelper = function (pluginPosition) {
                var plugins = this._instances.getPlugins(pluginPosition);
                if (!plugins)
                    return '';
                var result = '';
                for (var a in plugins) {
                    if (plugins.hasOwnProperty(a)) {
                        var v = plugins[a];
                        result += this.pluginHelperInner(v);
                    }
                }
                return result;
            };
            LayoutRenderer.prototype.pluginHelperInner = function (plugin) {
                if (plugin.renderElement)
                    return plugin.renderElement(this._templatesProvider);
                if (!plugin.renderContent)
                    return '';
                this._stack.push(Rendering.RenderingContextType.Plugin, plugin);
                var result = this._templatesProvider.getCachedTemplate('pluginWrapper')(plugin);
                this._stack.popContext();
                return result;
            };
            //#endregion
            // #region headers helper
            LayoutRenderer.prototype.headerHelper = function (columnName) {
                return this.headerHelperInner(this._instances.getColumn(columnName));
            };
            LayoutRenderer.prototype.headerHelperInner = function (column) {
                this._stack.push(Rendering.RenderingContextType.Header, column.Header, column.RawName);
                var result = this._templatesProvider.getCachedTemplate('headerWrapper')(column.Header);
                this._stack.popContext();
                return result;
            };
            LayoutRenderer.prototype.headersHelper = function () {
                var columns = this._instances.getUiColumns();
                var result = '';
                for (var a in columns) {
                    if (columns.hasOwnProperty(a)) {
                        var v = columns[a];
                        result += this.headerHelperInner(v);
                    }
                }
                return result;
            };
            //#endregion
            //#region
            LayoutRenderer.prototype.bindEventHelper = function (commaSeparatedFunctions, commaSeparatedEvents) {
                var ed = {
                    EventReceiver: this._stack.Current.Object,
                    Functions: commaSeparatedFunctions.split(','),
                    Events: commaSeparatedEvents.split(',')
                };
                var index = this._eventsQueue.length;
                this._eventsQueue.push(ed);
                return "data-be=" + index;
            };
            LayoutRenderer.prototype.renderContent = function (columnName) {
                switch (this._stack.Current.Type) {
                    case Rendering.RenderingContextType.Header:
                        return this._stack.Current.Object.Column.Configuration.Title
                            || this._stack.Current.Object.Column.RawName;
                    case Rendering.RenderingContextType.Plugin:
                        // if we are here then plugin's renderContent is not 
                        // overriden
                        throw new Error("It is required to override renderContent for plugin");
                }
                return '';
            };
            return LayoutRenderer;
        })();
        Rendering.LayoutRenderer = LayoutRenderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Enity responsible for displaying table
         */
        var Renderer = (function () {
            function Renderer(rootId, prefix, isColumnDateTimeFunc, instances) {
                this._templatesCache = {};
                this._isColumnDateTimeFunc = isColumnDateTimeFunc;
                this._instances = instances;
                this._stack = new Rendering.RenderingStack();
                this.RootElement = document.getElementById(rootId);
                this.HandlebarsInstance = Handlebars.create();
                this._layoutRenderer = new Rendering.LayoutRenderer(this, this._stack, this._instances);
                this._contentRenderer = new Rendering.ContentRenderer(this, this._stack, this._instances);
                this.HandlebarsInstance.registerHelper("ifq", this.ifqHelper);
                this.HandlebarsInstance.registerHelper('Content', this.contentHelper.bind(this));
                this.HandlebarsInstance.registerHelper('Track', this.trackHelper.bind(this));
                this.HandlebarsInstance.registerHelper('Datepicker', this.datepickerHelper.bind(this));
                this.cacheTemplates(prefix);
            }
            //#region Templates caching
            Renderer.prototype.cacheTemplates = function (templatesPrefix) {
                var selector = "script[type=\"text/x-handlebars-template\"][id^=\"" + templatesPrefix + "-\"]";
                var templates = document.querySelectorAll(selector);
                for (var i = 0; i < templates.length; i++) {
                    var item = templates.item(i);
                    var key = item.id.substring(templatesPrefix.length + 1);
                    this._templatesCache[key] = this.HandlebarsInstance.compile(item.innerHTML);
                }
            };
            /**
             * Retrieves cached template handlebars function
             * @param Template Id
             * @returns Handlebars function
             */
            Renderer.prototype.getCachedTemplate = function (templateId) {
                if (!this._templatesCache.hasOwnProperty(templateId))
                    throw new Error("Cannot find template " + templateId);
                return this._templatesCache[templateId];
            };
            //#endregion
            //#region Public methods
            /**
             * Perform table layout inside specified root element
             */
            Renderer.prototype.layout = function () {
                var rendered = this.getCachedTemplate('layout')(null);
                this.RootElement.innerHTML = rendered;
                var bodyMarker = this.RootElement.querySelector('[data-track="tableBodyHere"]');
                if (!bodyMarker)
                    throw new Error('{{Body}} placeholder is missing in table layout template');
                this.BodyElement = bodyMarker.parentElement;
                this.BodyElement.removeChild(bodyMarker);
                this._layoutRenderer.bindEventsQueue(this.RootElement);
            };
            /**
             * Clear dynamically loaded table content and replace it with new one
             *
             * @param rows Set of table rows
             */
            Renderer.prototype.body = function (rows) {
                this.clearBody();
                this.BodyElement.innerHTML = this._contentRenderer.renderBody(rows);
            };
            Renderer.prototype.clearBody = function () {
                this.BodyElement.innerHTML = '';
            };
            //#endregion
            //#region Helpers
            Renderer.prototype.contentHelper = function (columnName) {
                if (this._stack.Current.Object.renderContent) {
                    return this._stack.Current.Object.renderContent(this);
                }
                else {
                    switch (this._stack.Current.Type) {
                        case Rendering.RenderingContextType.Header:
                        case Rendering.RenderingContextType.Plugin:
                            return this._layoutRenderer.renderContent(columnName);
                        case Rendering.RenderingContextType.Row:
                        case Rendering.RenderingContextType.Cell:
                            return this._contentRenderer.renderContent(columnName);
                        default:
                            throw new Error("Unknown rendering context type");
                    }
                }
            };
            Renderer.prototype.trackHelper = function () {
                var trk = this._stack.Current.CurrentTrack;
                if (trk.length === 0)
                    return '';
                return "data-track=\"" + trk + "\"";
            };
            Renderer.prototype.datepickerHelper = function () {
                if (this._stack.Current.Type === Rendering.RenderingContextType.Plugin) {
                    if (this._isColumnDateTimeFunc(this._stack.Current.ColumnName)) {
                        return 'data-dp="true"';
                    }
                    else {
                        return '';
                    }
                }
                else {
                    return '';
                }
            };
            Renderer.prototype.ifqHelper = function (a, b, opts) {
                if (a == b)
                    return opts.fn(this);
                else
                    return opts.inverse(this);
            };
            return Renderer;
        })();
        Rendering.Renderer = Renderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
