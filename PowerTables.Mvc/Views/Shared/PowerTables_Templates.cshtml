@using PowerTables
@using PowerTables.Filters.Range
@using PowerTables.Filters.Select
@using PowerTables.Filters.Value
@using PowerTables.Plugins.Checkboxify
@using PowerTables.Plugins.Hideout
@using PowerTables.Plugins.Limit
@using PowerTables.Plugins.Loading
@using PowerTables.Plugins.Ordering
@using PowerTables.Plugins.Paging
@using PowerTables.Plugins.ResponseInfo
@using PowerTables.Templating
@using PowerTables.Templating.BuiltIn
@using PowerTables.Templating.Handlebars

@inherits PowerTables.Templating.TemplatesPageBase

@*
    Lattice common layout template
    See available helpers in scope variable "t"
*@

@using (var t = this.Layout())
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6 col-sm-6 col-xs-6 col-lg-6">
                @t.Plugins("lt")
                <div class="btn-group" style="margin-bottom: 10px">@t.Plugins("lt-toolbar")</div>
                <br />
            </div>
            <div class="col-md-6 col-sm-6 col-xs-6 col-lg-6 text-right">
                @t.Plugins("rt")
                <div class="btn-group" style="padding-bottom: 10px">@t.Plugins("rt-toolbar")</div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12 col-lg-12">
                <hr />
            </div>
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <table class="table table-striped table-condensed table-bordered">
                    <thead style="display: table-header-group;">
                        <tr>@t.Headers()</tr>
                        <tr>@t.Filters()</tr>
                    </thead>
                    <tbody>@t.Body()</tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                @t.Plugins("lb")
                <div class="btn-group">@t.Plugins("lb-toolbar")</div>
            </div>
            <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6 text-right" style="float: right;">
                @t.Plugins("rb")
                <div class="btn-group">@t.Plugins("rb-toolbar")</div>
            </div>
        </div>
    </div>

    <div style="display: none" id="_constructor"></div>
}

@*
    Plugin wrapper template. This template is being wrapped around each plugin
*@
@using (var t = this.PluginWrapper())
{
    <text>
        @using (t.IfPlacement("lt"))
        { <span @t.Track()> @t.Content() </span> }
        @using (t.IfPlacement("lb"))
        { <div @t.Track()> @t.Content() </div> }
        @using (t.IfPlacement("rt"))
        { <div style="float: right;" @t.Track()> @t.Content() </div> }
        @using (t.IfPlacement("rb"))
        { <div style="float: right;" @t.Track()> @t.Content() </div> }
        @using (t.IfPlacement("filter"))
        { <th @t.Track()>@t.Content()</th> }
    </text>
}

@*
    Column header wrapper template.
*@
@using (var t = this.HeaderWrapper())
{ <th @t.Track()>@t.Content()</th> }

@*
    Row wrapper template.
    Following HTML is being wrapped around each data row
*@
@using (var t = this.RowWrapper())
{ <tr @t.Track()>@t.Content()</tr> }

@*
    Cell wrapper template.
    Following HTML is being wrapped around each data cell
*@
@using (var t = this.CellWrapper())
{ <td @t.Track()>@t.Content()</td> }

@using (var t = this.MessagesWrapper())
{
    using (t.IfStrEquals(c => c.MessageType, "error"))
    {
        <tr class="danger" @t.Track() style="padding: 30px">
            <td colspan="@t.Value(c => c.UiColumnsCount)">
                <h4 class="text-center"><span class="glyphicon glyphicon-remove-sign" aria-hidden="true"></span>  Error occured</h4>
                <p style="margin-left:25px;margin-right:25px">
                    @t.Value(c => c.Message)
                    <hr />
                    @t.Value(c => c.AdditionalData)
                </p>
            </td>
        </tr>
    }

    using (t.IfStrEquals(c => c.MessageType, "noresults"))
    {
        <tr class="info" @t.Track()>
            <td colspan="@t.Value(c => c.UiColumnsCount)">
                <h4 class="text-center text-info bg-info">
                    <span class="glyphicon glyphicon-eye-close"></span>  No data found
                </h4>
            </td>
        </tr>
    }

    using (t.IfStrEquals(c => c.MessageType, "initial"))
    {
        <tr class="warning" @t.Track()>
            <td colspan="@t.Value(c => c.UiColumnsCount)">
                <h4 class="text-center text-info bg-info">
                    <span class="glyphicon glyphicon-search"></span>  Please change filter settings to get search results
                </h4>
            </td>
        </tr>
    }
}

@using (var t = Plugin.Loading())
{
    <div style="display:block;height:10px;margin:10px;margin-top:5px;">
        <div class="badge" @t.ThisElementWillBlink()>
            <span class="glyphicon glyphicon-refresh"></span> Loading
        </div>
    </div>
}

@using (var t = Plugin.Ordering())
{
    <th @t.Track() @t.BindSwitchOrdering("click") style="cursor: pointer">
        <span><strong>@t.HtmlValue(c => c.Column.Configuration.Title)</strong></span>
        @using (t.If(c => c.IsNeutral))
        { <span class="glyphicon glyphicon-th-large" style="color: #bac5d3; float: right;"></span> }
        @using (t.If(c => c.IsAscending))
        { <span class="glyphicon glyphicon-chevron-up" style="color: #bac5d3; float: right;"></span> }
        @using (t.If(c => c.IsDescending))
        { <span class="glyphicon glyphicon-chevron-down" style="color: #bac5d3; float: right;"></span> }
    </th>
}

@using (var t = Plugin.Limit())
{
    <div class="btn-group">
        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
            Results: <strong>@t.Value(c => c.SelectedValue)</strong> <span class="caret"></span>
        </button>
        <ul class="dropdown-menu" role="menu">
            @using (var sz = t.Each(c => c.Sizes))
            {
                using (sz.If(c => c.IsSeparator))
                {
                    <li class="divider"></li>
                    @sz.Else()
                    <li><a href="#" @sz.BindLimitChangeEvent("click")>@sz.Value(c => c.Label)</a></li>
                }
            }
        </ul>
    </div>
}

@using (var t = Plugin.Paging())
{
    using (t.If(c => c.Shown))
    {
        <div class="col-md-10">
            @using (var m = t.ArrowsMode())
            {
                <nav style="margin: 0; width: 100px; margin-left: auto;">
                    <ul class="pager">
                        @using (m.If(c => c.PrevArrow))
                        {
                            <li><a @t.BindPreviousPage("click")><span class="glyphicon glyphicon-chevron-left"></span></a></li>
                        }
                        @using (m.If(c => c.NextArrow))
                        {
                            <li><a @t.BindNextPage("click")><span class="glyphicon glyphicon-chevron-right"></span></a></li>
                        }
                    </ul>
                </nav>
            }

            @using (var m = t.PeriodsMode())
            {
                <ul class="pagination" style="margin: 0;">
                    @using (var pg = m.Each(c => c.Pages))
                    {
                        using (pg.If(c => c.First))
                        {
                            <li class="first"><a style="cursor: pointer" @pg.BindNavigateToPage("click")><span class="glyphicon glyphicon-fast-backward"></span></a></li>
                        }
                        using (pg.If(c => c.Prev))
                        {
                            <li class="prev"><a style="cursor: pointer" @t.BindPreviousPage("click")><span class="glyphicon glyphicon-chevron-left"></span></a></li>
                        }
                        using (pg.If(c => c.Period))
                        {
                            <li><span>. . .</span></li>
                        }
                        using (pg.If(c => c.ActivePage))
                        {
                            <li class="active"><span>@pg.Value(c => c.DisPage)</span></li>
                        }
                        using (pg.If(c => c.InActivePage))
                        {
                            <li><a @pg.BindNavigateToPage("click") style="cursor: pointer">@pg.Value(c => c.DisPage)</a></li>
                        }
                        using (pg.If(c => c.Next))
                        {
                            <li class="next"><a style="cursor: pointer" @t.BindNextPage("click")><span class="glyphicon glyphicon-chevron-right"></span></a></li>
                        }
                        using (pg.If(c => c.Last))
                        {
                            <li class="last"><a style="cursor: pointer" @pg.BindNavigateToPage("click")><span class="glyphicon glyphicon-fast-forward"></span></a></li>
                        }
                    }
                </ul>
            }
        </div>
        <div class="col-md-2">
            @using (var m = t.GotoPage())
            {
                <div class="input-group" @m.ThisIsGotoPanel()>
                    <input type="text" class="form-control" @m.ThisIsGotoPageTextbox() style="width: 60px;" placeholder="Page">
                    <span class="input-group-btn">
                        <button class="btn btn-default" type="button" @m.ThisIsGotoPageButton()><span class="glyphicon glyphicon-circle-arrow-right"></span></button>
                    </span>
                </div>
            }
        </div>
        <div class="clearfix"></div>
    }
}

@using (var t = Plugin.ValueFilter())
{
    <input type="text" @t.DatepickerCanBeHere() @t.BindValueChanged("keyup,input,change,paste") @t.ThisIsFilterValueProvider() style="margin: 0; width: 100%; max-width: 100%;" class="form-control input-md" value="@t.Value(c=>c.Configuration.DefaultValue)" placeholder="@t.Value(c=>c.Configuration.Placeholder)" />
}

@using (var t = Plugin.RangeFilter())
{
    <input type="text" @t.DatepickerCanBeHere() @t.ThisIsFromField() @t.BindValueChanged("keyup,input,change,paste") class="form-control input-md" value="@t.Value(c=>c.Configuration.FromValue)" style="margin:0;width:100%;max-width:100%;" placeholder="@t.Value(c=>c.Configuration.FromPlaceholder)">
    <br />
    <input type="text" @t.DatepickerCanBeHere() @t.ThisIsToField() @t.BindValueChanged("keyup,input,change,paste") class="form-control input-md" value="@t.Value(c=>c.Configuration.ToValue)" style="margin:0;width:100%;max-width:100%;" placeholder="@t.Value(c=>c.Configuration.ToPlaceholder)">
}

@using (var t = Plugin.SelectFilter())
{
    <select class="form-control input-md" style="margin:0;width:100%;max-width:100%;" @t.ThisIsFilterValueProvider() @t.BindValueChanged("change") @t.If(c => c.Configuration.IsMultiple, "multiple=\"multiple\"")>
        @using (var item = t.Each(c => c.Configuration.Items))
        {
            <option @item.If(c => c.Disabled, "disabled=\"disabled\"") value="@item.Value(c => c.Value)" @item.If(c => c.Selected, "selected")>@item.Value(c => c.Text)</option>
        }
    </select>
}

@using (var t = Plugin.HideoutMenu())
{
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Show/Hide Columns
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
            @using (var itm = t.Each(c => c.ColumnStates))
            {
                using (itm.If(c => c.Visible))
                {
                    <li @itm.BindHide("click")>
                        <a style="cursor: pointer;">
                            <span class="glyphicon glyphicon-eye-open" style="float: left"></span> <span style="margin-left: 10px">@itm.Value(c => c.Name)</span>
                        </a>
                    </li>
                }
                using (itm.Unless(c => c.Visible))
                {
                    <li @itm.BindShow("click")>
                        <a style="cursor: pointer;">
                            <span class="glyphicon glyphicon-eye-close" style="float: left"></span> <span style="margin-left: 10px;">@itm.Value(c => c.Name)</span>
                        </a>
                    </li>
                }
            }
        </ul>

    </div>
}

@using (var t = this.Plugin.ResponseInfo())
{
    <p>
        @using (t.If(c => c.IsLocalRequest))
        {
            <br />
        <p>Data fetched locally.</p>
        }
        Currently shown <strong>@t.Value(c => c.CurrentlyShown)</strong> of <strong>@t.Value(c => c.TotalCount)</strong> records
        <br />
        @using (t.If(c => c.PagingEnabled))
        {
            <p>
                Page <strong>@t.Value(c => c.CurrentPage)</strong> of @t.Value(c => c.TotalPages)
            </p>
        }
        </p>
}

@using (var t = Plugin.CheckboxifySelectAll())
{
    <th @t.Track()>
        @using (t.If(c => c.IsAllSelected))
        {
            <button class="btn btn-xs btn-danger" @t.BindSelectAll("click")><span class="glyphicon glyphicon-check"></span></button>
            @t.Else()
            <button class="btn btn-xs btn-primary" @t.BindSelectAll("click")><span class="glyphicon glyphicon-unchecked"></span></button>
        }
    </th>
}

@using (var t = Plugin.CheckboxifyCell())
{
    using (t.If(c => c.CanCheck))
    {
        using (t.If(c => c.IsChecked))
        {
            <button class="btn btn-xs btn-danger" @t.ThisWillTriggerSelection()><span class="glyphicon glyphicon-check"></span></button>
            @t.Else()
            <button class="btn btn-xs btn-primary" @t.ThisWillTriggerSelection()><span class="glyphicon glyphicon-unchecked"></span></button>
        }
    }
}


@using (var t = Plugin.CheckboxifyRow())
{
    <tr class="success" @t.Track()>@t.Content()</tr>
}