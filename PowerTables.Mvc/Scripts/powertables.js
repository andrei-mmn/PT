//     This code was generated by a Reinforced.Typings tool. 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
var PowerTables;
(function (PowerTables) {
    (function (Ordering) {
        Ordering[Ordering["Ascending"] = 0] = "Ascending";
        Ordering[Ordering["Descending"] = 1] = "Descending";
        Ordering[Ordering["Neutral"] = 2] = "Neutral";
    })(PowerTables.Ordering || (PowerTables.Ordering = {}));
    var Ordering = PowerTables.Ordering;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Checkboxify;
        (function (Checkboxify) {
            (function (SelectAllLocation) {
                SelectAllLocation[SelectAllLocation["FiltersHeader"] = 0] = "FiltersHeader";
                SelectAllLocation[SelectAllLocation["ColumnHeader"] = 1] = "ColumnHeader";
            })(Checkboxify.SelectAllLocation || (Checkboxify.SelectAllLocation = {}));
            var SelectAllLocation = Checkboxify.SelectAllLocation;
        })(Checkboxify = Plugins.Checkboxify || (Plugins.Checkboxify = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Components container for registration/resolving plugins
     */
    var ComponentsContainer = (function () {
        function ComponentsContainer() {
        }
        /**
         * Registers component in components container for further instantiation
         * @param key Text ID for component
         * @param ctor Constructor function
         * @returns {}
         */
        ComponentsContainer.registerComponent = function (key, ctor) {
            this._components[key] = ctor;
        };
        /**
         * Instantiates component by its ID with specified arguments
         * @param key Text ID of desired component
         * @param args String arguments for instantiation
         * @returns {}
         */
        ComponentsContainer.resolveComponent = function (key, args) {
            if (!this._components[key])
                throw new Error("Component " + key + " is not registered. Please ensure that you have connected all the additional scripts");
            if (!args)
                return new this._components[key];
            else {
                var ctor = this._components[key];
                var boundCtor = Function.prototype.bind.apply(ctor, [null].concat(args));
                return new boundCtor();
            }
        };
        ComponentsContainer._components = {};
        return ComponentsContainer;
    })();
    PowerTables.ComponentsContainer = ComponentsContainer;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * This enumeration distinguishes which way
     * underlying query will be used
     */
    (function (QueryScope) {
        /**
         * Mentioned query will be sent to server to obtain
         * data (probably) for further local filtration.
         * All locally filtered fields should be excluded from
         * underlying query
         */
        QueryScope[QueryScope["Server"] = 0] = "Server";
        /**
         * Mentioned query will be used for local data filtration.
         * To gain performance, please exclude all data settings that were
         * applied during server request
         */
        QueryScope[QueryScope["Client"] = 1] = "Client";
        /**
         * This query should contain both data for client and server filtering.
         * Transboundary queries are used to obtain query settings
         * that will be used on server side to retrieve data set that
         * will be used for server command handling, so server needs all filtering settings
         */
        QueryScope[QueryScope["Transboundary"] = 2] = "Transboundary";
    })(PowerTables.QueryScope || (PowerTables.QueryScope = {}));
    var QueryScope = PowerTables.QueryScope;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Wrapper for table event with ability to subscribe/unsubscribe
     */
    var TableEvent = (function () {
        function TableEvent(masterTable) {
            this._handlers = {};
            this._masterTable = masterTable;
        }
        /**
         * Invokes event with overridden this arg and specified event args
         *
         * @param thisArg "this" argument to be substituted to callee
         * @param eventArgs Event args will be passed to callee
         */
        TableEvent.prototype.invoke = function (thisArg, eventArgs) {
            var ea = {
                MasterTable: this._masterTable,
                EventArgs: eventArgs
            };
            var hndlrs = this._handlers;
            var i = 0;
            for (var k in hndlrs) {
                if (hndlrs.hasOwnProperty(k)) {
                    var kHandlers = hndlrs[k];
                    for (i = 0; i < kHandlers.length; i++) {
                        kHandlers[i].apply(thisArg, [ea]);
                    }
                    i = 0;
                }
            }
        };
        /**
         * Subscribes specified function to event with supplied string key.
         * Subscriber key is needed to have an ability to unsubscribe from event
         * and should reflect entity that has been subscriben
         *
         * @param handler Event handler to subscribe
         * @param subscriber Subscriber key to associate with handler
         */
        TableEvent.prototype.subscribe = function (handler, subscriber) {
            if (!this._handlers[subscriber]) {
                this._handlers[subscriber] = [];
            }
            this._handlers[subscriber].push(handler);
        };
        /**
         * Unsubscribes specified addressee from event
         * @param subscriber Subscriber key associated with handler
         */
        TableEvent.prototype.unsubscribe = function (subscriber) {
            this._handlers[subscriber] = null;
            delete this._handlers[subscriber];
        };
        return TableEvent;
    })();
    PowerTables.TableEvent = TableEvent;
    /**
     * Events manager for table.
     * Contains all available events
     */
    var EventsManager = (function () {
        function EventsManager(masterTable) {
            this._masterTable = masterTable;
            this.BeforeQueryGathering = new TableEvent(masterTable);
            this.AfterQueryGathering = new TableEvent(masterTable);
            this.BeforeLoading = new TableEvent(masterTable);
            this.LoadingError = new TableEvent(masterTable);
            this.ColumnsCreation = new TableEvent(masterTable);
            this.DataReceived = new TableEvent(masterTable);
            this.AfterLoading = new TableEvent(masterTable);
            this.BeforeLayoutDrawn = new TableEvent(masterTable);
            this.AfterLayoutDrawn = new TableEvent(masterTable);
        }
        /**
         * Registers new event for events manager.
         * This method is to be used by plugins to provide their
         * own events.
         *
         * Events being added should be described in plugin's .d.ts file
         * as extensions to Events manager
         * @param eventName Event name
         * @returns {}
         */
        EventsManager.prototype.registerEvent = function (eventName) {
            this[eventName] = new TableEvent(this._masterTable);
        };
        return EventsManager;
    })();
    PowerTables.EventsManager = EventsManager;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * This entity is responsible for integration of data between storage and rendere.
     * Also it provides functionality for table events subscription and
     * elements location
     */
    var Controller = (function () {
        function Controller(masterTable) {
            this._domEvents = {};
            this._cellDomSubscriptions = {};
            this._rowDomSubscriptions = {};
            this._masterTable = masterTable;
            this._attachFn = document['addEventListener'] || document['attachEvent'];
            this._matches = (function (el) {
                if (!el)
                    return null;
                var p = el.prototype;
                return (p.matches || p.matchesSelector || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector);
            }(Element));
        }
        /**
         * Initializes full reloading cycle
         * @returns {}
         */
        Controller.prototype.reload = function () {
            var _this = this;
            this._masterTable.Loader.requestServer('query', function () {
                _this.localRedrawVisible();
            });
        };
        Controller.prototype.localRedrawVisible = function () {
            var rows = this.produceRows();
            this._masterTable.Renderer.body(rows);
        };
        /**
         * Subscribe handler to any DOM event happening on particular table cell
         *
         * @param subscription Event subscription
         */
        Controller.prototype.subscribeCellEvent = function (subscription) {
            if (!this._cellDomSubscriptions[subscription.EventId]) {
                this._cellDomSubscriptions[subscription.EventId] = [];
            }
            this._cellDomSubscriptions[subscription.EventId].push(subscription);
            this.ensureEventSubscription(subscription.EventId);
        };
        /**
         * Subscribe handler to any DOM event happening on particular table row.
         * Note that handler will fire even if particular table cell event happened
         *
         * @param subscription Event subscription
         */
        Controller.prototype.subscribeRowEvent = function (subscription) {
            if (!this._rowDomSubscriptions[subscription.EventId]) {
                this._rowDomSubscriptions[subscription.EventId] = [];
            }
            this._rowDomSubscriptions[subscription.EventId].push(subscription);
            this.ensureEventSubscription(subscription.EventId);
        };
        Controller.prototype.ensureEventSubscription = function (eventId) {
            var fn = this.onTableEvent.bind(this);
            this._attachFn(eventId, fn);
            this._domEvents[eventId] = fn;
        };
        Controller.prototype.onTableEvent = function (e) {
            var subscriptions = null;
            var isCell = false;
            if (this._masterTable.Renderer.Locator.isCell(e.currentTarget)) {
                subscriptions = this._cellDomSubscriptions[e.type];
                isCell = true;
            }
            if (this._masterTable.Renderer.Locator.isRow(e.currentTarget)) {
                subscriptions = this._rowDomSubscriptions[e.type];
            }
            if (!subscriptions)
                return;
            if (subscriptions.length === 0)
                return;
            var eventArgs;
            if (isCell) {
                var location = PowerTables.TrackHelper.getCellLocation(e.currentTarget);
                eventArgs = {
                    Table: this._masterTable,
                    DisplayingRowIndex: location.RowIndex,
                    ColumnIndex: location.ColumnIndex,
                    OriginalEvent: e
                };
            }
            else {
                var ridx = PowerTables.TrackHelper.getRowIndex(e.currentTarget);
                eventArgs = {
                    Table: this._masterTable,
                    DisplayingRowIndex: ridx,
                    OriginalEvent: e
                };
            }
            for (var i = 0; i < subscriptions.length; i++) {
                if (subscriptions[i].Selector) {
                    if (!this._matches.apply(e.target, subscriptions[i].Selector))
                        continue;
                }
                subscriptions[i].Handler(eventArgs);
            }
        };
        /**
         * Inserts data entry to local storage
         *
         * @param insertion Insertion command
         */
        Controller.prototype.insertLocalRow = function (insertion) {
            if (insertion.RedrawBehavior === RedrawBehavior.ReloadFromServer) {
                this.reload();
            }
            else {
                this._masterTable.DataHolder.StoredData.splice(insertion.StorageRowIndex, 0, insertion.DataObject);
                if (insertion.RedrawBehavior === RedrawBehavior.LocalFullRefresh)
                    this.localFullRefresh();
                else {
                    this._masterTable.DataHolder.DisplayedData.splice(insertion.DisplayRowIndex, 0, insertion.DataObject);
                    if (insertion.RedrawBehavior === RedrawBehavior.RedrawVisible)
                        this.localRedrawVisible();
                    else if (insertion.RedrawBehavior === RedrawBehavior.LocalVisibleReorder)
                        this.localVisibleReorder();
                    else if (insertion.RedrawBehavior === RedrawBehavior.ParticularRowUpdate) {
                        var row = this.produceRow(insertion.DataObject, insertion.DisplayRowIndex);
                        this._masterTable.Renderer.appendRow(row, insertion.DisplayRowIndex);
                    }
                }
            }
        };
        /**
         * Removes data entry from local storage
         *
         * @param insertion Insertion command
         */
        Controller.prototype.deleteLocalRow = function (deletion) {
            if (deletion.RedrawBehavior === RedrawBehavior.ReloadFromServer) {
                this.reload();
            }
            else {
                this._masterTable.DataHolder.StoredData.splice(deletion.StorageRowIndex, 1);
                if (deletion.RedrawBehavior === RedrawBehavior.LocalFullRefresh)
                    this.localFullRefresh();
                else {
                    this._masterTable.DataHolder.DisplayedData.splice(deletion.DisplayRowIndex, 1);
                    if (deletion.RedrawBehavior === RedrawBehavior.RedrawVisible)
                        this.localRedrawVisible();
                    else if (deletion.RedrawBehavior === RedrawBehavior.LocalVisibleReorder)
                        this.localVisibleReorder();
                    else if (deletion.RedrawBehavior === RedrawBehavior.ParticularRowUpdate) {
                        this._masterTable.Renderer.removeRowByIndex(deletion.DisplayRowIndex);
                    }
                }
            }
        };
        /**
         * Updates data entry in local storage
         *
         * @param insertion Insertion command
         */
        Controller.prototype.updateLocalRow = function (update) {
            if (update.RedrawBehavior === RedrawBehavior.ReloadFromServer) {
                this.reload();
            }
            else {
                var object = this._masterTable.DataHolder.localLookupStoredData(update.StorageRowIndex);
                update.UpdateFn(object);
                if (update.RedrawBehavior === RedrawBehavior.LocalFullRefresh)
                    this.localFullRefresh();
                else {
                    // not required to update displayed object because we are updating reference
                    if (update.RedrawBehavior === RedrawBehavior.RedrawVisible)
                        this.localRedrawVisible();
                    else if (update.RedrawBehavior === RedrawBehavior.LocalVisibleReorder)
                        this.localVisibleReorder();
                    else if (update.RedrawBehavior === RedrawBehavior.ParticularRowUpdate) {
                        var row = this.produceRow(object, update.DisplayRowIndex);
                        this._masterTable.Renderer.redrawRow(row);
                    }
                }
            }
        };
        Controller.prototype.localFullRefresh = function () {
            this._masterTable.DataHolder.filterStoredDataWithPreviousQuery();
            this.localRedrawVisible();
        };
        Controller.prototype.localVisibleReorder = function () {
            this._masterTable.DataHolder.DisplayedData = this._masterTable.DataHolder.orderSet(this._masterTable.DataHolder.DisplayedData, this._masterTable.DataHolder.RecentClientQuery);
            this.localRedrawVisible();
        };
        Controller.prototype.produceRow = function (dataObject, idx, columns) {
            if (!dataObject)
                return null;
            if (!columns)
                columns = this._masterTable.InstanceManager.getUiColumns();
            var rw = {
                DataObject: dataObject,
                Index: idx,
                MasterTable: this._masterTable
            };
            var cells = {};
            for (var j = 0; j < columns.length; j++) {
                var col = columns[j];
                var cell = {
                    Column: col,
                    Data: dataObject[col.RawName],
                    DataObject: dataObject,
                    Row: rw,
                    renderContent: null,
                    renderElement: null
                };
                cells[col.RawName] = cell;
            }
            rw.Cells = cells;
            return rw;
        };
        Controller.prototype.produceRows = function () {
            var result = [];
            var columns = this._masterTable.InstanceManager.getUiColumns();
            for (var i = 0; i < this._masterTable.DataHolder.DisplayedData.length; i++) {
                var row = this.produceRow(this._masterTable.DataHolder.DisplayedData[i], i, columns);
                if (!row)
                    continue;
                result.push(row);
            }
            return result;
        };
        return Controller;
    })();
    PowerTables.Controller = Controller;
    /**
     * Behavior of redrawing table after modification
     */
    (function (RedrawBehavior) {
        /**
         * To perform UI redraw, data will be entirely reloaded from server.
         * Local data will not be affected due to further reloading
         */
        RedrawBehavior[RedrawBehavior["ReloadFromServer"] = 0] = "ReloadFromServer";
        /**
         * Filters will be reapplied only locally.
         * Currently displaying data will be entirely redrawn with client filters
         * using locally cached data from server.
         *
         * In this case, if modified rows are not satisfying any server conditions then
         * is will still stay in table. That may seem illogical for target users.
         */
        RedrawBehavior[RedrawBehavior["LocalFullRefresh"] = 1] = "LocalFullRefresh";
        /**
         * Filters will be reapplied locally but only on currently displaying data.
         *
         * In this case, deleted row will simply disappear, added row will be added to currently
         * displaying cells set and currently displaying set will be re-ordered, modified
         * row will be ordered among only displaying set without filtering.
         * This approach is quite fast and may be useful in various cases
         */
        RedrawBehavior[RedrawBehavior["LocalVisibleReorder"] = 2] = "LocalVisibleReorder";
        /**
         * Simply redraw all the visible cells without additional filtering.
         *
         * May lead to glitches e.g. invalid elements count on page or invalid
         * items order. Most suitable for updating that does not touch filtering/ordering-sensetive
         * data.
         */
        RedrawBehavior[RedrawBehavior["RedrawVisible"] = 3] = "RedrawVisible";
        /**
         * Only particular row mentioned in modification request will be updated.
         * No server reloading, no reordering, no re-sorting. Row will stay in place or
         * will be added at specified position or will be simply disappear from currently displayed set.
         * In some cases such behavior may confuse users, but still stay suitable for most cases.
         * Of course, it will disappear after on next filtering if no more satisfying
         * filter conditions.
         */
        RedrawBehavior[RedrawBehavior["ParticularRowUpdate"] = 4] = "ParticularRowUpdate";
        /**
         * Modification request will not affect UI anyhow until next filtering. Confusing.
         */
        RedrawBehavior[RedrawBehavior["DoNothing"] = 5] = "DoNothing";
    })(PowerTables.RedrawBehavior || (PowerTables.RedrawBehavior = {}));
    var RedrawBehavior = PowerTables.RedrawBehavior;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Class that is responsible for holding and managing data loaded from server
     */
    var DataHolder = (function () {
        function DataHolder(rawColumnNames, isColumnDateTimeFunc, events, instances) {
            this._comparators = {};
            this._filters = [];
            this._anyClientFiltration = false;
            /**
             * Selector of source data on client-side
             */
            this.Selector = null;
            this._rawColumnNames = rawColumnNames;
            this._isColumnDateTimeFunc = isColumnDateTimeFunc;
            this._events = events;
            this._instances = instances;
        }
        /**
         * Registers client filter
         *
         * @param filter Client filter
         */
        DataHolder.prototype.registerClientFilter = function (filter) {
            this._anyClientFiltration = true;
            this._filters.push(filter);
        };
        /**
         * Registers new client ordering comparer function
         *
         * @param dataField Field for which this comparator is applicable
         * @param comparator Comparator fn that should return 0 if entries are equal, -1 if a<b, +1 if a>b
         * @returns {}
         */
        DataHolder.prototype.registerClientOrdering = function (dataField, comparator) {
            this._anyClientFiltration = true;
            this._comparators[dataField] = comparator;
        };
        /**
         * Is there any client filtration pending
         * @returns True if there are any actions to be performed on query after loading, false otherwise
         */
        DataHolder.prototype.isClientFiltrationPending = function () {
            return ((!(!this.Selector)) || this._anyClientFiltration);
        };
        /**
        * Parses response from server and turns it to objects array
        */
        DataHolder.prototype.storeResponse = function (response, clientQuery) {
            var data = [];
            var obj = {};
            var currentColIndex = 0;
            var currentCol = this._rawColumnNames[currentColIndex];
            for (var i = 0; i < response.Data.length; i++) {
                if (this._isColumnDateTimeFunc(currentCol)) {
                    if (response.Data[i]) {
                        obj[currentCol] = Date.parse(response.Data[i]);
                    }
                    else {
                        obj[currentCol] = null;
                    }
                }
                else {
                    obj[currentCol] = response.Data[i];
                }
                currentColIndex++;
                if (currentColIndex >= this._rawColumnNames.length) {
                    currentColIndex = 0;
                    data.push(obj);
                    obj = {};
                }
                currentCol = this._rawColumnNames[currentColIndex];
            }
            this.StoredData = data;
            this.filterStoredData(clientQuery);
        };
        /**
         * Filters supplied data set using client query
         *
         * @param objects Data set
         * @param query Client query
         * @returns {Array} Array of filtered items
         */
        DataHolder.prototype.filterSet = function (objects, query) {
            var result = [];
            if (this._filters.length !== 0) {
                for (var i = 0; i < objects.length; i++) {
                    var obj = objects[i];
                    var acceptable = true;
                    for (var j = 0; j < this._filters.length; j++) {
                        var filter = this._filters[j];
                        acceptable = filter.filterPredicate(obj, query);
                        if (!acceptable)
                            break;
                    }
                    if (!acceptable)
                        continue;
                    result.push(obj);
                }
                return result;
            }
            return objects;
        };
        /**
        * Orders supplied data set using client query
        *
        * @param objects Data set
        * @param query Client query
        * @returns {Array} Array of ordered items
        */
        DataHolder.prototype.orderSet = function (objects, query) {
            if (query.Orderings) {
                var sortFn = '';
                var comparersArg = '';
                var orderFns = [];
                for (var orderingKey in query.Orderings) {
                    if (query.Orderings.hasOwnProperty(orderingKey)) {
                        var orderingDirection = query.Orderings[orderingKey];
                        if (orderingDirection === PowerTables.Ordering.Neutral)
                            continue;
                        if (!this._comparators[orderingKey])
                            continue;
                        var negate = orderingDirection === PowerTables.Ordering.Descending;
                        sortFn += "cc=f" + orderFns.length + "(a,b); ";
                        comparersArg += "f" + orderFns.length + ",";
                        orderFns.push(this._comparators[orderingKey]);
                        sortFn += "if (cc!=0) return " + (negate ? '-cc' : 'cc') + "; ";
                    }
                }
                if (sortFn.length === 0)
                    return objects;
                comparersArg = comparersArg.substr(0, comparersArg.length - 1);
                sortFn = "(function(" + comparersArg + "){ return (function (a,b) { var cc = 0; " + sortFn + " return 0; }); })";
                var sortFunction = eval(sortFn).apply(null, orderFns);
                var ordered = objects.sort(sortFunction);
                return ordered;
            }
            return objects;
        };
        /**
         * Filter recent data and store it to currently displaying data
         *
         * @param query Table query
         * @returns {}
         */
        DataHolder.prototype.filterStoredData = function (query) {
            this.DisplayedData = this.StoredData;
            this.RecentClientQuery = query;
            if (this.isClientFiltrationPending() && (!(!query))) {
                var copy = this.StoredData.slice();
                var filtered = this.filterSet(copy, query);
                var ordered = this.orderSet(filtered, query);
                var selected = ordered;
                if (this.Selector) {
                    selected = this.Selector.selectData(ordered, query);
                }
                this.DisplayedData = selected;
            }
        };
        /**
         * Filter recent data and store it to currently displaying data
         * using query that was previously applied to local data
         */
        DataHolder.prototype.filterStoredDataWithPreviousQuery = function () {
            this.filterStoredData(this.RecentClientQuery);
        };
        /**
         * Finds data matching predicate among locally stored data
         *
         * @param predicate Filtering predicate returning true for required objects
         * @returns Array of ILocalLookupResults
         */
        DataHolder.prototype.localLookup = function (predicate) {
            var result = [];
            for (var i = 0; i < this.StoredData.length; i++) {
                if (predicate(this.StoredData[i])) {
                    result.push({
                        DataObject: this.StoredData[i],
                        IsCurrentlyDisplaying: false,
                        LoadedIndex: i,
                        DisplayedIndex: -1
                    });
                }
            }
            for (var j = 0; j < result.length; j++) {
                var idx = this.DisplayedData.indexOf(result[j].DataObject);
                if (idx >= 0) {
                    result[j].IsCurrentlyDisplaying = true;
                    result[j].DisplayedIndex = idx;
                }
            }
            return result;
        };
        /**
         * Finds data object among currently displayed and returns ILocalLookupResult
         * containing also Loaded-set index of this data object
         *
         * @param index Index of desired data object among locally displaying data
         * @returns ILocalLookupResult
         */
        DataHolder.prototype.localLookupDisplayedData = function (index) {
            if (index < 0)
                return null;
            if (index > this.DisplayedData.length)
                return null;
            var result = {
                DataObject: this.DisplayedData[index],
                IsCurrentlyDisplaying: true,
                DisplayedIndex: index,
                LoadedIndex: this.StoredData.indexOf(this.DisplayedData[index])
            };
            return result;
        };
        /**
         * Finds data object among recently loaded and returns ILocalLookupResult
         * containing also Loaded-set index of this data object
         *
         * @param index Index of desired data object among locally displaying data
         * @returns ILocalLookupResult
         */
        DataHolder.prototype.localLookupStoredData = function (index) {
            if (index < 0)
                return null;
            if (index > this.StoredData.length)
                return null;
            var result = {
                DataObject: this.StoredData[index],
                IsCurrentlyDisplaying: true,
                DisplayedIndex: this.DisplayedData.indexOf(this.StoredData[index]),
                LoadedIndex: index
            };
            return result;
        };
        return DataHolder;
    })();
    PowerTables.DataHolder = DataHolder;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * This thing is used to manage instances of columns, plugins etc.
     * It consumes PT configuration as source and provides caller with
     * plugins instances, variable ways to query them and accessing their properties
     */
    var InstanceManager = (function () {
        function InstanceManager(configuration, masterTable, events) {
            /**
             * Dictionary containing current table columns configurations.
             * Key - raw column name. Value - IColumn instance
             */
            this.Columns = {};
            /**
             * Dictionary containing all instances of table plugins.
             * Key - full plugin ID (incl. placement). Value - plugin itself
             */
            this.Plugins = {};
            this._rawColumnNames = [];
            this.Configuration = configuration;
            this._masterTable = masterTable;
            this._events = events;
            this.initColumns();
        }
        InstanceManager.prototype.initColumns = function () {
            var columns = [];
            for (var i = 0; i < this.Configuration.Columns.length; i++) {
                var c = {
                    Configuration: this.Configuration.Columns[i],
                    RawName: this.Configuration.Columns[i].RawColumnName,
                    MasterTable: this._masterTable,
                    Header: null,
                    Order: i
                };
                c.Header = {
                    Column: c,
                    renderContent: null,
                    renderElement: null
                };
                this.Columns[c.RawName] = c;
                columns.push(c);
            }
            columns = columns.sort(function (a, b) { return a.Order - b.Order; });
            for (var j = 0; j < columns.length; j++) {
                this._rawColumnNames.push(columns[j].RawName);
            }
        };
        InstanceManager.prototype.initPlugins = function () {
            var pluginsConfiguration = this.Configuration.PluginsConfiguration;
            for (var pluginId in pluginsConfiguration) {
                if (pluginsConfiguration.hasOwnProperty(pluginId)) {
                    var conf = pluginsConfiguration[pluginId];
                    var plugin = PowerTables.ComponentsContainer.resolveComponent(conf.PluginId);
                    plugin.PluginLocation = pluginId;
                    plugin.RawConfig = conf;
                    plugin.init(this._masterTable);
                    this.Plugins[pluginId] = plugin;
                }
            }
            this._events.ColumnsCreation.invoke(this, this.Columns);
        };
        InstanceManager.prototype.getPlugin = function (pluginId, placement) {
            if (!placement)
                placement = '';
            var key = placement + "-" + pluginId;
            if (this.Plugins[key])
                return (this.Plugins[key]);
            else {
                for (var k in this.Plugins) {
                    if (this.Plugins.hasOwnProperty(k)) {
                        var kp = k.substring(0, pluginId.length);
                        if (kp === pluginId)
                            return this.Plugins[k];
                    }
                }
            }
            throw new Error("There is no plugin " + pluginId + " on place " + placement);
        };
        /**
         * Retrieves plugins list at specific placement
         *
         * @param placement Plugins placement
         * @returns {}
         */
        InstanceManager.prototype.getPlugins = function (placement) {
            var result = [];
            for (var k in this.Plugins) {
                if (this.Plugins.hasOwnProperty(k)) {
                    var kp = k.substring(0, placement.length);
                    if (kp === placement) {
                        result.push(this.Plugins[k]);
                    }
                }
            }
            return result;
        };
        /**
         * Reteives plugin at specified placement
         * @param pluginId Plugin ID
         * @param placement Pluign placement
         * @returns {}
         */
        InstanceManager.prototype.getColumnFilter = function (columnName) {
            var filterId = 'filter-' + columnName;
            for (var k in this.Plugins) {
                if (this.Plugins.hasOwnProperty(k)) {
                    var kp = k.substring(0, filterId.length);
                    if (kp === filterId)
                        return this.Plugins[k];
                }
            }
            throw new Error("There is no filter for " + columnName);
        };
        /**
         * Determines is column of DateTime type or not
         * @param columnName Column name
         * @returns {}
         */
        InstanceManager.prototype.isDateTime = function (columnName) {
            return this.isDateTimeColumn(this.Columns[columnName]);
        };
        /**
         * Determines is column of DateTime type or not
         * @param columnName Column name
         * @returns {}
         */
        InstanceManager.prototype.isDateTimeColumn = function (column) {
            var tpn = column.Configuration.ColumnType;
            return ((tpn === 'DateTime') || (tpn === 'DateTime?'));
        };
        /**
         * Retrieves sequential columns names in corresponding order
         * @returns {}
         */
        InstanceManager.prototype.getColumnNames = function () {
            return this._rawColumnNames;
        };
        /**
         * Retrieves sequential columns names in corresponding order
         * @returns {}
         */
        InstanceManager.prototype.getUiColumnNames = function () {
            var result = [];
            var uiCol = this.getUiColumns();
            for (var i = 0; i < uiCol.length; i++) {
                result.push(uiCol[i].RawName);
            }
            return result;
        };
        /**
         * Retreives columns suitable for UI rendering in corresponding order
         *
         * @returns {}
         */
        InstanceManager.prototype.getUiColumns = function () {
            var result = [];
            for (var ck in this.Columns) {
                if (this.Columns.hasOwnProperty(ck)) {
                    var col = this.Columns[ck];
                    if (col.Configuration.IsDataOnly)
                        continue;
                    result.push(col);
                }
            }
            result = result.sort(function (a, b) { return a.Order - b.Order; });
            return result;
        };
        /**
         * Retrieves column by its raw name
         *
         * @param columnName Raw column name
         * @returns {}
         */
        InstanceManager.prototype.getColumn = function (columnName) {
            if (!this.Columns.hasOwnProperty(columnName))
                throw new Error("Column " + columnName + " not found for rendering");
            return this.Columns[columnName];
        };
        return InstanceManager;
    })();
    PowerTables.InstanceManager = InstanceManager;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Component that is responsible for querying server
     */
    var Loader = (function () {
        function Loader(staticData, operationalAjaxUrl, events, dataHolder) {
            this._queryPartProviders = [];
            this._isFirstTimeLoading = false;
            this._staticData = staticData;
            this._operationalAjaxUrl = operationalAjaxUrl;
            this._events = events;
            this._dataHolder = dataHolder;
        }
        /**
         * Registers new query part provider to be used while collecting
         * query data before sending it to server.
         *
         * @param provider instance implementing IQueryPartProvider interface
         * @returns {}
         */
        Loader.prototype.registerQueryPartProvider = function (provider) {
            this._queryPartProviders.push(provider);
        };
        Loader.prototype.gatherQuery = function (queryScope) {
            var a = {
                Paging: {
                    PageSize: 0,
                    PageIndex: 0
                },
                Orderings: {},
                Filterings: {},
                AdditionalData: {},
                StaticDataJson: this._staticData
            };
            this._events.BeforeQueryGathering.invoke(this, { Query: a, Scope: queryScope });
            for (var i = 0; i < this._queryPartProviders.length; i++) {
                this._queryPartProviders[i].modifyQuery(a, queryScope);
            }
            this._events.AfterQueryGathering.invoke(this, { Query: a, Scope: queryScope });
            return a;
        };
        Loader.prototype.getXmlHttp = function () {
            if (this._previousRequest) {
                this._previousRequest.abort();
                this._previousRequest = null;
            }
            var xmlhttp;
            try {
                xmlhttp = new ActiveXObject('Msxml2.XMLHTTP');
            }
            catch (e) {
                try {
                    xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
                }
                catch (E) {
                    xmlhttp = false;
                }
            }
            if (!xmlhttp && typeof XMLHttpRequest != 'undefined') {
                xmlhttp = new XMLHttpRequest();
            }
            this._previousRequest = xmlhttp;
            return xmlhttp;
        };
        Loader.prototype.doServerQuery = function (data, clientQuery, callback) {
            var _this = this;
            var dataText = JSON.stringify(data);
            var req = this.getXmlHttp();
            this._events.BeforeLoading.invoke(this, {
                Request: data,
                XMLHttp: req
            });
            req.open('POST', this._operationalAjaxUrl, 1);
            req.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            req.setRequestHeader('Content-type', 'application/json');
            var reqEvent = req.onload ? 'onload' : 'onreadystatechange'; // for IE
            req[reqEvent] = (function () {
                if (req.readyState != 4)
                    return false;
                if (req.status === 200) {
                    var ctype = req.getResponseHeader('content-type');
                    if (ctype)
                        ctype = ctype.toLowerCase();
                    if (ctype && ctype.indexOf('application/json') >= 0) {
                        var json = JSON.parse(req.responseText);
                        if (data.Command === 'query') {
                            if (json['Success'] != undefined && !json.Success) {
                                _this._events.LoadingError.invoke(_this, {
                                    Request: data,
                                    XMLHttp: req,
                                    Reason: json.Message
                                });
                            }
                            else {
                                _this._events.DataReceived.invoke(_this, {
                                    Request: data,
                                    XMLHttp: req,
                                    Data: json
                                });
                                _this._dataHolder.storeResponse(json, clientQuery);
                                callback(json);
                            }
                            _this._previousQueryString = JSON.stringify(data.Query);
                        }
                        else {
                            _this._events.DataReceived.invoke(_this, {
                                Request: data,
                                XMLHttp: req,
                                Data: json
                            }); //?
                            callback(json);
                        }
                    }
                    else {
                        if (ctype && ctype.indexOf('lattice/service') >= 0) {
                            if (req.responseText.indexOf('$Token=') === 0) {
                                var token = req.responseText.substr(7, req.responseText.length - 7);
                                _this._events.DeferredDataReceived.invoke(_this, {
                                    Request: data,
                                    XMLHttp: req,
                                    Token: token,
                                    DataUrl: _this._operationalAjaxUrl + '?q=' + token
                                });
                                callback({ $isDeferred: true, $url: _this._operationalAjaxUrl + '?q=' + token, $token: token });
                            }
                        }
                    }
                }
                else {
                    if (req.status === 0)
                        return false; // for IE
                    _this._events.LoadingError.invoke(_this, {
                        Request: data,
                        XMLHttp: req,
                        Reason: 'Network error'
                    });
                }
                _this._events.AfterLoading.invoke(_this, {
                    Request: data,
                    XMLHttp: req
                });
            });
            //req.onabort = (e => {
            //    this.Events.AfterLoading.invoke(this, [this]);
            //});
            //failTimeout = setTimeout(() => { req.abort(); this.Renderer.showError('Network error: network unreacheable'); }, 10000);
            req.send(dataText);
        };
        /**
         * Sends specified request to server and lets table handle it.
         * Always use this method to invoke table's server functionality because this method
         * correctly rises all events, handles errors etc
         *
         * @param command Query command
         * @param callback Callback that will be invoked after data received
         * @param queryModifier Inline query modifier for in-place query modification
         * @returns {}
         */
        Loader.prototype.requestServer = function (command, callback, queryModifier) {
            var scope = PowerTables.QueryScope.Transboundary;
            if (command === 'query')
                scope = PowerTables.QueryScope.Server;
            var serverQuery = this.gatherQuery(scope);
            var clientQuery = null;
            if (command === 'query')
                clientQuery = this.gatherQuery(PowerTables.QueryScope.Client);
            if (queryModifier) {
                queryModifier(serverQuery);
                queryModifier(clientQuery);
            }
            var queriesEqual = (command === 'query') && (JSON.stringify(serverQuery) === this._previousQueryString);
            if (!queriesEqual) {
                var data = {
                    Command: command,
                    Query: serverQuery
                };
                this.doServerQuery(data, clientQuery, callback);
            }
            else {
                this._dataHolder.filterStoredData(clientQuery);
                callback(null);
            }
        };
        return Loader;
    })();
    PowerTables.Loader = Loader;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Part of renderer that is responsible for rendering of dynamically loaded content
         */
        var ContentRenderer = (function () {
            function ContentRenderer(templatesProvider, stack, instances) {
                this._columnsRenderFunctions = {};
                this._hb = templatesProvider.HandlebarsInstance;
                this._templatesProvider = templatesProvider;
                this._stack = stack;
                this._instances = instances;
                this.cacheColumnRenderers(this._instances.Columns);
            }
            /**
             * Renders supplied table rows to string
             *
             * @param rows Table rows
             * @returns String containing HTML of table rows
             */
            ContentRenderer.prototype.renderBody = function (rows) {
                var result = '';
                var wrapper = this._templatesProvider.getCachedTemplate('rowWrapper');
                for (var i = 0; i < rows.length; i++) {
                    var rw = rows[i];
                    this._stack.push(Rendering.RenderingContextType.Row, rw);
                    if (rw.renderElement) {
                        result += rw.renderElement(this._templatesProvider);
                    }
                    else {
                        result += wrapper(rw);
                    }
                    this._stack.popContext();
                }
                return result;
            };
            ContentRenderer.prototype.renderContent = function (columnName) {
                var result = '';
                switch (this._stack.Current.Type) {
                    case Rendering.RenderingContextType.Row:
                        var row = this._stack.Current.Object;
                        var columns = this._instances.getUiColumns();
                        var cellWrapper = this._templatesProvider.getCachedTemplate('cellWrapper');
                        for (var i = 0; i < columns.length; i++) {
                            var cell = row.Cells[columns[i].RawName];
                            this._stack.push(Rendering.RenderingContextType.Cell, cell, columns[i].RawName);
                            if (cell.renderElement)
                                result += cell.renderElement(this._templatesProvider);
                            else
                                result += cellWrapper(cell);
                            this._stack.popContext();
                        }
                        break;
                    case Rendering.RenderingContextType.Cell:
                        var tmpl = this._columnsRenderFunctions[this._stack.Current.Object.Column.RawName];
                        result += tmpl(this._stack.Current.Object);
                        break;
                }
                return result;
            };
            ContentRenderer.prototype.cacheColumnRenderers = function (columns) {
                for (var key in columns) {
                    if (columns.hasOwnProperty(key)) {
                        var columnConfig = columns[key].Configuration;
                        if (columnConfig.CellRenderingValueFunction) {
                            this._columnsRenderFunctions[columnConfig.RawColumnName] =
                                function (x) {
                                    return x.Column.Configuration.CellRenderingValueFunction(x.DataObject);
                                };
                            continue;
                        }
                        if (columnConfig.CellRenderingTemplateId) {
                            var compiled = this._hb.compile(document.getElementById(columnConfig.CellRenderingTemplateId).innerHTML);
                            this._columnsRenderFunctions[columnConfig.RawColumnName] =
                                (function (compl) { return function (x) { return compl(x.DataObject); }; })(compiled);
                            continue;
                        }
                        this._columnsRenderFunctions[columnConfig.RawColumnName] =
                            function (x) { return ((x.Data !== null && x.Data !== undefined) ? x.Data : ''); };
                    }
                }
                ;
            };
            return ContentRenderer;
        })();
        Rendering.ContentRenderer = ContentRenderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        var Html2Dom;
        (function (Html2Dom) {
            var HtmlParserDefinitions = (function () {
                function HtmlParserDefinitions() {
                }
                HtmlParserDefinitions.makeMap = function (str) {
                    var obj = {}, items = str.split(",");
                    for (var i = 0; i < items.length; i++)
                        obj[items[i]] = true;
                    return obj;
                };
                // Regular Expressions for parsing tags and attributes
                HtmlParserDefinitions.startTag = /^<([-A-Za-z0-9_]+)((?:[\s\w\-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/;
                HtmlParserDefinitions.endTag = /^<\/([-A-Za-z0-9_]+)[^>]*>/;
                HtmlParserDefinitions.attr = /([-A-Za-z0-9_]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;
                // Empty Elements - HTML 4.01
                HtmlParserDefinitions.empty = HtmlParserDefinitions.makeMap("area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed");
                // Block Elements - HTML 4.01
                HtmlParserDefinitions.block = HtmlParserDefinitions.makeMap("address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul");
                // Inline Elements - HTML 4.01
                HtmlParserDefinitions.inline = HtmlParserDefinitions.makeMap("a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var");
                // Elements that you can, intentionally, leave open
                // (and which close themselves)
                HtmlParserDefinitions.closeSelf = HtmlParserDefinitions.makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr");
                // Attributes that have their values filled in disabled="disabled"
                HtmlParserDefinitions.fillAttrs = HtmlParserDefinitions.makeMap("checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected");
                // Special Elements (can contain anything)
                HtmlParserDefinitions.special = HtmlParserDefinitions.makeMap("script,style");
                return HtmlParserDefinitions;
            })();
            Html2Dom.HtmlParserDefinitions = HtmlParserDefinitions;
            /**
             * Small HTML parser to turn user's HTMl to DOM
             * Thanks to John Resig, co-author of jQuery
             * http://ejohn.org/blog/pure-javascript-html-parser/
             */
            var HtmlParser = (function () {
                function HtmlParser() {
                    this._elems = [];
                    this._topNodes = [];
                    this._stack = [];
                    this._stack.last = function () {
                        if (this.length === 0)
                            return null;
                        return this[this.length - 1];
                    };
                }
                //#region parsering
                HtmlParser.prototype.parse = function (html) {
                    var _this = this;
                    var index, chars, match, last = html;
                    while (html) {
                        chars = true;
                        var stackCurrent = this._stack.last();
                        // Make sure we're not in a script or style element
                        if (!stackCurrent || !HtmlParserDefinitions.special[stackCurrent]) {
                            // Comment
                            if (html.indexOf("<!--") === 0) {
                                index = html.indexOf("-->");
                                if (index >= 0) {
                                    html = html.substring(index + 3);
                                    chars = false;
                                }
                            }
                            else if (html.indexOf("</") === 0) {
                                match = html.match(HtmlParserDefinitions.endTag);
                                if (match) {
                                    html = html.substring(match[0].length);
                                    match[0].replace(HtmlParserDefinitions.endTag, this.parseEndTag.bind(this));
                                    chars = false;
                                }
                            }
                            else if (html.indexOf("<") == 0) {
                                match = html.match(HtmlParserDefinitions.startTag);
                                if (match) {
                                    html = html.substring(match[0].length);
                                    match[0].replace(HtmlParserDefinitions.startTag, this.parseStartTag.bind(this));
                                    chars = false;
                                }
                            }
                            if (chars) {
                                index = html.indexOf("<");
                                var text = index < 0 ? html : html.substring(0, index);
                                html = index < 0 ? "" : html.substring(index);
                                this.chars(text);
                            }
                        }
                        else {
                            html = html.replace(new RegExp("(.*)<\/" + this._stack.last() + "[^>]*>"), function (all, text) {
                                text = text.replace(/<!--(.*?)-->/g, "$1")
                                    .replace(/<!\[CDATA\[(.*?)]]>/g, "$1");
                                _this.chars(text);
                                return "";
                            });
                            this.parseEndTag("", this._stack.last());
                        }
                        if (html === last)
                            throw new Error("HTML Parse Error: " + html);
                        last = html;
                    }
                    // Clean up any remaining tags
                    this.parseEndTag();
                };
                HtmlParser.prototype.parseStartTag = function (tag, tagName, rest, unary) {
                    tagName = tagName.toLowerCase();
                    if (HtmlParserDefinitions.block[tagName]) {
                        while (this._stack.last() && HtmlParserDefinitions.inline[this._stack.last()]) {
                            this.parseEndTag("", this._stack.last());
                        }
                    }
                    if (HtmlParserDefinitions.closeSelf[tagName] && this._stack.last() === tagName) {
                        this.parseEndTag("", tagName);
                    }
                    unary = HtmlParserDefinitions.empty[tagName] || !!unary;
                    if (!unary)
                        this._stack.push(tagName);
                    var attrs = [];
                    rest.replace(HtmlParserDefinitions.attr, function (match, name) {
                        var value = arguments[2] ? arguments[2] :
                            arguments[3] ? arguments[3] :
                                arguments[4] ? arguments[4] :
                                    HtmlParserDefinitions.fillAttrs[name] ? name : "";
                        attrs.push({
                            name: name,
                            value: value,
                            escaped: value.replace(/(^|[^\\])"/g, '$1\\\"') //"
                        });
                    });
                    this.start(tagName, attrs, unary);
                    return '';
                };
                HtmlParser.prototype.parseEndTag = function (tag, tagName) {
                    var pos;
                    // If no tag name is provided, clean shop
                    if (!tagName)
                        pos = 0;
                    else {
                        for (pos = this._stack.length - 1; pos >= 0; pos--)
                            if (this._stack[pos] === tagName)
                                break;
                    }
                    if (pos >= 0) {
                        // Close all the open elements, up the stack
                        for (var i = this._stack.length - 1; i >= pos; i--)
                            this.end(this._stack[i]);
                        // Remove the open elements from the stack
                        this._stack.length = pos;
                    }
                    return '';
                };
                HtmlParser.prototype.start = function (tagName, attrs, unary) {
                    var elem = document.createElement(tagName);
                    for (var i = 0; i < attrs.length; i++) {
                        elem.setAttribute(attrs[i].name, attrs[i].value);
                    }
                    if (this._curParentNode && this._curParentNode.appendChild) {
                        this._curParentNode.appendChild(elem);
                    }
                    if (!unary) {
                        this._elems.push(elem);
                        this._curParentNode = elem;
                    }
                };
                HtmlParser.prototype.end = function (tag) {
                    this._elems.length -= 1;
                    if (this._elems.length === 0) {
                        this._topNodes.push(this._curParentNode);
                    }
                    this._curParentNode = this._elems[this._elems.length - 1];
                };
                HtmlParser.prototype.chars = function (text) {
                    if (text.length === 0)
                        return;
                    this._curParentNode.appendChild(document.createTextNode(text));
                };
                //#endregion
                HtmlParser.prototype.html2Dom = function (html) {
                    this.parse(html.trim());
                    if (this._topNodes.length > 1) {
                        throw new Error("Wrapper must have root element. Templates with multiple root elements are not supported yet");
                    }
                    return this._topNodes.length ? this._topNodes[0] : null;
                };
                return HtmlParser;
            })();
            Html2Dom.HtmlParser = HtmlParser;
        })(Html2Dom = Rendering.Html2Dom || (Rendering.Html2Dom = {}));
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Rendering stack class. Provives common helper
         * infrastructure for context-oriented rendering
         */
        var RenderingStack = (function () {
            function RenderingStack() {
                this._contextStack = [];
                /**
                 * Current rendering context
                 */
                this.Current = null;
            }
            /**
             * Clears rendering stack
             * @returns {}
             */
            RenderingStack.prototype.clear = function () {
                this.Current = null;
                if (this._contextStack.length === 0)
                    return;
                this._contextStack = [];
            };
            /**
             * Pushes rendering context into stack
             * @param ctx
             * @returns {}
             */
            RenderingStack.prototype.pushContext = function (ctx) {
                this._contextStack.push(ctx);
                this.Current = ctx;
            };
            /**
             * Pushes rendering context into stack
             * @param elementType What is being rendered
             * @param element Reference to object is being rendered
             * @param columnName Optional column name - for column-contexted rendering objects
             * @returns {}
             */
            RenderingStack.prototype.push = function (elementType, element, columnName) {
                if (columnName === void 0) { columnName = ''; }
                var ctx = {
                    Type: elementType,
                    Object: element,
                    ColumnName: columnName,
                    CurrentTrack: this.getTrack(elementType, element)
                };
                this._contextStack.push(ctx);
                this.Current = ctx;
            };
            RenderingStack.prototype.getTrack = function (elementType, element) {
                var trk;
                switch (elementType) {
                    case RenderingContextType.Plugin:
                        trk = PowerTables.TrackHelper.getPluginTrack(element);
                        break;
                    case RenderingContextType.Header:
                        trk = PowerTables.TrackHelper.getHeaderTrack(element);
                        break;
                    case RenderingContextType.Cell:
                        trk = PowerTables.TrackHelper.getCellTrack(element);
                        break;
                    case RenderingContextType.Row:
                        trk = PowerTables.TrackHelper.getRowTrack(element);
                        break;
                    default:
                        throw new Error("Invalid context element type");
                }
                return trk;
            };
            /**
             * Pops rendering context from stack
             * @returns {}
             */
            RenderingStack.prototype.popContext = function () {
                this._contextStack.pop();
                if (this._contextStack.length === 0)
                    this.Current = null;
                else
                    this.Current = this._contextStack[this._contextStack.length - 1];
            };
            return RenderingStack;
        })();
        Rendering.RenderingStack = RenderingStack;
        /**
         * What renders in current helper method
         */
        (function (RenderingContextType) {
            /**
             * Plugin (0)
             */
            RenderingContextType[RenderingContextType["Plugin"] = 0] = "Plugin";
            /**
             * Column header (1)
             */
            RenderingContextType[RenderingContextType["Header"] = 1] = "Header";
            /**
             * Row (containing cells) (2)
             */
            RenderingContextType[RenderingContextType["Row"] = 2] = "Row";
            /**
             * Cell (belonging to row and column) (3)
             */
            RenderingContextType[RenderingContextType["Cell"] = 3] = "Cell";
        })(Rendering.RenderingContextType || (Rendering.RenderingContextType = {}));
        var RenderingContextType = Rendering.RenderingContextType;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
/// <reference path="../ExternalTypings.d.ts"/>
/// <reference path="RenderingStack.ts"/>
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Layout renderer
         * Is responsive for common layout rendering (with plugins, columns, etc)
         */
        var LayoutRenderer = (function () {
            function LayoutRenderer(templates, stack, instances) {
                this._eventsQueue = [];
                this._hb = templates.HandlebarsInstance;
                this._templatesProvider = templates;
                this._stack = stack;
                this._instances = instances;
                this._hb.registerHelper('Body', this.bodyHelper);
                this._hb.registerHelper('Plugin', this.pluginHelper.bind(this));
                this._hb.registerHelper('Plugins', this.pluginsHelper.bind(this));
                this._hb.registerHelper('Header', this.headerHelper.bind(this));
                this._hb.registerHelper('Headers', this.headersHelper.bind(this));
                this._hb.registerHelper('BindEvent', this.bindEventHelper.bind(this));
            }
            /**
             * Applies binding of events left in events queue
             *
             * @param parentElement Parent element to lookup for event binding attributes
             * @returns {}
             */
            LayoutRenderer.prototype.bindEventsQueue = function (parentElement) {
                // bind plugins/filters events
                var sources = parentElement.querySelectorAll('[data-be]');
                for (var i = 0; i < sources.length; i++) {
                    var domSource = sources.item(i);
                    var bindTrack = parseInt(domSource.getAttribute('data-be'));
                    var subscription = this._eventsQueue[bindTrack];
                    for (var j = 0; j < subscription.Functions.length; j++) {
                        var bindFn = subscription.Functions[j];
                        var handler = null;
                        if (subscription.EventReceiver[bindFn] && (typeof subscription.EventReceiver[bindFn] === 'function')) {
                            handler = subscription.EventReceiver[bindFn];
                        }
                        else {
                            handler = eval(bindFn);
                        }
                        for (var k = 0; k < subscription.Events.length; k++) {
                            (function (receiver, domSource, handler, eventId) {
                                domSource.addEventListener(eventId, function (evt) { return handler.apply(receiver, [{ Element: domSource, EventObject: evt, Receiver: receiver }]); });
                            })(subscription.EventReceiver, domSource, handler, subscription.Events[k]);
                        }
                    }
                    domSource.removeAttribute('data-be');
                }
            };
            //#region Handlebars helpers
            LayoutRenderer.prototype.bodyHelper = function () {
                return '<input type="hidden" data-track="tableBodyHere" style="display:none;"/>';
            };
            //#region Plugin helpers
            LayoutRenderer.prototype.pluginHelper = function (pluginPosition, pluginId) {
                var plugin = this._instances.getPlugin(pluginId, pluginPosition);
                return this.renderPlugin(plugin);
            };
            LayoutRenderer.prototype.pluginsHelper = function (pluginPosition) {
                var plugins = this._instances.getPlugins(pluginPosition);
                if (!plugins)
                    return '';
                var result = '';
                for (var a in plugins) {
                    if (plugins.hasOwnProperty(a)) {
                        var v = plugins[a];
                        result += this.renderPlugin(v);
                    }
                }
                return result;
            };
            /**
             * Renders specified plugin into string including its wrapper
             *
             * @param plugin Plugin interface
             * @returns {}
             */
            LayoutRenderer.prototype.renderPlugin = function (plugin) {
                if (plugin.renderElement)
                    return plugin.renderElement(this._templatesProvider);
                if (!plugin.renderContent)
                    return '';
                this._stack.push(Rendering.RenderingContextType.Plugin, plugin);
                var result = this._templatesProvider.getCachedTemplate('pluginWrapper')(plugin);
                this._stack.popContext();
                return result;
            };
            //#endregion
            // #region headers helper
            LayoutRenderer.prototype.headerHelper = function (columnName) {
                return this.renderHeader(this._instances.getColumn(columnName));
            };
            /**
             * Renders specified column's header into string including its wrapper
             *
             * @param column Column which header is about to be rendered
             * @returns {}
             */
            LayoutRenderer.prototype.renderHeader = function (column) {
                this._stack.push(Rendering.RenderingContextType.Header, column.Header, column.RawName);
                var result;
                if (column.Header.renderElement)
                    result = column.Header.renderElement(this._templatesProvider);
                else
                    result = this._templatesProvider.getCachedTemplate('headerWrapper')(column.Header);
                this._stack.popContext();
                return result;
            };
            LayoutRenderer.prototype.headersHelper = function () {
                var columns = this._instances.getUiColumns();
                var result = '';
                for (var a in columns) {
                    if (columns.hasOwnProperty(a)) {
                        var v = columns[a];
                        result += this.renderHeader(v);
                    }
                }
                return result;
            };
            //#endregion
            //#region
            LayoutRenderer.prototype.bindEventHelper = function (commaSeparatedFunctions, commaSeparatedEvents) {
                var ed = {
                    EventReceiver: this._stack.Current.Object,
                    Functions: commaSeparatedFunctions.split(','),
                    Events: commaSeparatedEvents.split(',')
                };
                var index = this._eventsQueue.length;
                this._eventsQueue.push(ed);
                return "data-be=" + index;
            };
            LayoutRenderer.prototype.renderContent = function (columnName) {
                switch (this._stack.Current.Type) {
                    case Rendering.RenderingContextType.Header:
                        return this._stack.Current.Object.Column.Configuration.Title
                            || this._stack.Current.Object.Column.RawName;
                    case Rendering.RenderingContextType.Plugin:
                        // if we are here then plugin's renderContent is not 
                        // overriden
                        throw new Error("It is required to override renderContent for plugin");
                }
                return '';
            };
            return LayoutRenderer;
        })();
        Rendering.LayoutRenderer = LayoutRenderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * This module allows you to locate particular elements in table's DOM
         */
        var DOMLocator = (function () {
            function DOMLocator(bodyElement, rootElement, rootId) {
                this._bodyElement = bodyElement;
                this._rootElement = rootElement;
                this._rootIdPrefix = "#" + rootId;
            }
            /**
             * Retrieves cell element by cell object
             *
             * @param cell Cell element
             * @returns {HTMLElement} Element containing cell (with wrapper)
             */
            DOMLocator.prototype.getCellElement = function (cell) {
                var track = PowerTables.TrackHelper.getCellTrack(cell);
                return this._bodyElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves cell element using supplied coordinates
             *
             * @param cell Cell element
             * @returns {HTMLElement} Element containing cell (with wrapper)
             */
            DOMLocator.prototype.getCellElementByIndex = function (rowDisplayIndex, columnIndex) {
                var track = PowerTables.TrackHelper.getCellTrackByIndexes(rowDisplayIndex, columnIndex);
                return this._bodyElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves row element (including wrapper)
             *
             * @param row Row
             * @returns HTML element
             */
            DOMLocator.prototype.getRowElement = function (row) {
                var track = PowerTables.TrackHelper.getRowTrack(row);
                return this._bodyElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
            * Retrieves row element (including wrapper) by specified row index
            *
            * @param row Row
            * @returns HTML element
            */
            DOMLocator.prototype.getRowElementByIndex = function (rowDisplayingIndex) {
                var track = PowerTables.TrackHelper.getRowTrackByIndex(rowDisplayingIndex);
                return this._bodyElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves data cells for specified column (including wrappers)
             *
             * @param column Column desired data cells belongs to
             * @returns HTML NodeList containing results
             */
            DOMLocator.prototype.getColumnCellsElements = function (column) {
                var colIdx = column.MasterTable.InstanceManager.getUiColumnNames().indexOf(column.RawName);
                return this._bodyElement.querySelectorAll(this._rootIdPrefix + " [data-track$=\"-c" + colIdx + "\"]");
            };
            /**
             * Retrieves data cells for specified column (including wrappers) by column index
             *
             * @param column Column desired data cells belongs to
             * @returns HTML NodeList containing results
             */
            DOMLocator.prototype.getColumnCellsElementsByColumnIndex = function (columnIndex) {
                return this._bodyElement.querySelectorAll(this._rootIdPrefix + " [data-track$=\"-c" + columnIndex + "\"]");
            };
            /**
             * Retrieves data cells for whole row (including wrapper)
             *
             * @param row Row with data cells
             * @returns NodeList containing results
             */
            DOMLocator.prototype.getRowCellsElements = function (row) {
                return this.getRowCellsElementsByIndex(row.Index);
            };
            /**
             * Retrieves data cells for whole row (including wrapper)
             *
             * @param row Row with data cells
             * @returns NodeList containing results
             */
            DOMLocator.prototype.getRowCellsElementsByIndex = function (rowDisplayingIndex) {
                return this._bodyElement.querySelectorAll(this._rootIdPrefix + " [data-track^=\"c-r" + rowDisplayingIndex + "-\"]");
            };
            /**
             * Retrieves HTML element for column header (including wrapper)
             *
             * @param header Column header
             * @returns HTML element
             */
            DOMLocator.prototype.getHeaderElement = function (header) {
                var track = PowerTables.TrackHelper.getHeaderTrack(header);
                return this._rootElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves HTML element for plugin (including wrapper)
             *
             * @param plugin Plugin
             * @returns HTML element
             */
            DOMLocator.prototype.getPluginElement = function (plugin) {
                var track = PowerTables.TrackHelper.getPluginTrack(plugin);
                return this._rootElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
             * Determines if supplied element is table row
             *
             * @param e Testing element
             * @returns {boolean} True when supplied element is row, false otherwise
             */
            DOMLocator.prototype.isRow = function (e) {
                if (!e)
                    return false;
                if (!e.getAttribute)
                    return false;
                var trk = e.getAttribute('data-track');
                return (trk.charAt(0) === 'r') && (trk.charAt(1) === '-');
            };
            /**
             * Determines if supplied element is table cell
             *
             * @param e Testing element
             * @returns {boolean} True when supplied element is cell, false otherwise
             */
            DOMLocator.prototype.isCell = function (e) {
                if (!e)
                    return false;
                if (!e.getAttribute)
                    return false;
                var trk = e.getAttribute('data-track');
                return (trk.charAt(0) === 'c')
                    && (trk.charAt(1) === '-')
                    && (trk.charAt(2) === 'r');
            };
            return DOMLocator;
        })();
        Rendering.DOMLocator = DOMLocator;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Enity responsible for displaying table
         */
        var Renderer = (function () {
            function Renderer(rootId, prefix, isColumnDateTimeFunc, instances, events) {
                this._templatesCache = {};
                this._isColumnDateTimeFunc = isColumnDateTimeFunc;
                this._instances = instances;
                this._stack = new Rendering.RenderingStack();
                this.RootElement = document.getElementById(rootId);
                this._rootId = rootId;
                this._events = events;
                this.HandlebarsInstance = Handlebars.create();
                this._layoutRenderer = new Rendering.LayoutRenderer(this, this._stack, this._instances);
                this._contentRenderer = new Rendering.ContentRenderer(this, this._stack, this._instances);
                this.HandlebarsInstance.registerHelper("ifq", this.ifqHelper);
                this.HandlebarsInstance.registerHelper("ifloc", this.iflocHelper.bind(this));
                this.HandlebarsInstance.registerHelper('Content', this.contentHelper.bind(this));
                this.HandlebarsInstance.registerHelper('Track', this.trackHelper.bind(this));
                this.HandlebarsInstance.registerHelper('Datepicker', this.datepickerHelper.bind(this));
                this.cacheTemplates(prefix);
            }
            //#region Templates caching
            Renderer.prototype.cacheTemplates = function (templatesPrefix) {
                var selector = "script[type=\"text/x-handlebars-template\"][id^=\"" + templatesPrefix + "-\"]";
                var templates = document.querySelectorAll(selector);
                for (var i = 0; i < templates.length; i++) {
                    var item = templates.item(i);
                    var key = item.id.substring(templatesPrefix.length + 1);
                    this._templatesCache[key] = this.HandlebarsInstance.compile(item.innerHTML);
                }
            };
            /**
             * Retrieves cached template handlebars function
             * @param Template Id
             * @returns Handlebars function
             */
            Renderer.prototype.getCachedTemplate = function (templateId) {
                if (!this._templatesCache.hasOwnProperty(templateId))
                    throw new Error("Cannot find template " + templateId);
                return this._templatesCache[templateId];
            };
            //#endregion
            //#region Public methods
            /**
             * Perform table layout inside specified root element
             */
            Renderer.prototype.layout = function () {
                this._events.BeforeLayoutDrawn.invoke(this, null);
                var rendered = this.getCachedTemplate('layout')(null);
                this.RootElement.innerHTML = rendered;
                var bodyMarker = this.RootElement.querySelector('[data-track="tableBodyHere"]');
                if (!bodyMarker)
                    throw new Error('{{Body}} placeholder is missing in table layout template');
                this.BodyElement = bodyMarker.parentElement;
                this.BodyElement.removeChild(bodyMarker);
                this._layoutRenderer.bindEventsQueue(this.RootElement);
                this.Locator = new Rendering.DOMLocator(this.BodyElement, this.RootElement, this._rootId);
                this._events.AfterLayoutDrawn.invoke(this, null);
            };
            /**
             * Clear dynamically loaded table content and replace it with new one
             *
             * @param rows Set of table rows
             */
            Renderer.prototype.body = function (rows) {
                this.clearBody();
                this.BodyElement.innerHTML = this._contentRenderer.renderBody(rows);
            };
            /**
             * Redraws specified plugin refreshing all its graphical state
             *
             * @param plugin Plugin to redraw
             * @returns {}
             */
            Renderer.prototype.redrawPlugin = function (plugin) {
                this._stack.clear();
                var oldPluginElement = this.Locator.getPluginElement(plugin);
                var parent = oldPluginElement.parentElement;
                var parser = new PowerTables.Rendering.Html2Dom.HtmlParser();
                var newPluginElement = parser.html2Dom(this._layoutRenderer.renderPlugin(plugin));
                parent.replaceChild(newPluginElement, oldPluginElement);
                this._layoutRenderer.bindEventsQueue(newPluginElement);
            };
            /**
             * Redraws specified row refreshing all its graphical state
             *
             * @param row
             * @returns {}
             */
            Renderer.prototype.redrawRow = function (row) {
                this._stack.clear();
                var wrapper = this.getCachedTemplate('rowWrapper');
                var html;
                if (row.renderElement) {
                    html = row.renderElement(this);
                }
                else {
                    html = wrapper(row);
                }
                var oldElement = this.Locator.getRowElement(row);
                this.replaceElement(oldElement, html);
            };
            /**
             * Redraws specified row refreshing all its graphical state
             *
             * @param row
             * @returns {}
             */
            Renderer.prototype.appendRow = function (row, afterRowAtIndex) {
                this._stack.clear();
                var wrapper = this.getCachedTemplate('rowWrapper');
                var html;
                if (row.renderElement) {
                    html = row.renderElement(this);
                }
                else {
                    html = wrapper(row);
                }
                var referenceNode = this.Locator.getRowElementByIndex(afterRowAtIndex);
                var newRowElement = this.createElement(html);
                referenceNode.parentNode.insertBefore(newRowElement, referenceNode.nextSibling);
            };
            /**
             * Removes referenced row by its index
             *
             * @param rowDisplayIndex
             * @returns {}
             */
            Renderer.prototype.removeRowByIndex = function (rowDisplayIndex) {
                var referenceNode = this.Locator.getRowElementByIndex(rowDisplayIndex);
                referenceNode.parentElement.removeChild(referenceNode);
            };
            /**
             * Redraws header for specified column
             *
             * @param column Column which header is to be redrawn
             */
            Renderer.prototype.redrawHeader = function (column) {
                this._stack.clear();
                var html = this._layoutRenderer.renderHeader(column);
                var oldHeaderElement = this.Locator.getHeaderElement(column.Header);
                var newElement = this.replaceElement(oldHeaderElement, html);
                this._layoutRenderer.bindEventsQueue(newElement.parentElement);
            };
            Renderer.prototype.createElement = function (html) {
                var parser = new PowerTables.Rendering.Html2Dom.HtmlParser();
                return parser.html2Dom(html);
            };
            Renderer.prototype.replaceElement = function (element, html) {
                var node = this.createElement(html);
                element.parentElement.replaceChild(node, element);
                return node;
            };
            /**
             * Removes all dynamically loaded content in table
             *
             * @returns {}
             */
            Renderer.prototype.clearBody = function () {
                this.BodyElement.innerHTML = '';
            };
            //#endregion
            //#region Helpers
            Renderer.prototype.contentHelper = function (columnName) {
                if (this._stack.Current.Object.renderContent) {
                    return this._stack.Current.Object.renderContent(this);
                }
                else {
                    switch (this._stack.Current.Type) {
                        case Rendering.RenderingContextType.Header:
                        case Rendering.RenderingContextType.Plugin:
                            return this._layoutRenderer.renderContent(columnName);
                        case Rendering.RenderingContextType.Row:
                        case Rendering.RenderingContextType.Cell:
                            return this._contentRenderer.renderContent(columnName);
                        default:
                            throw new Error("Unknown rendering context type");
                    }
                }
            };
            Renderer.prototype.trackHelper = function () {
                var trk = this._stack.Current.CurrentTrack;
                if (trk.length === 0)
                    return '';
                return "data-track=\"" + trk + "\"";
            };
            Renderer.prototype.datepickerHelper = function () {
                if (this._stack.Current.Type === Rendering.RenderingContextType.Plugin) {
                    if (this._isColumnDateTimeFunc(this._stack.Current.ColumnName)) {
                        return 'data-dp="true"';
                    }
                    else {
                        return '';
                    }
                }
                else {
                    return '';
                }
            };
            Renderer.prototype.ifqHelper = function (a, b, opts) {
                if (a == b)
                    return opts.fn(this);
                else
                    return opts.inverse(this);
            };
            Renderer.prototype.iflocHelper = function (location, opts) {
                if (this._stack.Current.Type === Rendering.RenderingContextType.Plugin) {
                    var loc = this._stack.Current.Object.PluginLocation;
                    if (loc.length < location.length)
                        return opts.inverse(this);
                    if (loc.length === location.length && loc === location)
                        return opts.fn(this);
                    if (loc.substring(0, location.length) === location)
                        return opts.fn(this);
                }
                return opts.inverse(this);
            };
            return Renderer;
        })();
        Rendering.Renderer = Renderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
    * Helper class for producing track ids
    */
    var TrackHelper = (function () {
        function TrackHelper() {
        }
        /**
         * Returns string track ID for cell
         */
        TrackHelper.getCellTrack = function (cell) {
            var colIdx = cell.Column.MasterTable.InstanceManager.getUiColumnNames().indexOf(cell.Column.RawName);
            var rowIdx = cell.Row.Index;
            return TrackHelper.getCellTrackByIndexes(rowIdx, colIdx);
        };
        /**
         * Returns string track ID for cell
         */
        TrackHelper.getCellTrackByIndexes = function (rowIndex, columnIndex) {
            return "c-r" + rowIndex + "-c" + columnIndex;
        };
        /**
         * Returns string track ID for plugin
         */
        TrackHelper.getPluginTrack = function (plugin) {
            return "p-" + plugin.PluginLocation;
        };
        /**
         * Returns string track ID for plugin
         */
        TrackHelper.getPluginTrackByLocation = function (pluginLocation) {
            return "p-" + pluginLocation;
        };
        /**
         * Returns string track ID for header
         */
        TrackHelper.getHeaderTrack = function (header) {
            return "h-" + header.Column.RawName;
        };
        /**
         * Returns string track ID for header
         */
        TrackHelper.getHeaderTrackByColumnName = function (columnName) {
            return "h-" + columnName;
        };
        /**
         * Returns string track ID for row
         */
        TrackHelper.getRowTrack = function (row) {
            return this.getRowTrackByIndex(row.Index);
        };
        /**
         * Returns string track ID for row
         */
        TrackHelper.getRowTrackByIndex = function (index) {
            return "r-" + index;
        };
        /**
         * Parses cell track to retrieve column and row index
         *
         * @param e HTML element containing cell with wrapper
         * @returns {ICellLocation} Cell location
         */
        TrackHelper.getCellLocation = function (e) {
            if (!e)
                return null;
            if (!e.getAttribute)
                return null;
            var trk = e.getAttribute('data-track').substring(2).split('-c');
            return {
                RowIndex: parseInt(trk[0]),
                ColumnIndex: parseInt(trk[1])
            };
        };
        /**
         * Parses row track to retrieve row index
         *
         * @param e HTML element containing row with wrapper
         * @returns {number} Row index
         */
        TrackHelper.getRowIndex = function (e) {
            if (!e)
                return null;
            if (!e.getAttribute)
                return null;
            var trk = e.getAttribute('data-track').substring(1);
            return parseInt(trk);
        };
        return TrackHelper;
    })();
    PowerTables.TrackHelper = TrackHelper;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var PowerTable = (function () {
        function PowerTable(configuration) {
            this._configuration = configuration;
            this.bindReady();
        }
        PowerTable.prototype.bindReady = function () {
            var _self = this;
            if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", function () {
                    document.removeEventListener("DOMContentLoaded", arguments.callee, false);
                    _self.initialize();
                }, false);
            }
            else if (document.attachEvent) {
                document.attachEvent("onreadystatechange", function () {
                    if (document.readyState === "complete") {
                        document.detachEvent("onreadystatechange", arguments.callee);
                        _self.initialize();
                    }
                });
                if (document.documentElement.doScroll && window == window.top)
                    (function () {
                        if (_self._isReady)
                            return;
                        try {
                            document.documentElement.doScroll("left");
                        }
                        catch (error) {
                            setTimeout(arguments.callee, 0);
                            return;
                        }
                        _self.initialize();
                    })();
            }
            window.addEventListener('load', function (e) {
                if (_self._isReady)
                    return;
                _self.initialize();
            });
        };
        PowerTable.prototype.initialize = function () {
            this._isReady = true;
            this.Events = new PowerTables.EventsManager(this);
            this.InstanceManager = new PowerTables.InstanceManager(this._configuration, this, this.Events);
            var isDt = this.InstanceManager.isDateTime.bind(this.InstanceManager);
            this.DataHolder = new PowerTables.DataHolder(this.InstanceManager.getColumnNames(), isDt, this.Events, this.InstanceManager);
            this.Loader = new PowerTables.Loader(this._configuration.StaticData, this._configuration.OperationalAjaxUrl, this.Events, this.DataHolder);
            this.Renderer = new PowerTables.Rendering.Renderer(this._configuration.TableRootId, this._configuration.Prefix, isDt, this.InstanceManager, this.Events);
            this.Controller = new PowerTables.Controller(this);
            this.InstanceManager.initPlugins();
            this.Renderer.layout();
            if (this._configuration.LoadImmediately) {
                this.Controller.reload();
            }
        };
        /**
         * Reloads table content.
         * This method is left for backward compatibility
         *
         * @returns {}
         */
        PowerTable.prototype.reload = function () {
            this.Controller.reload();
        };
        return PowerTable;
    })();
    PowerTables.PowerTable = PowerTable;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        /**
         * Base class for plugins.
         * It contains necessary infrastructure for convinence of plugins creation
         */
        var PluginBase = (function () {
            function PluginBase() {
            }
            PluginBase.prototype.init = function (masterTable) {
                this.MasterTable = masterTable;
                this.subscribe(masterTable.Events);
                this.registerAdditionalHelpers(masterTable.Renderer.HandlebarsInstance);
                this.Configuration = this.RawConfig.Configuration;
            };
            /**
             * Events subscription method.
             * In derived class here should be subscription to various events
             *
             * @param e Events manager
             */
            PluginBase.prototype.subscribe = function (e) { };
            /**
             * In this method you can register any additional Handlebars.js helpers in case of your
             * templates needs ones
             *
             * @param hb Handlebars instance
             * @returns {}
             */
            PluginBase.prototype.registerAdditionalHelpers = function (hb) { };
            return PluginBase;
        })();
        Plugins.PluginBase = PluginBase;
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        /**
         * Base class for creating filters
         */
        var FilterBase = (function (_super) {
            __extends(FilterBase, _super);
            function FilterBase() {
                _super.apply(this, arguments);
            }
            FilterBase.prototype.modifyQuery = function (query, scope) { };
            FilterBase.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                this.MasterTable.Loader.registerQueryPartProvider(this);
            };
            /**
             * Call this method inside init and override filterPredicate method to make this filter
             * participate in client-side filtering
             */
            FilterBase.prototype.itIsClientFilter = function () {
                this.MasterTable.DataHolder.registerClientFilter(this);
            };
            /**
             * Call this method inside init and override selectData method to make this filter
             * participate in client-side data truncation
             */
            FilterBase.prototype.itIsClientDataTruncator = function () {
                this.MasterTable.DataHolder.Selector = this;
            };
            FilterBase.prototype.filterPredicate = function (rowObject, query) { throw new Error("Please override this method"); };
            FilterBase.prototype.selectData = function (sourceDataSet, query) { throw new Error("Please override this method"); };
            return FilterBase;
        })(Plugins.PluginBase);
        Plugins.FilterBase = FilterBase;
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var LoadingPlugin = (function (_super) {
            __extends(LoadingPlugin, _super);
            function LoadingPlugin() {
                _super.apply(this, arguments);
            }
            LoadingPlugin.prototype.subscribe = function (e) {
                var _this = this;
                e.BeforeLoading.subscribe(function () { return _this.showLoadingIndicator(); }, "loading");
                e.AfterLoading.subscribe(function () { return _this.hideLoadingIndicator(); }, "loading");
                e.AfterLayoutDrawn.subscribe(function () {
                    var me = _this.MasterTable.Renderer.Locator.getPluginElement(_this);
                    _this._blinkElement = me.querySelector('[data-blink]');
                    _this.hideLoadingIndicator();
                }, 'loading');
            };
            LoadingPlugin.prototype.showLoadingIndicator = function () {
                this._blinkElement.style.visibility = 'visible';
            };
            LoadingPlugin.prototype.hideLoadingIndicator = function () {
                this._blinkElement.style.visibility = 'collapse';
            };
            LoadingPlugin.prototype.renderContent = function (templatesProvider) {
                return templatesProvider.getCachedTemplate('loading')(null);
            };
            LoadingPlugin.Id = 'Loading';
            return LoadingPlugin;
        })(Plugins.PluginBase);
        Plugins.LoadingPlugin = LoadingPlugin;
        PowerTables.ComponentsContainer.registerComponent('Loading', LoadingPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Ordering;
        (function (Ordering) {
            var OrderingPlugin = (function (_super) {
                __extends(OrderingPlugin, _super);
                function OrderingPlugin() {
                    _super.apply(this, arguments);
                    this._clientOrderings = {};
                    this._serverOrderings = {};
                }
                OrderingPlugin.prototype.subscribe = function (e) {
                    var _this = this;
                    e.ColumnsCreation.subscribe(function (v) {
                        _this.overrideHeadersTemplates(v.EventArgs);
                    }, 'ordering');
                };
                OrderingPlugin.prototype.overrideHeadersTemplates = function (columns) {
                    var _this = this;
                    var handler = function (e) {
                        _this.switchOrderingForColumn(e.Receiver.Column.RawName);
                    };
                    for (var ck in columns) {
                        if (columns.hasOwnProperty(ck)) {
                            var ordering = this.Configuration.DefaultOrderingsForColumns[ck];
                            if (!ordering)
                                continue;
                            var newHeader = {
                                Column: columns[ck],
                                switchOrdering: handler,
                                IsClientOrdering: this.isClient(ck)
                            };
                            this.updateOrdering(ck, ordering);
                            (function (hdr) {
                                hdr.renderElement = function (tp) {
                                    return tp.getCachedTemplate('ordering')(hdr);
                                };
                            })(newHeader);
                            this.specifyOrdering(newHeader, ordering);
                            columns[ck].Header = newHeader;
                        }
                    }
                };
                OrderingPlugin.prototype.updateOrdering = function (columnName, ordering) {
                    if (this.isClient(columnName))
                        this._clientOrderings[columnName] = ordering;
                    else
                        this._serverOrderings[columnName] = ordering;
                };
                OrderingPlugin.prototype.specifyOrdering = function (object, ordering) {
                    object.IsNeutral = object.IsDescending = object.IsAscending = false;
                    switch (ordering) {
                        case PowerTables.Ordering.Neutral:
                            object.IsNeutral = true;
                            break;
                        case PowerTables.Ordering.Descending:
                            object.IsDescending = true;
                            break;
                        case PowerTables.Ordering.Ascending:
                            object.IsAscending = true;
                            break;
                    }
                };
                OrderingPlugin.prototype.isClient = function (columnName) {
                    return this.Configuration.ClientSortableColumns.hasOwnProperty(columnName);
                };
                OrderingPlugin.prototype.switchOrderingForColumn = function (columnName) {
                    if (!this.Configuration.DefaultOrderingsForColumns[columnName])
                        throw new Error("Ordering is not configured for column " + columnName);
                    var coolHeader = this.MasterTable.InstanceManager.Columns[columnName].Header;
                    var orderingsCollection = this.isClient(columnName) ? this._clientOrderings : this._serverOrderings;
                    var next = this.nextOrdering(orderingsCollection[columnName]);
                    this.specifyOrdering(coolHeader, next);
                    this.updateOrdering(columnName, next);
                    this.MasterTable.Renderer.redrawHeader(coolHeader.Column);
                    this.MasterTable.Controller.reload();
                };
                OrderingPlugin.prototype.nextOrdering = function (currentOrdering) {
                    switch (currentOrdering) {
                        case PowerTables.Ordering.Neutral: return PowerTables.Ordering.Ascending;
                        case PowerTables.Ordering.Descending: return PowerTables.Ordering.Neutral;
                        case PowerTables.Ordering.Ascending: return PowerTables.Ordering.Descending;
                    }
                };
                OrderingPlugin.prototype.makeDefaultOrderingFunction = function (fieldName) {
                    var self = this;
                    return (function (field) {
                        return function (a, b) {
                            var x = a[field], y = b[field];
                            if (x === y)
                                return 0;
                            if (x == null || x == undefined)
                                return -1;
                            if (y == null || y == undefined)
                                return 1;
                            if (typeof x === "string") {
                                return x.localeCompare(y);
                            }
                            return (x > y) ? 1 : -1;
                        };
                    })(fieldName);
                };
                OrderingPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    var hasClientOrderings = false;
                    var fn;
                    for (var cls in this.Configuration.ClientSortableColumns) {
                        if (this.Configuration.ClientSortableColumns.hasOwnProperty(cls)) {
                            hasClientOrderings = true;
                            fn = this.Configuration.ClientSortableColumns[cls];
                            if (!fn) {
                                fn = this.makeDefaultOrderingFunction(cls);
                                this.Configuration.ClientSortableColumns[cls] = fn;
                            }
                            this.MasterTable.DataHolder.registerClientOrdering(cls, fn);
                        }
                    }
                    if (hasClientOrderings) {
                        // if we have at least 1 client ordering then we have to reorder whole 
                        // received data on client
                        // to avoid client ordering priority
                        for (var serverColumn in this.Configuration.DefaultOrderingsForColumns) {
                            if (this.isClient(serverColumn))
                                continue;
                            fn = this.makeDefaultOrderingFunction(serverColumn);
                            this.MasterTable.DataHolder.registerClientOrdering(serverColumn, fn);
                        }
                    }
                };
                OrderingPlugin.prototype.mixinOrderings = function (orderingsCollection, query) {
                    for (var clo in orderingsCollection) {
                        if (orderingsCollection.hasOwnProperty(clo)) {
                            query.Orderings[clo] = orderingsCollection[clo];
                        }
                    }
                };
                OrderingPlugin.prototype.modifyQuery = function (query, scope) {
                    this.mixinOrderings(this._serverOrderings, query);
                    if (scope === PowerTables.QueryScope.Client || scope === PowerTables.QueryScope.Transboundary) {
                        this.mixinOrderings(this._clientOrderings, query);
                    }
                };
                return OrderingPlugin;
            })(Plugins.FilterBase);
            Ordering.OrderingPlugin = OrderingPlugin;
            PowerTables.ComponentsContainer.registerComponent('Ordering', OrderingPlugin);
        })(Ordering = Plugins.Ordering || (Plugins.Ordering = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
//# sourceMappingURL=powertables.js.map