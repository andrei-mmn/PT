//     This code was generated by a Reinforced.Typings tool. 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
/// <reference path="../../PowerTables.Mvc/Scripts/typings/jquery/jquery.d.ts"/>
var PowerTables;
(function (PowerTables) {
    /** Ordering */
    (function (Ordering) {
        /** Ascending */
        Ordering[Ordering["Ascending"] = 0] = "Ascending";
        /** Descending */
        Ordering[Ordering["Descending"] = 1] = "Descending";
        /** Ordering is not applied */
        Ordering[Ordering["Neutral"] = 2] = "Neutral";
    })(PowerTables.Ordering || (PowerTables.Ordering = {}));
    var Ordering = PowerTables.Ordering;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Checkboxify;
        (function (Checkboxify) {
            (function (SelectAllLocation) {
                SelectAllLocation[SelectAllLocation["FiltersHeader"] = 0] = "FiltersHeader";
                SelectAllLocation[SelectAllLocation["ColumnHeader"] = 1] = "ColumnHeader";
            })(Checkboxify.SelectAllLocation || (Checkboxify.SelectAllLocation = {}));
            var SelectAllLocation = Checkboxify.SelectAllLocation;
        })(Checkboxify = Plugins.Checkboxify || (Plugins.Checkboxify = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var ComponentsContainer = (function () {
        function ComponentsContainer() {
        }
        ComponentsContainer.registerComponent = function (key, ctor) {
            this._components[key] = ctor;
        };
        ComponentsContainer.resolveComponent = function (key, args) {
            if (!args)
                return new this._components[key];
            else {
                var ctor = this._components[key];
                var boundCtor = Function.prototype.bind.apply(ctor, [null].concat(args));
                return new boundCtor();
            }
        };
        ComponentsContainer._components = {};
        return ComponentsContainer;
    })();
    PowerTables.ComponentsContainer = ComponentsContainer;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var RenderableComponent = (function () {
        function RenderableComponent(templateId) {
            this.Element = null;
            if (!templateId) {
                this._templateId = null;
            }
            else {
                this._templateId = templateId;
            }
        }
        RenderableComponent.prototype.setTemplateId = function (templateId) {
            if (!templateId) {
                this._templateId = null;
            }
            this._templateDelegate = null;
        };
        RenderableComponent.prototype.resetTemplateDelegate = function () {
            this._templateDelegate = null;
        };
        RenderableComponent.prototype.renderTo = function (parentElement, context) {
            var html = $(this.render(context));
            this.Element = html;
            var e = parentElement.append(html);
            this.subscribeEvents(e);
            return html;
        };
        RenderableComponent.prototype.getTemplateContent = function () {
            return $('#' + this._templateId).html();
        };
        RenderableComponent.prototype.render = function (context) {
            if (!this._templateDelegate) {
                this._templateDelegate = Handlebars.compile(this.getTemplateContent());
            }
            var html = context ? this._templateDelegate(context) : this._templateDelegate(this);
            if (this.DontCacheDelegate)
                this.resetTemplateDelegate();
            return html;
        };
        RenderableComponent.prototype.subscribeEvents = function (parentElement) {
        };
        return RenderableComponent;
    })();
    PowerTables.RenderableComponent = RenderableComponent;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var DataHolder = (function () {
        function DataHolder(table) {
            this._table = table;
            this.Rows = [];
        }
        DataHolder.prototype.storeResponse = function (response, data) {
            this.CurrentPageIndex = response.PageIndex;
            this.CurrentTotalResultsCount = response.ResultsCount;
            this.CurrentData = data;
            this.Rows = [];
        };
        DataHolder.prototype.storeRow = function (row) {
            this.Rows.push(row);
        };
        return DataHolder;
    })();
    PowerTables.DataHolder = DataHolder;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var TableEvent = (function () {
        function TableEvent() {
            this._handlers = {};
        }
        TableEvent.prototype.invoke = function (thisArg, args) {
            var hndlrs = this._handlers;
            var i = 0;
            for (var k in hndlrs) {
                if (hndlrs.hasOwnProperty(k)) {
                    var kHandlers = hndlrs[k];
                    for (i = 0; i < kHandlers.length; i++) {
                        kHandlers[i].apply(thisArg, args);
                    }
                    i = 0;
                }
            }
        };
        TableEvent.prototype.subscribe = function (handler, key) {
            if (!this._handlers[key]) {
                this._handlers[key] = [];
            }
            this._handlers[key].push(handler);
        };
        TableEvent.prototype.unsubscribe = function (key) {
            this._handlers[key] = null;
            delete this._handlers[key];
        };
        return TableEvent;
    })();
    PowerTables.TableEvent = TableEvent;
    var EventsManager = (function () {
        function EventsManager() {
            this.AfterInit = new TableEvent();
            this.BeforeColumnsRender = new TableEvent();
            this.AfterColumnsRender = new TableEvent();
            this.BeforeFiltersRender = new TableEvent();
            this.BeforeFilterRender = new TableEvent();
            this.AfterFilterRender = new TableEvent();
            this.AfterFiltersRender = new TableEvent();
            this.BeforeColumnHeaderRender = new TableEvent();
            this.AfterColumnHeaderRender = new TableEvent();
            this.BeforeLoading = new TableEvent();
            this.DataReceived = new TableEvent();
            this.AfterLoading = new TableEvent();
            this.BeforeResponseDrawing = new TableEvent();
            this.ResponseDrawing = new TableEvent();
            this.ColumnsOrdering = new TableEvent();
            this.BeforeFilterGathering = new TableEvent();
            this.AfterFilterGathering = new TableEvent();
            this.BeforeRowDraw = new TableEvent();
            this.AfterRowDraw = new TableEvent();
            this.BeforeCellDraw = new TableEvent();
            this.AfterCellDraw = new TableEvent();
            this.BeforeLayoutDraw = new TableEvent();
            this.AfterLayoutDraw = new TableEvent();
            this.SelectionChanged = new TableEvent();
        }
        return EventsManager;
    })();
    PowerTables.EventsManager = EventsManager;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Renderer = (function () {
        function Renderer(rootId) {
            this._rootId = rootId;
            this._noData = Handlebars.compile($('#pt-noresults').html());
            this.ColumnsRenderFunctions = {};
        }
        Renderer.prototype.hideFilters = function () {
            this.Filters.hide();
        };
        Renderer.prototype.showFilters = function () {
            this.Filters.show();
        };
        Renderer.prototype.toggleFilters = function () {
            this.Filters.toggle();
        };
        Renderer.prototype.renderColumnHeader = function (column) {
            var header = $(this._columnHeader(column));
            this.Headers.append(header);
            return header;
        };
        Renderer.prototype.renderRawColumnHeader = function (rawContent) {
            var header = $(this._rawColumnHeader(rawContent));
            this.Headers.append(header);
            return header;
        };
        Renderer.prototype.renderEmptyFilter = function () {
            var header = $(this._emptyFilter(null));
            this.Filters.append(header);
            return header;
        };
        Renderer.prototype.showError = function (errorText) {
            this.clearTableResults();
            if (errorText) {
                errorText = errorText.replace(/</, '&lt;').replace(/>/, '&gt;').replace(/[\r\n]+/g, '<br/>');
            }
            var columns = this.Headers.find('th:visible').length;
            this.Body.append(this._error({ Columns: columns, ErrorText: errorText }));
        };
        Renderer.prototype.showLoading = function () {
            this.clearTableResults();
            var columns = this.Headers.find('th:visible').length;
            this.Body.append(this._loading({ Columns: columns }));
        };
        Renderer.prototype.renderRawCell = function (rawContent) {
            return $(this._rawCell(rawContent));
        };
        Renderer.prototype.renderRow = function (index) {
            return $(this._row(index));
        };
        Renderer.prototype.layout = function () {
            this.TablePlaceholder = $('#' + this._rootId);
            this._columnHeader = Handlebars.compile($('#pt-columnheader').html());
            this._rawColumnHeader = Handlebars.compile($('#pt-rawcolumnheader').html());
            this._emptyFilter = Handlebars.compile($('#pt-emptyfilter').html());
            this._error = Handlebars.compile($('#pt-error').html());
            this._loading = Handlebars.compile($('#pt-loading').html());
            this._rawCell = Handlebars.compile($('#pt-rawcell').html());
            this._pluginPlaceholder = Handlebars.compile($('#pt-pluginPlaceholder').html());
            this._row = Handlebars.compile($('#pt-row').html());
            var layouttemplate = Handlebars.compile($('#pt-layout').html());
            this.TablePlaceholder.html(layouttemplate(null));
            this.LayoutRoot = this.TablePlaceholder.first();
            this.PluginsLT = this.LayoutRoot.find('[data-placeholder=\'ltPlugins\']');
            this.PluginsLT_Toolbar = this.LayoutRoot.find('[data-placeholder=\'ltPlugins_toolbar\']');
            this.PluginsLB = this.LayoutRoot.find('[data-placeholder=\'lbPlugins\']');
            this.PluginsLB_Toolbar = this.LayoutRoot.find('[data-placeholder=\'lbPlugins_toolbar\']');
            this.PluginsRT = this.LayoutRoot.find('[data-placeholder=\'rtPlugins\']');
            this.PluginsRT_Toolbar = this.LayoutRoot.find('[data-placeholder=\'rtPlugins_toolbar\']');
            this.PluginsRB = this.LayoutRoot.find('[data-placeholder=\'rbPlugins\']');
            this.PluginsRB_Toolbar = this.LayoutRoot.find('[data-placeholder=\'rbPlugins_toolbar\']');
            this.Headers = this.LayoutRoot.find('[data-placeholder=\'headers\']');
            this.Table = this.LayoutRoot.find('[data-placeholder=\'tableItself\']');
            this.Filters = this.LayoutRoot.find('[data-placeholder=\'filters\']');
            this.Body = this.LayoutRoot.find('[data-placeholder=\'body\']');
        };
        Renderer.prototype.getPluginsPlaceholder = function (placeholder) {
            switch (placeholder) {
                case 'lt':
                    return this.PluginsLT;
                case 'lb':
                    return this.PluginsLB;
                case 'rt':
                    return this.PluginsRT;
                case 'rb':
                    return this.PluginsRB;
            }
            return null;
        };
        Renderer.prototype.getToolbarPlaceholder = function (placeholder) {
            switch (placeholder) {
                case 'lt':
                    return this.PluginsLT_Toolbar;
                case 'lb':
                    return this.PluginsLB_Toolbar;
                case 'rt':
                    return this.PluginsRT_Toolbar;
                case 'rb':
                    return this.PluginsRB_Toolbar;
            }
            return null;
        };
        Renderer.prototype.clearTableResults = function () {
            this.Body.empty();
        };
        Renderer.prototype.renderNoData = function () {
            var columns = this.Headers.find('th:visible').length;
            this.Body.append(this._noData({ Columns: columns }));
        };
        Renderer.prototype.appendRow = function (rowElement) {
            this.Body.append(rowElement);
        };
        Renderer.prototype.renderPlugin = function (plugin, configuration) {
            if (!plugin.IsRenderable)
                return;
            var holder = null;
            if (plugin.IsToolbarPlugin) {
                holder = this.getToolbarPlaceholder(configuration.Placement);
            }
            else {
                holder = this.getPluginsPlaceholder(configuration.Placement);
            }
            if (!plugin.IsToolbarPlugin) {
                var p = {};
                p[configuration.Placement] = true;
                var place = $(this._pluginPlaceholder(p)).attr('data-plugin', plugin.PluginId);
                holder.append(place);
                plugin.renderTo(place);
            }
            else {
                plugin.renderTo(holder);
            }
        };
        Renderer.prototype.renderCell = function (cell) {
            return this.ColumnsRenderFunctions[cell.Column.RawName](cell);
        };
        Renderer.prototype.cacheCellsRenderFunctions = function (columns, defaultCellElement) {
            for (var i = 0; i < columns.length; i++) {
                var columnConfig = columns[i];
                if (columnConfig.CellRenderingValueFunction) {
                    this.ColumnsRenderFunctions[columnConfig.RawColumnName] =
                        function (x) {
                            var text = x.Column.Configuration.CellRenderingValueFunction(x.DataObject);
                            return $("<" + defaultCellElement + ">" + text + "</" + defaultCellElement + ">");
                        };
                    continue;
                }
                if (columnConfig.CellRenderingHtmlFunction) {
                    this.ColumnsRenderFunctions[columnConfig.RawColumnName] =
                        function (x) { return $(x.Column.Configuration.CellRenderingHtmlFunction(x.DataObject)); };
                    continue;
                }
                if (columnConfig.CellRenderingTemplateId) {
                    var compiled = Handlebars.compile($("#" + columnConfig.CellRenderingTemplateId).html());
                    this.ColumnsRenderFunctions[columnConfig.RawColumnName] =
                        (function (compl) { return function (x) { return $(compl(x.DataObject)); }; })(compiled);
                    continue;
                }
                this.ColumnsRenderFunctions[columnConfig.RawColumnName] =
                    function (x) { return $("<" + defaultCellElement + ">" + ((x.Data !== null && x.Data !== undefined) ? x.Data : '') + "</" + defaultCellElement + ">"); };
            }
            ;
        };
        return Renderer;
    })();
    PowerTables.Renderer = Renderer;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var PowerTable = (function () {
        function PowerTable(configuration) {
            var _this = this;
            this.Configuration = configuration;
            this._queryPartProviders = [];
            this.Columns = {};
            this.Renderer = new PowerTables.Renderer(this.Configuration.TableRootId);
            if (!configuration.DatePickerFunction) {
                this.Renderer.createDatepicker = function (a) { };
            }
            else {
                this.Renderer.createDatepicker = function (e) {
                    configuration.DatePickerFunction(e, configuration.ClientDateTimeFormat);
                };
            }
            this.Events = new PowerTables.EventsManager();
            this._data = new PowerTables.DataHolder(this);
            this.Renderer.layout();
            this.initPlugins();
            this.initColumns();
            this.initFilters();
            if (this.Configuration.LoadImmediately) {
                setTimeout(function () { return _this.reload(); }, 10);
            }
        }
        PowerTable.prototype.initColumns = function () {
            this.Renderer.cacheCellsRenderFunctions(this.Configuration.Columns, this.Configuration.DefaultCellElement);
            this.Events.BeforeColumnsRender.invoke(this, [this]);
            for (var i = 0; i < this.Configuration.Columns.length; i++) {
                var c = {
                    Configuration: this.Configuration.Columns[i],
                    Filter: null,
                    MasterTable: this,
                    RawName: this.Configuration.Columns[i].RawColumnName,
                    Elements: [],
                    HeaderElement: null,
                    Fake: false
                };
                this.Events.BeforeColumnHeaderRender.invoke(this, [c]);
                if (!c.Configuration.IsDataOnly)
                    c.HeaderElement = this.Renderer.renderColumnHeader(c);
                this.Columns[c.RawName] = c;
                this.Events.AfterColumnHeaderRender.invoke(this, [c]);
            }
            this.Events.AfterColumnsRender.invoke(this, [this]);
        };
        PowerTable.prototype.initFilters = function () {
            this.Events.BeforeFiltersRender.invoke(this, [this]);
            var columns = this.Columns;
            for (var ci in columns) {
                if (columns.hasOwnProperty(ci)) {
                    var column = columns[ci];
                    if (column.Configuration.IsDataOnly)
                        continue;
                    this.Events.BeforeFilterRender.invoke(this, [column]);
                    var config = column.Configuration.Filter;
                    if (!config) {
                        var empty = this.Renderer.renderEmptyFilter();
                        column.Filter = ({ Element: empty });
                        this.Events.AfterFilterRender.invoke(this, [column]);
                    }
                    else {
                        var fltr = PowerTables.ComponentsContainer.resolveComponent(config.FilterKey, [column]);
                        fltr.renderTo(this.Renderer.Filters);
                        column.Filter = fltr;
                        this.Events.AfterFilterRender.invoke(this, [column]);
                        this._queryPartProviders.push(fltr);
                    }
                }
            }
            this.Events.AfterFiltersRender.invoke(this, [this]);
        };
        PowerTable.prototype.initPlugins = function () {
            this._plugins = {};
            var pluginsConfiguration = this.Configuration.PluginsConfiguration;
            for (var pluginId in pluginsConfiguration) {
                if (pluginsConfiguration.hasOwnProperty(pluginId)) {
                    var conf = pluginsConfiguration[pluginId];
                    var plugin = PowerTables.ComponentsContainer.resolveComponent(conf.PluginId);
                    plugin.init(this, conf);
                    this.Renderer.renderPlugin(plugin, conf);
                    this._plugins[pluginId] = plugin;
                    if (plugin.IsQueryModifier) {
                        this._queryPartProviders.push(plugin);
                    }
                }
            }
        };
        PowerTable.prototype.getPlugin = function (pluginId, placement) {
            if (!placement)
                placement = 'lt';
            if (this._plugins[pluginId + '$' + placement])
                return (this._plugins[pluginId + '$' + placement]);
            else {
                for (var k in this._plugins) {
                    var kp = k.substring(0, pluginId.length);
                    if (kp === pluginId)
                        return this._plugins[k];
                }
            }
            return null;
        };
        PowerTable.prototype.reload = function () {
            var _self = this;
            this.requestServer('query', function (a) { return _self.drawResponse(a); });
        };
        PowerTable.prototype.getXmlHttp = function () {
            if (this._previousRequest) {
                this._previousRequest.abort();
                this._previousRequest = null;
            }
            var xmlhttp;
            try {
                xmlhttp = new ActiveXObject('Msxml2.XMLHTTP');
            }
            catch (e) {
                try {
                    xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
                }
                catch (E) {
                    xmlhttp = false;
                }
            }
            if (!xmlhttp && typeof XMLHttpRequest != 'undefined') {
                xmlhttp = new XMLHttpRequest();
            }
            this._previousRequest = xmlhttp;
            return xmlhttp;
        };
        PowerTable.prototype.requestServer = function (command, callback, queryModifier) {
            var _this = this;
            this.Events.BeforeLoading.invoke(this, [this]);
            var query = this.gatherQuery();
            if (queryModifier)
                queryModifier(query);
            var data = {
                Command: command,
                Query: query
            };
            var dataText = JSON.stringify(data);
            var req = this.getXmlHttp();
            req.open('POST', this.Configuration.OperationalAjaxUrl, 1);
            req.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            req.setRequestHeader('Content-type', 'application/json');
            var reqEvent = req.onload ? 'onload' : 'onreadystatechange'; // for IE
            req[reqEvent] = (function (e) {
                if (req.readyState != 4)
                    return false;
                if (req.status === 200) {
                    var ctype = req.getResponseHeader('content-type');
                    if (ctype)
                        ctype = ctype.toLowerCase();
                    if (ctype && ctype.indexOf('application/json') >= 0) {
                        var json = JSON.parse(req.responseText);
                        if (command === 'query') {
                            if (json['Success'] != undefined && !json.Success) {
                                _this.Renderer.showError(json.Message);
                            }
                            else {
                                _this.Events.DataReceived.invoke(_this, [json]);
                                callback(json);
                            }
                        }
                        else {
                            _this.Events.DataReceived.invoke(_this, [json]); //?
                            callback(json);
                        }
                    }
                    else {
                        if (ctype && ctype.indexOf('lattice/service') >= 0) {
                            if (req.responseText.indexOf('$Token=') === 0) {
                                var token = req.responseText.substr(7, req.responseText.length - 7);
                                _this.Events.AfterLoading.invoke(_this, [_this]);
                                callback({ $isDeferred: true, $url: _this.Configuration.OperationalAjaxUrl + '?q=' + token, $token: token });
                            }
                        }
                    }
                }
                else {
                    if (req.status === 0)
                        return false; // for IE
                    _this.Renderer.showError('Network error');
                }
                _this.Events.AfterLoading.invoke(_this, [_this]);
            });
            //req.onabort = (e => {
            //    this.Events.AfterLoading.invoke(this, [this]);
            //});
            //failTimeout = setTimeout(() => { req.abort(); this.Renderer.showError('Network error: network unreacheable'); }, 10000);
            req.send(dataText);
        };
        PowerTable.prototype.isDateTime = function (columnName) {
            var tpn = this.Columns[columnName].Configuration.ColumnType;
            return ((tpn === 'DateTime') || (tpn === 'DateTime?'));
        };
        /*
         * Parses response from server and turns it to objects array
         */
        PowerTable.prototype.parseResponse = function (response) {
            var data = [];
            var obj = {};
            var currentColIndex = 0;
            var currentCol = this.Configuration.RawColumnNames[currentColIndex];
            for (var i = 0; i < response.Data.length; i++) {
                if (this.isDateTime(currentCol)) {
                    if (response.Data[i]) {
                        obj[currentCol] = Date.parse(response.Data[i]);
                    }
                    else {
                        obj[currentCol] = null;
                    }
                }
                else {
                    obj[currentCol] = response.Data[i];
                }
                currentColIndex++;
                if (currentColIndex >= this.Configuration.RawColumnNames.length) {
                    currentColIndex = 0;
                    data.push(obj);
                    obj = {};
                }
                currentCol = this.Configuration.RawColumnNames[currentColIndex];
            }
            return data;
        };
        PowerTable.prototype.getColumnNames = function () {
            var columnsOrder = this.Configuration.RawColumnNames; // todo!
            var newOrder = [];
            this.Events.ColumnsOrdering.invoke(this, [this, newOrder]);
            if (newOrder.length > 0) {
                columnsOrder = newOrder;
            }
            return columnsOrder;
        };
        PowerTable.prototype.drawResponse = function (response) {
            this.Renderer.clearTableResults();
            var columns = this.Columns;
            for (var thisCol in columns) {
                if (columns.hasOwnProperty(thisCol)) {
                    columns[thisCol].Elements = [];
                }
            }
            var objects = this.parseResponse(response);
            this._data.storeResponse(response, objects);
            this.Events.BeforeResponseDrawing.invoke(this, [response]);
            if (objects.length === 0) {
                this.Renderer.renderNoData();
            }
            else {
                var columnsOrder = this.getColumnNames();
                for (var i = 0; i < objects.length; i++) {
                    var dataElement = objects[i];
                    var rowElement = this.Renderer.renderRow(i);
                    var row = {
                        MasterTable: this,
                        DataObject: objects[i],
                        Index: i,
                        Elements: [],
                        Element: rowElement,
                        Fake: false
                    };
                    this.Events.BeforeRowDraw.invoke(this, [row]);
                    this._data.storeRow(row);
                    for (var j = 0; j < columnsOrder.length; j++) {
                        var kk = columnsOrder[j];
                        var column = columns[kk];
                        if (column.Configuration.IsDataOnly)
                            continue;
                        var cell = {
                            Column: column,
                            Data: dataElement[column.RawName],
                            DataObject: dataElement,
                            Row: row,
                            Element: null,
                            Fake: false
                        };
                        this.Events.BeforeCellDraw.invoke(this, [cell]);
                        var element = this.Renderer.renderCell(cell);
                        element.data('pt-cell', cell);
                        cell.Element = element;
                        column.Elements.push(element);
                        row.Elements.push(element);
                        this.Events.AfterCellDraw.invoke(this, [cell]);
                        rowElement = rowElement.append(element);
                    }
                    this.Renderer.appendRow(rowElement);
                    this.Events.AfterRowDraw.invoke(this, [row]);
                }
            }
            this.Events.ResponseDrawing.invoke(this, [response]);
        };
        PowerTable.prototype.gatherQuery = function () {
            var a = {
                Paging: {
                    PageSize: 0,
                    PageIndex: 0
                },
                Orderings: {},
                Filterings: {},
                AdditionalData: {},
                StaticDataJson: this.Configuration.StaticData
            };
            this.Events.BeforeFilterGathering.invoke(this, [a]);
            for (var i = 0; i < this._queryPartProviders.length; i++) {
                this._queryPartProviders[i].modifyQuery(a);
            }
            this.Events.AfterFilterGathering.invoke(this, [a]);
            return a;
        };
        PowerTable.prototype.registerQueryPartProvider = function (provider) {
            this._queryPartProviders.push(provider);
        };
        return PowerTable;
    })();
    PowerTables.PowerTable = PowerTable;
})(PowerTables || (PowerTables = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var PowerTables;
(function (PowerTables) {
    var FilterBase = (function (_super) {
        __extends(FilterBase, _super);
        function FilterBase(templateId, column) {
            _super.call(this, templateId);
            this.Column = column;
            this.Table = column.MasterTable;
            this.Configuration = column.Configuration.Filter.FilterConfiguration;
            this.IsDateTime = this.Table.isDateTime(column.RawName);
        }
        FilterBase.prototype.reset = function () {
        };
        FilterBase.prototype.modifyQuery = function (query) {
            query.Filterings[this.Column.RawName] = this.getArgument();
        };
        FilterBase.prototype.getArgument = function () {
            return '';
        };
        return FilterBase;
    })(PowerTables.RenderableComponent);
    PowerTables.FilterBase = FilterBase;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var SelectFilter = (function (_super) {
        __extends(SelectFilter, _super);
        function SelectFilter(column) {
            _super.call(this, 'pt-selectfilter', column);
            this._filteringIsBeingExecuted = false;
            if (this.Configuration.AllowSelectNothing) {
                var nothingItem = { Value: '', Text: this.Configuration.NothingText || '-', Disabled: false, Selected: false };
                this.Configuration.Items = [nothingItem].concat(this.Configuration.Items);
            }
            var sv = this.Configuration.SelectedValue;
            if (sv !== undefined && sv !== null) {
                for (var i = 0; i < this.Configuration.Items.length; i++) {
                    if (this.Configuration.Items[i].Value !== sv) {
                        this.Configuration.Items[i].Selected = false;
                    }
                    else {
                        this.Configuration.Items[i].Selected = true;
                    }
                }
            }
        }
        SelectFilter.prototype.subscribeEvents = function (parentElement) {
            var _self = this;
            this._selectElement = parentElement.find("select[data-for='" + this.Column.RawName + "']");
            this._selectElement.change(function (e) {
                _self.handleValueChanged();
            });
        };
        SelectFilter.prototype.handleValueChanged = function () {
            this.Table.reload();
        };
        SelectFilter.prototype.getArgument = function () {
            if (this._selectElement) {
                if (!this.Configuration.IsMultiple) {
                    var v = this._selectElement.val();
                    return v;
                }
                else {
                    var elemValues = [];
                    this._selectElement.find('option:selected').each(function () {
                        elemValues.push($(this).val());
                    });
                    return elemValues.join('|');
                }
            }
            return '';
        };
        SelectFilter.prototype.reset = function () {
            if (this._selectElement) {
                this._selectElement.find('option:selected').removeAttr('selected');
            }
        };
        return SelectFilter;
    })(PowerTables.FilterBase);
    PowerTables.SelectFilter = SelectFilter;
    PowerTables.ComponentsContainer.registerComponent('SelectFilter', SelectFilter);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var ValueFilter = (function (_super) {
        __extends(ValueFilter, _super);
        function ValueFilter(column) {
            _super.call(this, 'pt-valuefilter', column);
            this._filteringIsBeingExecuted = false;
        }
        ValueFilter.prototype.subscribeEvents = function (parentElement) {
            var _self = this;
            this._inputElement = parentElement.find("input[data-for='" + this.Column.RawName + "']");
            if (this.Configuration.DefaultValue) {
                this._inputElement.val(this.Configuration.DefaultValue);
            }
            if (this.IsDateTime)
                this.Table.Renderer.createDatepicker(this._inputElement);
            this._inputElement.bind('keyup change', function (e) {
                _self.handleValueChanged();
            });
            this._previousValue = this._inputElement.val();
        };
        ValueFilter.prototype.handleValueChanged = function () {
            var _this = this;
            if (this._filteringIsBeingExecuted)
                return;
            if (this._inputElement.val() === this._previousValue) {
                return;
            }
            this._previousValue = this._inputElement.val();
            if (this.Configuration.InputDelay > 0) {
                clearTimeout(this._inpTimeout);
                this._inpTimeout = setTimeout(function () {
                    _this._filteringIsBeingExecuted = true;
                    _this.Table.reload();
                    _this._filteringIsBeingExecuted = false;
                }, 500);
            }
            else {
                this._filteringIsBeingExecuted = true;
                this.Table.reload();
                this._filteringIsBeingExecuted = false;
            }
        };
        ValueFilter.prototype.getArgument = function () {
            if (this._inputElement) {
                var v = this._inputElement.val();
                return v;
            }
            return '';
        };
        ValueFilter.prototype.reset = function () {
            if (this._inputElement) {
                this._inputElement.val('');
            }
        };
        return ValueFilter;
    })(PowerTables.FilterBase);
    PowerTables.ValueFilter = ValueFilter;
    PowerTables.ComponentsContainer.registerComponent('ValueFilter', ValueFilter);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var RangeFilter = (function (_super) {
        __extends(RangeFilter, _super);
        function RangeFilter(column) {
            _super.call(this, 'pt-rangefilter', column);
            this._filteringIsBeingExecuted = false;
        }
        RangeFilter.prototype.subscribeEvents = function (parentElement) {
            var _self = this;
            this._fromElement = parentElement.find("input[data-for='" + this.Column.RawName + "'][data-rng='from']");
            this._toElement = parentElement.find("input[data-for='" + this.Column.RawName + "'][data-rng='to']");
            if (this.IsDateTime) {
                this.Table.Renderer.createDatepicker(this._fromElement);
                this.Table.Renderer.createDatepicker(this._toElement);
            }
            if (this.Configuration.FromValue) {
                this._fromElement.val(this.Configuration.FromValue);
            }
            if (this.Configuration.ToValue) {
                this._toElement.val(this.Configuration.ToValue);
            }
            this._fromElement.bind('keyup change', function (e) {
                _self.handleValueChanged();
            });
            this._toElement.bind('keyup change', function (e) {
                _self.handleValueChanged();
            });
            this._fromPreviousValue = this._fromElement.val();
            this._toPreviousValue = this._toElement.val();
        };
        RangeFilter.prototype.handleValueChanged = function () {
            var _this = this;
            if (this._filteringIsBeingExecuted)
                return;
            if ((this._fromPreviousValue === this._fromElement.val())
                && (this._toPreviousValue === this._toElement.val())) {
                return;
            }
            this._fromPreviousValue = this._fromElement.val();
            this._toPreviousValue = this._toElement.val();
            if (this.Configuration.InputDelay > 0) {
                clearTimeout(this._inpTimeout);
                this._inpTimeout = setTimeout(function () {
                    _this._filteringIsBeingExecuted = true;
                    _this.Table.reload();
                    _this._filteringIsBeingExecuted = false;
                }, this.Configuration.InputDelay);
            }
            else {
                this._filteringIsBeingExecuted = true;
                this.Table.reload();
                this._filteringIsBeingExecuted = false;
            }
        };
        RangeFilter.prototype.getArgument = function () {
            var args = [];
            if (this._fromElement) {
                var v = this._fromElement.val();
                args.push(v);
            }
            if (this._toElement) {
                var v2 = this._toElement.val();
                args.push(v2);
            }
            var result = args.join('|');
            return result;
        };
        RangeFilter.prototype.reset = function () {
            if (this._fromElement) {
                this._fromElement.val('');
            }
            if (this._toElement) {
                this._toElement.val('');
            }
        };
        return RangeFilter;
    })(PowerTables.FilterBase);
    PowerTables.RangeFilter = RangeFilter;
    PowerTables.ComponentsContainer.registerComponent('RangeFilter', RangeFilter);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var PluginBase = (function (_super) {
        __extends(PluginBase, _super);
        function PluginBase(templateId) {
            _super.call(this, templateId);
            this.IsToolbarPlugin = false;
            this.IsQueryModifier = false;
            this.IsRenderable = true;
            this.PluginId = '';
        }
        PluginBase.prototype.init = function (table, configuration) {
            if (configuration)
                this.Configuration = configuration.Configuration;
            this.MasterTable = table;
            this.subscribe(table.Events);
        };
        PluginBase.prototype.subscribe = function (e) {
        };
        return PluginBase;
    })(PowerTables.RenderableComponent);
    PowerTables.PluginBase = PluginBase;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var LimitPlugin = (function (_super) {
        __extends(LimitPlugin, _super);
        function LimitPlugin() {
            _super.call(this, 'pt-plugin-limit');
            this.IsToolbarPlugin = true;
            this.PluginId = 'Limit';
            this.IsQueryModifier = true;
            this.IsRenderable = true;
        }
        LimitPlugin.prototype.init = function (table, configuration) {
            _super.prototype.init.call(this, table, configuration);
            var conf = this.Configuration;
            var s = [];
            var def = null;
            for (var i = 0; i < conf.LimitValues.length; i++) {
                var a = {
                    Value: conf.LimitValues[i],
                    Label: conf.LimitLabels[i],
                    Separator: conf.LimitLabels[i] === '-'
                };
                s.push(a);
                if (a.Label === conf.DefaultValue) {
                    def = a;
                }
            }
            this.Sizes = s;
            if (def) {
                this.DefaultLabel = def.Label;
                this.DefaultValue = def.Value;
                this._pageSize = def.Value;
            }
            else {
                this._pageSize = 0;
            }
            table.Events.AfterFilterGathering.subscribe(this.addLimits.bind(this), 'limit');
        };
        LimitPlugin.prototype.addLimits = function (query) {
            query.Paging.PageSize = this._pageSize;
        };
        LimitPlugin.prototype.handleLimitSelect = function (item) {
            var itm = $(item);
            var value = itm.data('size');
            var changed = this._pageSize !== value;
            if (!changed)
                return;
            this._pageSize = value;
            var labelPair = null;
            for (var i = 0; i < this.Sizes.length; i++) {
                labelPair = this.Sizes[i];
                if (labelPair.Value === value) {
                    break;
                }
            }
            this._selectedLabelElement.text(labelPair.Label);
            if (this.Configuration.ReloadTableOnLimitChange)
                this.MasterTable.reload();
        };
        LimitPlugin.prototype.subscribeEvents = function (parentElement) {
            var _self = this;
            parentElement.find('._limitSelect').click(function (e) {
                _self.handleLimitSelect(this);
            });
            this._selectedLabelElement = parentElement.find('._selectedLabel');
        };
        LimitPlugin.prototype.modifyQuery = function (query) {
            query.Paging.PageSize = this._pageSize;
        };
        return LimitPlugin;
    })(PowerTables.PluginBase);
    PowerTables.LimitPlugin = LimitPlugin;
    PowerTables.ComponentsContainer.registerComponent('Limit', LimitPlugin);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var LoadingPlugin = (function (_super) {
        __extends(LoadingPlugin, _super);
        function LoadingPlugin() {
            _super.call(this, 'pt-plugin-loading');
            this.IsToolbarPlugin = false;
            this.PluginId = 'Loading';
            this.IsRenderable = true;
            this.IsQueryModifier = false;
        }
        LoadingPlugin.prototype.showLoading = function () {
            this._element.fadeIn(150);
        };
        LoadingPlugin.prototype.hideLoading = function () {
            this._element.fadeOut(150);
        };
        LoadingPlugin.prototype.subscribeEvents = function (parentElement) {
            this._element = parentElement.find('._loading');
            this._element.hide();
        };
        LoadingPlugin.prototype.subscribe = function (e) {
            e.BeforeLoading.subscribe(this.showLoading.bind(this), 'loading');
            e.AfterLoading.subscribe(this.hideLoading.bind(this), 'loading');
        };
        return LoadingPlugin;
    })(PowerTables.PluginBase);
    PowerTables.LoadingPlugin = LoadingPlugin;
    PowerTables.ComponentsContainer.registerComponent('Loading', LoadingPlugin);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var PagingPlugin = (function (_super) {
        __extends(PagingPlugin, _super);
        function PagingPlugin() {
            _super.call(this, 'pt-plugin-pager');
            this._firstDraw = true;
            this.IsToolbarPlugin = false;
            this.IsQueryModifier = true;
            this.PluginId = 'Paging';
            this.IsRenderable = true;
        }
        PagingPlugin.prototype.init = function (table, configuration) {
            _super.prototype.init.call(this, table, configuration);
            table.Events.AfterFilterGathering.subscribe(this.onFilterGathered.bind(this), 'paging');
            table.Events.ResponseDrawing.subscribe(this.onResponse.bind(this), 'paging');
        };
        PagingPlugin.prototype.onFilterGathered = function (query) {
            this._pageSize = query.Paging.PageSize;
        };
        PagingPlugin.prototype.onResponse = function (response) {
            this._selectedPage = response.PageIndex;
            var tp = response.ResultsCount / this._pageSize;
            if (tp !== parseInt(tp)) {
                tp = parseInt(tp) + 1;
            }
            this._totalPages = tp;
            var html = this.render();
            this._pagerContainer.html(html);
            this.findElements();
        };
        PagingPlugin.prototype.modifyQuery = function (query) {
            query.Paging.PageIndex = this._selectedPage;
        };
        PagingPlugin.prototype.constructPagesElements = function () {
            var a = [];
            var total = this._totalPages;
            var cur = this._selectedPage;
            var pdiff = this.Configuration.PagesToHideUnderPeriod;
            if (total > 1) {
                this.Shown = true;
                if (!this.Configuration.ArrowsMode) {
                    if (this.Configuration.UseFirstLastPage)
                        a.push({ Page: 0, First: true });
                    if (cur > 0)
                        a.push({ Page: 0, Prev: true });
                    if (this.Configuration.UsePeriods) {
                        if (cur - 1 >= pdiff)
                            a.push({ Page: 0, Period: true });
                        if (cur - 1 > 0)
                            a.push({ Page: cur - 1, InActivePage: true });
                        a.push({ Page: cur, ActivePage: true });
                        if (cur + 1 < total)
                            a.push({ Page: cur + 1, InActivePage: true });
                        if (total - (cur + 1) >= pdiff)
                            a.push({ Page: 0, Period: true });
                    }
                    else {
                        for (var i = 0; i < total; i++) {
                            if (cur === i) {
                                a.push({ Page: i, ActivePage: true });
                            }
                            else {
                                a.push({ Page: i, InActivePage: true });
                            }
                        }
                    }
                    if (cur < total - 1)
                        a.push({ Page: 0, Next: true });
                    if (this.Configuration.UseFirstLastPage)
                        a.push({ Page: total - 1, Last: true });
                    var disFunction = function () { return this.Page + 1; };
                    for (var j = 0; j < a.length; j++) {
                        a[j].DisPage = disFunction;
                    }
                    this.Pages = a;
                }
                else {
                    this.NextArrow = cur < total - 1;
                    this.PrevArrow = cur > 0;
                }
            }
            else {
                this.Shown = false;
            }
        };
        PagingPlugin.prototype.subscribeEvents = function (parentElement) {
            this._pagerContainer = parentElement;
            this.findElements();
            var _self = this;
            this._pagerContainer.delegate('[data-action="prev"]', 'click', function (e) { return _self.previousClick(); });
            this._pagerContainer.delegate('[data-action="next"]', 'click', function (e) { return _self.nextClick(); });
            this._pagerContainer.delegate('[data-action="page"]', 'click', function (e) {
                return _self.pageClick($(this).data('page'));
            });
            this._pagerContainer.delegate('[data-action="navg"]', 'click', function (e) { return _self.goToPageClick(); });
        };
        PagingPlugin.prototype.findElements = function () {
            var _self = this;
            this._gotoPage = this._pagerContainer.find('input[data-action="pageInput"]');
            this._gotoPanel = this._pagerContainer.find('._gotoPanel');
            this._gotoPageBtn = this._pagerContainer.find('[data-action="navg"]');
            this._gotoPage.keyup(function (e) { return _self.validateGotopage(); });
            this.validateGotopage();
        };
        PagingPlugin.prototype.pageClick = function (page) {
            this._selectedPage = parseInt(page);
            this.MasterTable.reload();
        };
        PagingPlugin.prototype.nextClick = function () {
            if (this._selectedPage < this._totalPages)
                this.pageClick((this._selectedPage + 1).toString());
        };
        PagingPlugin.prototype.previousClick = function () {
            if (this._selectedPage > 0)
                this.pageClick((this._selectedPage - 1).toString());
        };
        PagingPlugin.prototype.goToPageClick = function () {
            if (this._gotoPage) {
                var v = this._gotoPage.val();
                v = (parseInt(v) - 1).toString();
                this.pageClick(v);
            }
        };
        PagingPlugin.prototype.validateGotopage = function () {
            var v = this._gotoPage.val();
            var i = parseInt(v);
            var valid = !isNaN(i) && (i > 0) && (i <= this._totalPages);
            if (valid) {
                this._gotoPanel.removeClass('has-error');
                this._gotoPageBtn.removeAttr('disabled');
            }
            else {
                this._gotoPanel.addClass('has-error');
                this._gotoPageBtn.attr('disabled', 'disabled');
            }
        };
        PagingPlugin.prototype.render = function (context) {
            this.constructPagesElements();
            return _super.prototype.render.call(this, context);
        };
        return PagingPlugin;
    })(PowerTables.PluginBase);
    PowerTables.PagingPlugin = PagingPlugin;
    PowerTables.ComponentsContainer.registerComponent('Paging', PagingPlugin);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var OrderingPlugin = (function (_super) {
        __extends(OrderingPlugin, _super);
        function OrderingPlugin() {
            _super.call(this, null);
            this._cellsOrderings = {};
            this.IsToolbarPlugin = false;
            this.PluginId = 'Ordering';
            this.IsRenderable = false;
            this.IsQueryModifier = true;
            this.RenderingTemplate = Handlebars.compile($('#pt-ordering').html());
        }
        OrderingPlugin.prototype.init = function (table, configuration) {
            _super.prototype.init.call(this, table, configuration);
            this.MasterTable.Events.AfterColumnHeaderRender.subscribe(this.onHeaderRender.bind(this), 'ordering');
        };
        OrderingPlugin.prototype.onHeaderRender = function (c) {
            var _this = this;
            if (!c.Configuration.CellPluginsConfiguration['Ordering'])
                return;
            var oc = (c.Configuration.CellPluginsConfiguration['Ordering']);
            this._cellsOrderings[c.RawName] = oc.DefaultOrdering;
            this.updateCellOrdering(c);
            c.HeaderElement.click(function (e) { return _this.changeOrdering(c); });
        };
        OrderingPlugin.prototype.changeOrdering = function (c) {
            var currentOrdering = this._cellsOrderings[c.RawName];
            if (currentOrdering === PowerTables.Ordering.Neutral)
                this._cellsOrderings[c.RawName] = PowerTables.Ordering.Ascending;
            if (currentOrdering === PowerTables.Ordering.Ascending)
                this._cellsOrderings[c.RawName] = PowerTables.Ordering.Descending;
            if (currentOrdering === PowerTables.Ordering.Descending)
                this._cellsOrderings[c.RawName] = PowerTables.Ordering.Neutral;
            this.updateCellOrdering(c);
            this.MasterTable.reload();
        };
        OrderingPlugin.prototype.updateCellOrdering = function (c) {
            var cell = c.HeaderElement;
            cell.css('cursor', 'pointer');
            cell.empty();
            var ordering = this._cellsOrderings[c.RawName];
            cell.html(this.RenderingTemplate(this.createOrderingModel(ordering, c)));
        };
        OrderingPlugin.prototype.createOrderingModel = function (sortType, c) {
            return {
                Title: c.Configuration.Title,
                Type: sortType,
                IsAscending: function () {
                    return this.Type === PowerTables.Ordering.Ascending;
                },
                IsDescending: function () {
                    return this.Type === PowerTables.Ordering.Descending;
                },
                IsNeutral: function () {
                    return this.Type === PowerTables.Ordering.Neutral;
                }
            };
        };
        OrderingPlugin.prototype.modifyQuery = function (query) {
            query.Orderings = this._cellsOrderings;
        };
        return OrderingPlugin;
    })(PowerTables.PluginBase);
    PowerTables.OrderingPlugin = OrderingPlugin;
    PowerTables.ComponentsContainer.registerComponent('Ordering', OrderingPlugin);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var HideoutPlugin = (function (_super) {
        __extends(HideoutPlugin, _super);
        function HideoutPlugin() {
            _super.call(this, 'pt-hideout');
            this.ColumnsStates = [];
            this.IsToolbarPlugin = true;
            this.PluginId = 'Hideout';
            this.IsRenderable = true;
            this.IsQueryModifier = true;
            this._visibleColumn = Handlebars.compile($('#pt-hideout-visibleColumn').html());
            this._hiddenColumn = Handlebars.compile($('#pt-hideout-hiddenColumn').html());
        }
        HideoutPlugin.prototype.init = function (table, configuration) {
            _super.prototype.init.call(this, table, configuration);
            if (!this.Configuration || !this.Configuration.ShowMenu) {
                this.IsRenderable = false;
            }
            else {
                this.IsRenderable = true;
                this.constructColumnStates();
            }
        };
        HideoutPlugin.prototype.subscribe = function (e) {
            e.AfterColumnHeaderRender.subscribe(this.onHeaderDrawn.bind(this), 'hideout');
            e.AfterFilterRender.subscribe(this.onFilterDrawn.bind(this), 'hideout');
            e.AfterCellDraw.subscribe(this.onCellDrawn.bind(this), 'hideout');
        };
        HideoutPlugin.prototype.constructColumnStates = function () {
            var cols = this.MasterTable.Configuration.Columns;
            for (var ck in cols) {
                if (cols.hasOwnProperty(ck)) {
                    var col = cols[ck];
                    if (this.Configuration.HidebleColumnsNames.indexOf(col.RawColumnName) === -1)
                        continue;
                    var hc = col.CellPluginsConfiguration['Hideout'];
                    this.ColumnsStates.push({
                        RawName: col.RawColumnName,
                        Name: col.Title,
                        Visible: !hc || !hc.Hidden
                    });
                }
            }
        };
        HideoutPlugin.prototype.onHeaderDrawn = function (column) {
            if (!this.isColumnInstanceVisible(column)) {
                column.HeaderElement.hide();
            }
        };
        HideoutPlugin.prototype.onFilterDrawn = function (column) {
            if (!this.isColumnInstanceVisible(column)) {
                column.Filter.Element.hide();
            }
        };
        HideoutPlugin.prototype.onCellDrawn = function (c) {
            if (!this.isColumnInstanceVisible(c.Column)) {
                c.Element.hide();
            }
        };
        HideoutPlugin.prototype.isColumnVisible = function (columnName) {
            return this.isColumnInstanceVisible(this.MasterTable.Columns[columnName]);
        };
        HideoutPlugin.prototype.isColumnInstanceVisible = function (col) {
            if (!col)
                return true;
            var hc = col.Configuration.CellPluginsConfiguration['Hideout'];
            return !hc || !hc.Hidden;
        };
        HideoutPlugin.prototype.hideColumnByName = function (rawColname) {
            this.hideColumnInstance(this.MasterTable.Columns[rawColname]);
        };
        HideoutPlugin.prototype.hideColumnInstance = function (c) {
            if (!c)
                return;
            c.HeaderElement.hide();
            c.Filter.Element.hide();
            for (var i = 0; i < c.Elements.length; i++) {
                c.Elements[i].hide();
            }
            if (!c.Configuration.CellPluginsConfiguration['Hideout']) {
                c.Configuration.CellPluginsConfiguration['Hideout'] = {};
            }
            c.Configuration.CellPluginsConfiguration['Hideout'].Hidden = true;
            if (this.Configuration.ReloadTableOnChangeHidden)
                this.MasterTable.reload();
        };
        HideoutPlugin.prototype.showColumnByName = function (rawColname) {
            this.showColumnInstance(this.MasterTable.Columns[rawColname]);
        };
        HideoutPlugin.prototype.showColumnInstance = function (c) {
            if (!c)
                return;
            c.HeaderElement.show();
            c.Filter.Element.show();
            for (var i = 0; i < c.Elements.length; i++) {
                c.Elements[i].show();
            }
            if (!c.Configuration.CellPluginsConfiguration['Hideout']) {
                c.Configuration.CellPluginsConfiguration['Hideout'] = {};
            }
            c.Configuration.CellPluginsConfiguration['Hideout'].Hidden = false;
            if (this.Configuration.ReloadTableOnChangeHidden)
                this.MasterTable.reload();
        };
        HideoutPlugin.prototype.toggleColumnByName = function (columnName) {
            if (this.isColumnVisible(columnName)) {
                this.hideColumnByName(columnName);
                return false;
            }
            else {
                this.showColumnByName(columnName);
                return true;
            }
        };
        HideoutPlugin.prototype.subscribeEvents = function (parentElement) {
            var _self = this;
            parentElement.delegate('li[data-showhide]', 'click', function (e) {
                var li = $(this);
                var name = li.data('showhide');
                var shown = _self.toggleColumnByName(name);
                var colName = _self.MasterTable.Columns[name].Configuration.Title;
                if (!shown) {
                    li.html(_self._hiddenColumn({ Name: colName }));
                }
                else {
                    li.html(_self._visibleColumn({ Name: colName }));
                }
                e.stopPropagation(); // to disable menu hide
            });
        };
        HideoutPlugin.prototype.modifyQuery = function (query) {
            var hidden = '';
            var shown = '';
            var cols = this.MasterTable.Columns;
            for (var ck in cols) {
                if (cols.hasOwnProperty(ck)) {
                    var col = cols[ck];
                    if (!this.isColumnInstanceVisible(col)) {
                        hidden = hidden + ',' + col.RawName;
                    }
                    else {
                        shown = shown + ',' + col.RawName;
                    }
                }
            }
            query.AdditionalData['HideoutHidden'] = hidden;
            query.AdditionalData['HideoutShown'] = shown;
        };
        return HideoutPlugin;
    })(PowerTables.PluginBase);
    PowerTables.HideoutPlugin = HideoutPlugin;
    PowerTables.ComponentsContainer.registerComponent('Hideout', HideoutPlugin);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Checkboxify = PowerTables.Plugins.Checkboxify;
    var CheckboxifyPlugin = (function (_super) {
        __extends(CheckboxifyPlugin, _super);
        function CheckboxifyPlugin() {
            _super.call(this, null);
            this._selectedItems = [];
            this._currentChecks = [];
            this._visibleAll = false;
            this.IsToolbarPlugin = false;
            this.PluginId = 'Checkboxify';
            this.IsRenderable = false;
            this.IsQueryModifier = true;
            this._selectAllTemplate = Handlebars.compile($('#pt-checkboxify-all').html());
            this._checkboxTemplate = Handlebars.compile($('#pt-checkboxify-check').html());
        }
        CheckboxifyPlugin.prototype.getSelection = function () {
            return this._selectedItems;
        };
        CheckboxifyPlugin.prototype.init = function (table, configuration) {
            this._configuration = configuration.Configuration;
            this._masterTable = table;
            table.Events.BeforeFiltersRender.subscribe(this.onFiltersRender.bind(this), 'checkboxify');
            table.Events.BeforeRowDraw.subscribe(this.onRowRender.bind(this), 'checkboxify');
            table.Events.BeforeColumnsRender.subscribe(this.onColumnsRender.bind(this), 'checkboxify');
            table.Events.BeforeResponseDrawing.subscribe(this.onBeforeResponse.bind(this), 'checkboxify');
            table.Events.ResponseDrawing.subscribe(this.onAfterRespons.bind(this), 'checkboxify');
        };
        CheckboxifyPlugin.prototype.checkVisibleAll = function (response) {
            var currentData = response.Data.length / this._masterTable.Configuration.RawColumnNames.length;
            if (currentData < response.ResultsCount)
                this._visibleAll = false;
            else
                this._visibleAll = true;
        };
        CheckboxifyPlugin.prototype.onBeforeResponse = function (response) {
            this.checkVisibleAll(response);
            if (this._configuration.SelectAllOnlyIfAllData) {
                if (!this._visibleAll)
                    this._selectAll.hide();
                else
                    this._selectAll.show();
            }
            if (this._configuration.ResetOnReload) {
                this._selectedItems.splice(0, this._selectedItems.length);
                this._masterTable.Events.SelectionChanged.invoke(this, [this._selectedItems]);
            }
            this._currentChecks.splice(0, this._currentChecks.length);
            if (this._configuration.EnableSelectAll)
                this._selectAll.prop('checked', false);
        };
        CheckboxifyPlugin.prototype.onAfterRespons = function (response) {
            if (!this._configuration.EnableSelectAll)
                return;
            var checkedAll = true;
            for (var i = 0; i < this._currentChecks.length; i++) {
                if (!this._currentChecks[i].is(':checked')) {
                    return;
                }
            }
            this._selectAll.prop('checked', true);
        };
        CheckboxifyPlugin.prototype.onColumnsRender = function () {
            var _self = this;
            var col = null;
            if (this._configuration.CheckboxifyColumnName) {
                col = this._masterTable.Renderer.renderColumnHeader({ Configuration: { Title: this._configuration.CheckboxifyColumnName } });
            }
            else {
                col = this._masterTable.Renderer.renderRawColumnHeader('');
            }
            if (this._configuration.EnableSelectAll && this._configuration.SelectAllLocation == Checkboxify.SelectAllLocation.ColumnHeader) {
                var template = this._selectAllTemplate({ NeedsColumn: false });
                var selectAll = $(template);
                var item = selectAll.find('input[data-target="checkboxify"]').andSelf().filter('input[data-target="checkboxify"]');
                this._selectAll = item;
                item.change(function () {
                    _self.selectAll($(this).is(':checked'));
                });
                col.append(selectAll);
            }
        };
        CheckboxifyPlugin.prototype.onFiltersRender = function () {
            var _self = this;
            if (this._configuration.EnableSelectAll && this._configuration.SelectAllLocation == Checkboxify.SelectAllLocation.FiltersHeader) {
                var selectAll = $(this._selectAllTemplate({ NeedsColumn: true }));
                var item = selectAll.find('input[data-target="checkboxify"]').andSelf().filter('input[data-target="checkboxify"]');
                this._selectAll = item;
                item.change(function () {
                    _self.selectAll($(this).is(':checked'));
                });
                this._masterTable.Renderer.Filters.append(selectAll);
            }
            else {
                this._masterTable.Renderer.renderEmptyFilter();
            }
        };
        CheckboxifyPlugin.prototype.onRowRender = function (r) {
            if (r.Fake) {
                r.Element.append(this._masterTable.Renderer.renderRawCell(''));
                return;
            }
            var data = r.DataObject[this._configuration.SelectionColumnName];
            if (data !== undefined && data !== null)
                data = data.toString();
            var selected = this._selectedItems.indexOf(data) !== -1;
            if (this._configuration.SelectedRowClass) {
                if (selected) {
                    r.Element.addClass(this._configuration.SelectedRowClass);
                }
                else {
                    r.Element.removeClass(this._configuration.SelectedRowClass);
                }
            }
            var elem = $(this._checkboxTemplate({ Value: data, Checked: selected }));
            var _self = this;
            var check = elem.find('[data-target="checkboxify"]');
            this._currentChecks.push(check);
            check.change(function () {
                _self.selectItem(data, $(this).is(':checked'));
                if (_self._configuration.SelectedRowClass) {
                    if ($(this).is(':checked')) {
                        r.Element.addClass(_self._configuration.SelectedRowClass);
                    }
                    else {
                        r.Element.removeClass(_self._configuration.SelectedRowClass);
                    }
                }
            });
            r.Element.append(elem);
        };
        CheckboxifyPlugin.prototype.resetSelection = function () {
            this.selectAll(false);
        };
        CheckboxifyPlugin.prototype.selectAll = function (selected) {
            if (selected) {
                for (var i = 0; i < this._currentChecks.length; i++) {
                    this._currentChecks[i].prop('checked', true);
                    this._currentChecks[i].trigger('change');
                }
                if (this._configuration.SelectAllSelectsUndisplayedData && !this._visibleAll) {
                    var _self = this;
                    this._masterTable.requestServer('checkboxify_all', function (data) {
                        _self._selectedItems = data;
                        _self._masterTable.Events.SelectionChanged.invoke(_self, [_self._selectedItems]);
                    });
                }
            }
            else {
                for (var j = 0; j < this._currentChecks.length; j++) {
                    this._currentChecks[j].prop('checked', false);
                    this._currentChecks[j].trigger('change');
                }
                if (this._configuration.SelectAllSelectsUndisplayedData) {
                    this._selectedItems.splice(0, this._selectedItems.length);
                    this._masterTable.Events.SelectionChanged.invoke(this, [this._selectedItems]);
                }
            }
        };
        CheckboxifyPlugin.prototype.selectItem = function (itemId, selected) {
            itemId = itemId.toString();
            var idx = this._selectedItems.indexOf(itemId);
            if (selected) {
                if (idx === -1) {
                    this._selectedItems.push(itemId);
                    this._masterTable.Events.SelectionChanged.invoke(this, [this._selectedItems]);
                }
            }
            else {
                if (idx !== -1) {
                    this._selectedItems.splice(idx, 1);
                    this._masterTable.Events.SelectionChanged.invoke(this, [this._selectedItems]);
                }
            }
        };
        CheckboxifyPlugin.prototype.modifyQuery = function (query) {
            query.AdditionalData['Selection'] = this._selectedItems.join('|');
            query.AdditionalData['SelectionColumn'] = this._configuration.SelectionColumnName;
        };
        return CheckboxifyPlugin;
    })(PowerTables.RenderableComponent);
    PowerTables.CheckboxifyPlugin = CheckboxifyPlugin;
    PowerTables.ComponentsContainer.registerComponent('Checkboxify', PowerTables.CheckboxifyPlugin);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var ResponseInfoPlugin = (function (_super) {
        __extends(ResponseInfoPlugin, _super);
        function ResponseInfoPlugin() {
            _super.call(this, 'pt-responseinfo');
            this.IsToolbarPlugin = false;
            this.PluginId = 'ResponseInfo';
            this.IsRenderable = true;
            this.IsQueryModifier = false;
        }
        ResponseInfoPlugin.prototype.subscribe = function (e) {
            e.ResponseDrawing.subscribe(this.onResponse.bind(this), 'ResponseInfo');
        };
        ResponseInfoPlugin.prototype.onResponse = function (response) {
            this._element.empty();
            if (this.Configuration.ResponseObjectOverride) {
                this.renderTo(this._element, response.AdditionalData['ResponseInfo']);
            }
            else {
                this.renderTo(this._element, response);
            }
        };
        ResponseInfoPlugin.prototype.subscribeEvents = function (parentElement) {
            if (this._element)
                return;
            this._element = parentElement;
            parentElement.empty();
        };
        ResponseInfoPlugin.prototype.getTemplateContent = function () {
            if (this.Configuration.TemplateText) {
                return this.Configuration.TemplateText;
            }
            else {
                return $('#pt-responseinfo').html();
            }
        };
        return ResponseInfoPlugin;
    })(PowerTables.PluginBase);
    PowerTables.ResponseInfoPlugin = ResponseInfoPlugin;
    PowerTables.ComponentsContainer.registerComponent('ResponseInfo', ResponseInfoPlugin);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var TotalPlugin = (function (_super) {
        __extends(TotalPlugin, _super);
        function TotalPlugin() {
            _super.call(this);
            this.IsToolbarPlugin = false;
            this.PluginId = 'Total';
            this.IsRenderable = false;
            this.IsQueryModifier = false;
        }
        TotalPlugin.prototype.subscribe = function (e) {
            if (this.Configuration.ShowOnTop) {
                e.BeforeResponseDrawing.subscribe(this.onResponse.bind(this), 'total');
            }
            else {
                e.ResponseDrawing.subscribe(this.onResponse.bind(this), 'total');
            }
        };
        TotalPlugin.prototype.onResponse = function (response) {
            var total = response.AdditionalData['Total'];
            if (total) {
                var cols = this.MasterTable.Columns;
                var rowElement = this.MasterTable.Renderer.renderRow(null);
                var row = {
                    MasterTable: this.MasterTable,
                    DataObject: null,
                    Index: 0,
                    Elements: [],
                    Element: rowElement,
                    Fake: true
                };
                this.TotalRow = rowElement;
                var columnsOrder = this.MasterTable.getColumnNames();
                this.MasterTable.Events.BeforeRowDraw.invoke(this, [row]);
                for (var j = 0; j < columnsOrder.length; j++) {
                    var kk = columnsOrder[j];
                    var column = this.MasterTable.Columns[kk];
                    if (column.Configuration.IsDataOnly)
                        continue;
                    var cell = {
                        Column: column,
                        Data: null,
                        DataObject: null,
                        Row: row,
                        Element: null,
                        Fake: true
                    };
                    this.MasterTable.Events.BeforeCellDraw.invoke(this, [cell]);
                    var element = null;
                    if (!total.TotalsForColumns[column.RawName])
                        element = this.MasterTable.Renderer.renderRawCell('');
                    else {
                        var value = total.TotalsForColumns[column.RawName];
                        if (this.Configuration.ColumnsValueFunctions[column.RawName]) {
                            value = this.Configuration.ColumnsValueFunctions[column.RawName](value);
                        }
                        value = "<strong>" + value + "</strong>";
                        element = this.MasterTable.Renderer.renderRawCell(value);
                    }
                    cell.Element = element;
                    column.Elements.push(element);
                    row.Elements.push(element);
                    this.MasterTable.Events.AfterCellDraw.invoke(this, [cell]);
                    rowElement = rowElement.append(element);
                }
                this.MasterTable.Renderer.appendRow(rowElement);
                this.MasterTable.Events.AfterRowDraw.invoke(this, [row]);
            }
        };
        return TotalPlugin;
    })(PowerTables.PluginBase);
    PowerTables.TotalPlugin = TotalPlugin;
    PowerTables.ComponentsContainer.registerComponent('Total', TotalPlugin);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var ToolbarPlugin = (function (_super) {
        __extends(ToolbarPlugin, _super);
        function ToolbarPlugin() {
            _super.call(this, 'pt-toolbar');
            this._buttonConfigById = {};
            this._selectionListeners = [];
            this._btnsCounter = 0;
            this.IsToolbarPlugin = true;
            this.PluginId = 'Toolbar';
            this.IsRenderable = true;
            this.IsQueryModifier = false;
        }
        ToolbarPlugin.prototype.subscribe = function (e) {
            this.buildConfigCache(this.Configuration.Buttons);
            e.SelectionChanged.subscribe(this.onSelectionChanged.bind(this), 'toolbar');
        };
        ToolbarPlugin.prototype.onSelectionChanged = function (selection) {
            if (selection.length > 0) {
                for (var i = 0; i < this._selectionListeners.length; i++) {
                    this.enable(this._selectionListeners[i]);
                }
            }
            else {
                for (var j = 0; j < this._selectionListeners.length; j++) {
                    this.disable(this._selectionListeners[j]);
                }
            }
        };
        ToolbarPlugin.prototype.buildConfigCache = function (config) {
            if (!config)
                return;
            for (var i = 0; i < config.length; i++) {
                config[i].TempId = 'button_' + this._btnsCounter;
                this._btnsCounter++;
                var conf = config[i];
                this._buttonConfigById[conf.TempId] = conf;
                this.buildConfigCache(conf.Submenu);
            }
        };
        ToolbarPlugin.prototype.subscribeEvents = function (parentElement) {
            var _self = this;
            parentElement.find('[data-role="toolbar-btn"]').each(function () {
                var thisConf = _self._buttonConfigById[$(this).data('idx')];
                if (!thisConf)
                    return;
                _self.setupButton($(this), thisConf);
            });
        };
        ToolbarPlugin.prototype.disable = function (el) {
            el.attr('disabled', 'disabled');
            el.addClass('disabled');
        };
        ToolbarPlugin.prototype.enable = function (el) {
            el.removeAttr('disabled');
            el.removeClass('disabled');
        };
        ToolbarPlugin.prototype.setupButton = function (button, config) {
            var _self = this;
            if (config.DisableIfNothingChecked) {
                this._selectionListeners.push(button);
                this.disable(button);
            }
            if (config.OnClick) {
                button.click(function (e) {
                    if ($(this).is('.disabled')) {
                        e.stopPropagation();
                        return;
                    }
                    config.OnClick.apply(this, [_self.MasterTable]);
                });
            }
            else {
                if (config.Command) {
                    button.click(function (e) {
                        if ($(this).is('.disabled')) {
                            e.stopPropagation();
                            return;
                        }
                        var _self2 = this;
                        var f = function (queryModifier) {
                            if (config.BlackoutWhileCommand)
                                _self.disable($(_self2));
                            _self.MasterTable.requestServer(config.Command, function (response) {
                                if (config.CommandCallbackFunction) {
                                    config.CommandCallbackFunction.apply(_self.MasterTable, [_self.MasterTable, response]);
                                }
                                else {
                                    if (response.$isDeferred && response.$url) {
                                        window.location.href = response.$url;
                                    }
                                }
                                if (config.BlackoutWhileCommand) {
                                    _self.enable($(_self2));
                                }
                            }, queryModifier);
                        };
                        if (config.ConfirmationFunction) {
                            config.ConfirmationFunction.apply(_self.MasterTable, [f]);
                        }
                        else {
                            f();
                        }
                    });
                }
            }
        };
        return ToolbarPlugin;
    })(PowerTables.PluginBase);
    PowerTables.ToolbarPlugin = ToolbarPlugin;
    PowerTables.ComponentsContainer.registerComponent('Toolbar', ToolbarPlugin);
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var FormwatchPlugin = (function (_super) {
        __extends(FormwatchPlugin, _super);
        function FormwatchPlugin() {
            _super.apply(this, arguments);
            this.IsQueryModifier = true;
            this.IsRenderable = false;
            this.PluginId = 'Formwatch';
            this._existingValues = {};
            this._filteringExecuted = {};
            this._timeouts = {};
        }
        FormwatchPlugin.prototype.modifyQuery = function (query) {
            var result = {};
            for (var i = 0; i < this.Configuration.FieldsConfiguration.length; i++) {
                var fieldConf = this.Configuration.FieldsConfiguration[i];
                var value = null;
                var name = fieldConf.FieldJsonName;
                if (fieldConf.ConstantValue) {
                    value = fieldConf.ConstantValue;
                }
                else {
                    if (fieldConf.FieldValueFunction) {
                        value = fieldConf.FieldValueFunction();
                    }
                    else {
                        var element = document.querySelector(fieldConf.FieldSelector);
                        if (element) {
                            if (element.type === 'select-multiple') {
                                var o = element;
                                value = [];
                                for (var k = 0; k < o.options.length; k++) {
                                    if (o.options[k].selected)
                                        value.push(o.options[k].value);
                                }
                            }
                            else if (element.type === 'checkbox') {
                                value = element.checked;
                            }
                            else {
                                value = element.value;
                            }
                        }
                    }
                    if (fieldConf.SetConstantIfNotSupplied && !value) {
                        value = fieldConf.ConstantValue;
                    }
                }
                result[name] = value;
            }
            var str = JSON.stringify(result);
            query.AdditionalData['Formwatch'] = str;
        };
        FormwatchPlugin.prototype.subscribe = function (e) {
            var _this = this;
            for (var i = 0; i < this.Configuration.FieldsConfiguration.length; i++) {
                var conf = this.Configuration.FieldsConfiguration[i];
                if (conf.TriggerSearchOnEvents && conf.TriggerSearchOnEvents.length > 0) {
                    var element = document.querySelector(conf.FieldSelector);
                    for (var j = 0; j < conf.TriggerSearchOnEvents.length; j++) {
                        var evtToTrigger = conf.TriggerSearchOnEvents[j];
                        element.addEventListener(evtToTrigger, (function (c, el) { return function (evt) {
                            _this.fieldChange(c.FieldSelector, c.SearchTriggerDelay, el, evt);
                        }; })(conf, element));
                    }
                    this._existingValues[conf.FieldSelector] = element.value;
                }
            }
        };
        FormwatchPlugin.prototype.fieldChange = function (fieldSelector, delay, element, e) {
            var _this = this;
            if (this._filteringExecuted[fieldSelector])
                return;
            if (element.value === this._existingValues[fieldSelector]) {
                return;
            }
            this._existingValues[fieldSelector] = element.value;
            if (delay > 0) {
                if (this._timeouts[fieldSelector])
                    clearTimeout(this._timeouts[fieldSelector]);
                this._timeouts[fieldSelector] = setTimeout(function () {
                    _this._filteringExecuted[fieldSelector] = true;
                    _this.MasterTable.reload();
                    _this._filteringExecuted[fieldSelector] = false;
                }, 500);
            }
            else {
                this._filteringExecuted[fieldSelector] = true;
                this.MasterTable.reload();
                this._filteringExecuted[fieldSelector] = false;
            }
        };
        return FormwatchPlugin;
    })(PowerTables.PluginBase);
    PowerTables.FormwatchPlugin = FormwatchPlugin;
    PowerTables.ComponentsContainer.registerComponent('Formwatch', FormwatchPlugin);
})(PowerTables || (PowerTables = {}));
//# sourceMappingURL=powertables.js.map