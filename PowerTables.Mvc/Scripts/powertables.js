//     This code was generated by a Reinforced.Typings tool. 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
var PowerTables;
(function (PowerTables) {
    (function (Ordering) {
        Ordering[Ordering["Ascending"] = 0] = "Ascending";
        Ordering[Ordering["Descending"] = 1] = "Descending";
        Ordering[Ordering["Neutral"] = 2] = "Neutral";
    })(PowerTables.Ordering || (PowerTables.Ordering = {}));
    var Ordering = PowerTables.Ordering;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Components container for registration/resolving plugins
     */
    var ComponentsContainer = (function () {
        function ComponentsContainer() {
        }
        /**
         * Registers component in components container for further instantiation
         * @param key Text ID for component
         * @param ctor Constructor function
         * @returns {}
         */
        ComponentsContainer.registerComponent = function (key, ctor) {
            this._components[key] = ctor;
        };
        /**
         * Instantiates component by its ID with specified arguments
         * @param key Text ID of desired component
         * @param args String arguments for instantiation
         * @returns {}
         */
        ComponentsContainer.resolveComponent = function (key, args) {
            if (!this._components[key])
                throw new Error("Component " + key + " is not registered. Please ensure that you have connected all the additional scripts");
            if (!args)
                return new this._components[key];
            else {
                var ctor = this._components[key];
                var boundCtor = Function.prototype.bind.apply(ctor, [null].concat(args));
                return new boundCtor();
            }
        };
        /**
         * Registers component-provided events in particular EventsManager instance.
         * It is important to register all component's events befor instantiation and .init call
         * to make them available to subscribe each other's events.
         *
         * Instance manager asserts that .registerEvent will be called exactly once for
         * each component used in table
         *
         * @param key Text ID of desired component
         * @param eventsManager Events manager instance
         * @returns {}
         */
        ComponentsContainer.registerComponentEvents = function (key, eventsManager, masterTable) {
            if (!this._components[key])
                throw new Error("Component " + key + " is not registered. Please ensure that you have connected all the additional scripts");
            if (this._components[key].registerEvents && {}.toString.call(this._components[key].registerEvents) === '[object Function]') {
                this._components[key].registerEvents.call(eventsManager, eventsManager, masterTable);
            }
        };
        ComponentsContainer._components = {};
        return ComponentsContainer;
    })();
    PowerTables.ComponentsContainer = ComponentsContainer;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * This entity is responsible for integration of data between storage and rendere.
     * Also it provides functionality for table events subscription and
     * elements location
     */
    var Controller = (function () {
        function Controller(masterTable) {
            this._masterTable = masterTable;
            this._masterTable.Events.LoadingError.subscribe(this.onLoadingError.bind(this), 'controller');
        }
        Controller.prototype.onLoadingError = function (e) {
            this.showTableMessage({
                Message: e.EventArgs.Reason,
                MessageType: 'error',
                AdditionalData: e.EventArgs.StackTrace,
                IsMessage: true
            });
        };
        /**
         * Initializes full reloading cycle
         * @returns {}
         */
        Controller.prototype.reload = function () {
            var _this = this;
            this._masterTable.Loader.requestServer('query', function () {
                _this.redrawVisibleData();
            });
        };
        /**
         * Redraws row containing currently visible data object
         *
         * @param dataObject Data object
         * @param idx
         * @returns {}
         */
        Controller.prototype.redrawVisibleDataObject = function (dataObject, idx) {
            if (!idx) {
                var dispIndex = this._masterTable.DataHolder.localLookupDisplayedData(dataObject);
                if (dispIndex == null)
                    throw new Error('Cannot redraw object because it is not displaying currently');
                idx = dispIndex.DisplayedIndex;
            }
            var row = this.produceRow(dataObject, idx);
            this._masterTable.Renderer.Modifier.redrawRow(row);
        };
        /**
         * Redraws locally visible data
         */
        Controller.prototype.redrawVisibleData = function () {
            var rows = this.produceRows();
            if (rows.length === 0) {
                this.showTableMessage({
                    MessageType: 'noresults',
                    Message: 'No data found',
                    AdditionalData: 'Try specifying different filter settings'
                });
            }
            else {
                this._masterTable.Renderer.body(rows);
            }
        };
        /**
         * Shows full-width table message
         * @param tableMessage Message of type ITableMessage
         * @returns {}
         */
        Controller.prototype.showTableMessage = function (tableMessage) {
            tableMessage.UiColumnsCount = this._masterTable.InstanceManager.getUiColumns().length;
            tableMessage.IsMessage = true;
            this._masterTable.DataHolder.DisplayedData = [tableMessage];
            this.redrawVisibleData();
        };
        //#region event delegation hell
        //#endregion
        /**
         * Inserts data entry to local storage
         *
         * @param insertion Insertion command
         */
        Controller.prototype.insertLocalRow = function (insertion) {
            if (insertion.RedrawBehavior === RedrawBehavior.ReloadFromServer) {
                this.reload();
            }
            else {
                this._masterTable.DataHolder.StoredData.splice(insertion.StorageRowIndex, 0, insertion.DataObject);
                if (insertion.RedrawBehavior === RedrawBehavior.LocalFullRefresh)
                    this.localFullRefresh();
                else {
                    this._masterTable.DataHolder.DisplayedData.splice(insertion.DisplayRowIndex, 0, insertion.DataObject);
                    if (insertion.RedrawBehavior === RedrawBehavior.RedrawVisible)
                        this.redrawVisibleData();
                    else if (insertion.RedrawBehavior === RedrawBehavior.LocalVisibleReorder)
                        this.localVisibleReorder();
                    else if (insertion.RedrawBehavior === RedrawBehavior.ParticularRowUpdate) {
                        var row = this.produceRow(insertion.DataObject, insertion.DisplayRowIndex);
                        this._masterTable.Renderer.Modifier.appendRow(row, insertion.DisplayRowIndex);
                    }
                }
            }
        };
        /**
         * Removes data entry from local storage
         *
         * @param insertion Insertion command
         */
        Controller.prototype.deleteLocalRow = function (deletion) {
            if (deletion.RedrawBehavior === RedrawBehavior.ReloadFromServer) {
                this.reload();
            }
            else {
                this._masterTable.DataHolder.StoredData.splice(deletion.StorageRowIndex, 1);
                if (deletion.RedrawBehavior === RedrawBehavior.LocalFullRefresh)
                    this.localFullRefresh();
                else {
                    this._masterTable.DataHolder.DisplayedData.splice(deletion.DisplayRowIndex, 1);
                    if (deletion.RedrawBehavior === RedrawBehavior.RedrawVisible)
                        this.redrawVisibleData();
                    else if (deletion.RedrawBehavior === RedrawBehavior.LocalVisibleReorder)
                        this.localVisibleReorder();
                    else if (deletion.RedrawBehavior === RedrawBehavior.ParticularRowUpdate) {
                        this._masterTable.Renderer.Modifier.destroyRowByIndex(deletion.DisplayRowIndex);
                    }
                }
            }
        };
        /**
         * Updates data entry in local storage
         *
         * @param insertion Insertion command
         */
        Controller.prototype.updateLocalRow = function (update) {
            if (update.RedrawBehavior === RedrawBehavior.ReloadFromServer) {
                this.reload();
            }
            else {
                var object = this._masterTable.DataHolder.localLookupStoredData(update.StorageRowIndex);
                update.UpdateFn(object);
                if (update.RedrawBehavior === RedrawBehavior.LocalFullRefresh)
                    this.localFullRefresh();
                else {
                    // not required to update displayed object because we are updating reference
                    if (update.RedrawBehavior === RedrawBehavior.RedrawVisible)
                        this.redrawVisibleData();
                    else if (update.RedrawBehavior === RedrawBehavior.LocalVisibleReorder)
                        this.localVisibleReorder();
                    else if (update.RedrawBehavior === RedrawBehavior.ParticularRowUpdate) {
                        var row = this.produceRow(object, update.DisplayRowIndex);
                        this._masterTable.Renderer.Modifier.redrawRow(row);
                    }
                }
            }
        };
        Controller.prototype.localFullRefresh = function () {
            this._masterTable.DataHolder.filterStoredDataWithPreviousQuery();
            this.redrawVisibleData();
        };
        Controller.prototype.localVisibleReorder = function () {
            this._masterTable.DataHolder.DisplayedData = this._masterTable.DataHolder.orderSet(this._masterTable.DataHolder.DisplayedData, this._masterTable.DataHolder.RecentClientQuery);
            this.redrawVisibleData();
        };
        /**
         * Converts data object to display row
         *
         * @param dataObject Data object
         * @param idx Object's displaying index
         * @param columns Optional displaying columns set
         * @returns {IRow} Row representing displayed object
         */
        Controller.prototype.produceRow = function (dataObject, idx, columns) {
            if (!dataObject)
                return null;
            if (!columns)
                columns = this._masterTable.InstanceManager.getUiColumns();
            var rw = {
                DataObject: dataObject,
                Index: idx,
                MasterTable: this._masterTable
            };
            if (dataObject.IsMessage) {
                rw.renderElement = function (hb) { return hb.getCachedTemplate('messages')(dataObject); };
                rw.IsSpecial = true;
                return rw;
            }
            var cells = {};
            for (var j = 0; j < columns.length; j++) {
                var col = columns[j];
                var cell = {
                    Column: col,
                    Data: dataObject[col.RawName],
                    DataObject: dataObject,
                    Row: rw,
                    renderContent: null,
                    renderElement: null
                };
                cells[col.RawName] = cell;
            }
            rw.Cells = cells;
            return rw;
        };
        Controller.prototype.produceRows = function () {
            this._masterTable.Events.BeforeDataRendered.invoke(this, null);
            var result = [];
            var columns = this._masterTable.InstanceManager.getUiColumns();
            for (var i = 0; i < this._masterTable.DataHolder.DisplayedData.length; i++) {
                var row = this.produceRow(this._masterTable.DataHolder.DisplayedData[i], i, columns);
                if (!row)
                    continue;
                result.push(row);
            }
            return result;
        };
        return Controller;
    })();
    PowerTables.Controller = Controller;
    /**
     * Behavior of redrawing table after modification
     */
    (function (RedrawBehavior) {
        /**
         * To perform UI redraw, data will be entirely reloaded from server.
         * Local data will not be affected due to further reloading
         */
        RedrawBehavior[RedrawBehavior["ReloadFromServer"] = 0] = "ReloadFromServer";
        /**
         * Filters will be reapplied only locally.
         * Currently displaying data will be entirely redrawn with client filters
         * using locally cached data from server.
         *
         * In this case, if modified rows are not satisfying any server conditions then
         * is will still stay in table. That may seem illogical for target users.
         */
        RedrawBehavior[RedrawBehavior["LocalFullRefresh"] = 1] = "LocalFullRefresh";
        /**
         * Filters will be reapplied locally but only on currently displaying data.
         *
         * In this case, deleted row will simply disappear, added row will be added to currently
         * displaying cells set and currently displaying set will be re-ordered, modified
         * row will be ordered among only displaying set without filtering.
         * This approach is quite fast and may be useful in various cases
         */
        RedrawBehavior[RedrawBehavior["LocalVisibleReorder"] = 2] = "LocalVisibleReorder";
        /**
         * Simply redraw all the visible cells without additional filtering.
         *
         * May lead to glitches e.g. invalid elements count on page or invalid
         * items order. Most suitable for updating that does not touch filtering/ordering-sensetive
         * data.
         */
        RedrawBehavior[RedrawBehavior["RedrawVisible"] = 3] = "RedrawVisible";
        /**
         * Only particular row mentioned in modification request will be updated.
         * No server reloading, no reordering, no re-sorting. Row will stay in place or
         * will be added at specified position or will be simply disappear from currently displayed set.
         * In some cases such behavior may confuse users, but still stay suitable for most cases.
         * Of course, it will disappear after on next filtering if no more satisfying
         * filter conditions.
         */
        RedrawBehavior[RedrawBehavior["ParticularRowUpdate"] = 4] = "ParticularRowUpdate";
        /**
         * Modification request will not affect UI anyhow until next filtering. Confusing.
         */
        RedrawBehavior[RedrawBehavior["DoNothing"] = 5] = "DoNothing";
    })(PowerTables.RedrawBehavior || (PowerTables.RedrawBehavior = {}));
    var RedrawBehavior = PowerTables.RedrawBehavior;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * This enumeration distinguishes which way
     * underlying query will be used
     */
    (function (QueryScope) {
        /**
         * Mentioned query will be sent to server to obtain
         * data (probably) for further local filtration.
         * All locally filtered fields should be excluded from
         * underlying query
         */
        QueryScope[QueryScope["Server"] = 0] = "Server";
        /**
         * Mentioned query will be used for local data filtration.
         * To gain performance, please exclude all data settings that were
         * applied during server request
         */
        QueryScope[QueryScope["Client"] = 1] = "Client";
        /**
         * This query should contain both data for client and server filtering.
         * Transboundary queries are used to obtain query settings
         * that will be used on server side to retrieve data set that
         * will be used for server command handling, so server needs all filtering settings
         */
        QueryScope[QueryScope["Transboundary"] = 2] = "Transboundary";
    })(PowerTables.QueryScope || (PowerTables.QueryScope = {}));
    var QueryScope = PowerTables.QueryScope;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Class that is responsible for holding and managing data loaded from server
     */
    var DataHolder = (function () {
        function DataHolder(masterTable) {
            this._comparators = {};
            this._filters = [];
            this._anyClientFiltration = false;
            /**
             * Data that actually is currently displayed in table
             */
            this.DisplayedData = [];
            /**
             * Data that was recently loaded from server
             */
            this.StoredData = [];
            this._rawColumnNames = masterTable.InstanceManager.getColumnNames();
            this._events = masterTable.Events;
            this._instances = masterTable.InstanceManager;
            this._masterTable = masterTable;
        }
        /**
         * Registers client filter
         *
         * @param filter Client filter
         */
        DataHolder.prototype.registerClientFilter = function (filter) {
            this._anyClientFiltration = true;
            this._filters.push(filter);
        };
        /**
         * Registers new client ordering comparer function
         *
         * @param dataField Field for which this comparator is applicable
         * @param comparator Comparator fn that should return 0 if entries are equal, -1 if a<b, +1 if a>b
         * @returns {}
         */
        DataHolder.prototype.registerClientOrdering = function (dataField, comparator) {
            this._anyClientFiltration = true;
            this._comparators[dataField] = comparator;
        };
        /**
         * Is there any client filtration pending
         * @returns True if there are any actions to be performed on query after loading, false otherwise
         */
        DataHolder.prototype.isClientFiltrationPending = function () {
            return (this.EnableClientSkip || this.EnableClientTake || this._anyClientFiltration);
        };
        /**
        * Parses response from server and turns it to objects array
        */
        DataHolder.prototype.storeResponse = function (response, clientQuery) {
            var data = [];
            var obj = {};
            var currentColIndex = 0;
            var currentCol = this._rawColumnNames[currentColIndex];
            for (var i = 0; i < response.Data.length; i++) {
                if (this._instances.Columns[currentCol].IsDateTime) {
                    if (response.Data[i]) {
                        obj[currentCol] = this._masterTable.Date.parse(response.Data[i]);
                    }
                    else {
                        obj[currentCol] = null;
                    }
                }
                else {
                    obj[currentCol] = response.Data[i];
                }
                currentColIndex++;
                if (currentColIndex >= this._rawColumnNames.length) {
                    currentColIndex = 0;
                    data.push(obj);
                    obj = {};
                }
                currentCol = this._rawColumnNames[currentColIndex];
            }
            this.StoredData = data;
            this.filterStoredData(clientQuery);
        };
        /**
         * Filters supplied data set using client query
         *
         * @param objects Data set
         * @param query Client query
         * @returns {Array} Array of filtered items
         */
        DataHolder.prototype.filterSet = function (objects, query) {
            var result = [];
            if (this._filters.length !== 0) {
                for (var i = 0; i < objects.length; i++) {
                    var obj = objects[i];
                    var acceptable = true;
                    for (var j = 0; j < this._filters.length; j++) {
                        var filter = this._filters[j];
                        acceptable = filter.filterPredicate(obj, query);
                        if (!acceptable)
                            break;
                    }
                    if (!acceptable)
                        continue;
                    result.push(obj);
                }
                return result;
            }
            return objects;
        };
        /**
        * Orders supplied data set using client query
        *
        * @param objects Data set
        * @param query Client query
        * @returns {Array} Array of ordered items
        */
        DataHolder.prototype.orderSet = function (objects, query) {
            if (query.Orderings) {
                var sortFn = '';
                var comparersArg = '';
                var orderFns = [];
                for (var i = 0; i < this._rawColumnNames.length; i++) {
                    var orderingKey = this._rawColumnNames[i];
                    if (query.Orderings.hasOwnProperty(orderingKey)) {
                        var orderingDirection = query.Orderings[orderingKey];
                        if (orderingDirection === PowerTables.Ordering.Neutral)
                            continue;
                        if (!this._comparators[orderingKey])
                            continue;
                        var negate = orderingDirection === PowerTables.Ordering.Descending;
                        sortFn += "cc=f" + orderFns.length + "(a,b); ";
                        comparersArg += "f" + orderFns.length + ",";
                        orderFns.push(this._comparators[orderingKey]);
                        sortFn += "if (cc!==0) return " + (negate ? '-cc' : 'cc') + "; ";
                    }
                }
                if (sortFn.length === 0)
                    return objects;
                comparersArg = comparersArg.substr(0, comparersArg.length - 1);
                sortFn = "(function(" + comparersArg + "){ return (function (a,b) { var cc = 0; " + sortFn + " return 0; }); })";
                var sortFunction = eval(sortFn).apply(null, orderFns);
                var ordered = objects.sort(sortFunction);
                return ordered;
            }
            return objects;
        };
        /**
         * Filter recent data and store it to currently displaying data
         *
         * @param query Table query
         * @returns {}
         */
        DataHolder.prototype.filterStoredData = function (query) {
            this._events.BeforeClientDataProcessing.invoke(this, query);
            this.DisplayedData = this.StoredData;
            this._previouslyFiltered = this.StoredData;
            this._previouslyOrdered = this.StoredData;
            this.RecentClientQuery = query;
            if (this.isClientFiltrationPending() && (!(!query))) {
                var copy = this.StoredData.slice();
                var filtered = this.filterSet(copy, query);
                var ordered = this.orderSet(filtered, query);
                var selected = ordered;
                var startingIndex = query.Paging.PageIndex * query.Paging.PageSize;
                if (startingIndex > filtered.length)
                    startingIndex = 0;
                var take = query.Paging.PageSize;
                if (this.EnableClientSkip && this.EnableClientTake) {
                    if (take === 0)
                        selected = ordered.slice(startingIndex);
                    else
                        selected = ordered.slice(startingIndex, startingIndex + take);
                }
                else {
                    if (this.EnableClientSkip) {
                        selected = ordered.slice(startingIndex);
                    }
                    else if (this.EnableClientTake) {
                        if (take !== 0) {
                            selected = ordered.slice(0, query.Paging.PageSize);
                        }
                    }
                }
                this._previouslyFiltered = filtered;
                this._previouslyOrdered = ordered;
                this.DisplayedData = selected;
            }
            this._events.AfterClientDataProcessing.invoke(this, {
                Displaying: this.DisplayedData,
                Filtered: this._previouslyFiltered,
                Ordered: this._previouslyOrdered,
                Source: this.StoredData
            });
        };
        /**
         * Filter recent data and store it to currently displaying data
         * using query that was previously applied to local data
         */
        DataHolder.prototype.filterStoredDataWithPreviousQuery = function () {
            this.filterStoredData(this.RecentClientQuery);
        };
        /**
         * Finds data matching predicate among locally stored data
         *
         * @param predicate Filtering predicate returning true for required objects
         * @returns Array of ILocalLookupResults
         */
        DataHolder.prototype.localLookup = function (predicate) {
            var result = [];
            for (var i = 0; i < this.StoredData.length; i++) {
                if (predicate(this.StoredData[i])) {
                    result.push({
                        DataObject: this.StoredData[i],
                        IsCurrentlyDisplaying: false,
                        LoadedIndex: i,
                        DisplayedIndex: -1
                    });
                }
            }
            for (var j = 0; j < result.length; j++) {
                var idx = this.DisplayedData.indexOf(result[j].DataObject);
                if (idx >= 0) {
                    result[j].IsCurrentlyDisplaying = true;
                    result[j].DisplayedIndex = idx;
                }
            }
            return result;
        };
        /**
         * Finds data object among currently displayed and returns ILocalLookupResult
         * containing also Loaded-set index of this data object
         *
         * @param index Index of desired data object among locally displaying data
         * @returns ILocalLookupResult
         */
        DataHolder.prototype.localLookupDisplayedDataObject = function (dataObject) {
            var index = this.DisplayedData.indexOf(dataObject);
            if (index < 0)
                return null;
            var result = {
                DataObject: dataObject,
                IsCurrentlyDisplaying: true,
                DisplayedIndex: index,
                LoadedIndex: this.StoredData.indexOf(dataObject)
            };
            return result;
        };
        /**
         * Finds data object among currently displayed and returns ILocalLookupResult
         * containing also Loaded-set index of this data object
         *
         * @param index Index of desired data object among locally displaying data
         * @returns ILocalLookupResult
         */
        DataHolder.prototype.localLookupStoredDataObject = function (dataObject) {
            var index = this.StoredData.indexOf(dataObject);
            if (index < 0)
                return null;
            var result = {
                DataObject: dataObject,
                IsCurrentlyDisplaying: true,
                DisplayedIndex: this.DisplayedData.indexOf(dataObject),
                LoadedIndex: index
            };
            return result;
        };
        /**
         * Finds data object among currently displayed and returns ILocalLookupResult
         * containing also Loaded-set index of this data object
         *
         * @param index Index of desired data object among locally displaying data
         * @returns ILocalLookupResult
         */
        DataHolder.prototype.localLookupDisplayedData = function (index) {
            if (index < 0)
                return null;
            if (index > this.DisplayedData.length)
                return null;
            var result = {
                DataObject: this.DisplayedData[index],
                IsCurrentlyDisplaying: true,
                DisplayedIndex: index,
                LoadedIndex: this.StoredData.indexOf(this.DisplayedData[index])
            };
            return result;
        };
        /**
         * Finds data object among recently loaded and returns ILocalLookupResult
         * containing also Loaded-set index of this data object
         *
         * @param index Index of desired data object among locally displaying data
         * @returns ILocalLookupResult
         */
        DataHolder.prototype.localLookupStoredData = function (index) {
            if (index < 0)
                return null;
            if (index > this.StoredData.length)
                return null;
            var result = {
                DataObject: this.StoredData[index],
                IsCurrentlyDisplaying: true,
                DisplayedIndex: this.DisplayedData.indexOf(this.StoredData[index]),
                LoadedIndex: index
            };
            return result;
        };
        return DataHolder;
    })();
    PowerTables.DataHolder = DataHolder;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * API responsible for dates operations
     */
    var DateService = (function () {
        function DateService(datepickerOptions) {
            this._datepickerOptions = datepickerOptions;
        }
        /**
         * Determines is passed object valid Date object
         * @param date
         * @returns {}
         */
        DateService.prototype.isValidDate = function (date) {
            if (date === null)
                return true;
            if (date == undefined)
                return false;
            if (Object.prototype.toString.call(date) === "[object Date]") {
                if (isNaN(date.getTime()))
                    return false;
                else
                    return true;
            }
            return false;
        };
        /**
         * Converts jsDate object to server's understandable format
         *
         * @param date Date object
         * @returns {string} Date in ISO 8601 format
         */
        DateService.prototype.serialize = function (date) {
            if (date === null || date == undefined)
                return '';
            if (Object.prototype.toString.call(date) === "[object Date]") {
                if (isNaN(date.getTime()))
                    return '';
                else
                    return Date.prototype.toISOString.call(date);
            }
            else
                throw new Error(date + " is not a date at all");
        };
        /**
         * Parses ISO date string to regular Date object
         *
         * @param dateString Date string containing date in ISO 8601
         * @returns {}
         */
        DateService.prototype.parse = function (dateString) {
            var date = new Date(dateString);
            if (Object.prototype.toString.call(date) === "[object Date]") {
                if (isNaN(date.getTime()))
                    return null;
                else
                    return date;
            }
            throw new Error(dateString + " is not a date at all");
        };
        /**
         * Retrieves Date object from 3rd party datepicker exposed by HTML element
         *
         * @param element HTML element containing datepicker componen
         * @returns {Date} Date object or null
         */
        DateService.prototype.getDateFromDatePicker = function (element) {
            if (!element)
                return null;
            var date = this._datepickerOptions.GetFromDatePicker(element);
            if (date == null)
                return null;
            if (Object.prototype.toString.call(date) === "[object Date]") {
                if (isNaN(date.getTime()))
                    return null;
                else
                    return date;
            }
            throw new Error(date + " from datepicker is not a date at all");
        };
        /**
         * Creates datepicker object of HTML element using configured function
         *
         * @param element HTML element that should be converted to datepicker
         */
        DateService.prototype.createDatePicker = function (element, isNullableDate) {
            if (!element)
                return;
            this._datepickerOptions.CreateDatePicker(element, isNullableDate);
        };
        /**
         * Passes Date object to datepicker element
         *
         * @param element HTML element containing datepicker componen
         * @param date Date object to supply to datepicker or null
         */
        DateService.prototype.putDateToDatePicker = function (element, date) {
            if (!element)
                return;
            this._datepickerOptions.PutToDatePicker(element, date);
        };
        return DateService;
    })();
    PowerTables.DateService = DateService;
})(PowerTables || (PowerTables = {}));
if (!Date.prototype.toISOString) {
    (function () {
        function pad(number) {
            if (number < 10) {
                return '0' + number;
            }
            return number;
        }
        Date.prototype.toISOString = function () {
            return this.getUTCFullYear() +
                '-' + pad(this.getUTCMonth() + 1) +
                '-' + pad(this.getUTCDate()) +
                'T' + pad(this.getUTCHours()) +
                ':' + pad(this.getUTCMinutes()) +
                ':' + pad(this.getUTCSeconds()) +
                '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +
                'Z';
        };
    }());
}
var PowerTables;
(function (PowerTables) {
    /**
     * Wrapper for table event with ability to subscribe/unsubscribe
     */
    var TableEvent = (function () {
        function TableEvent(masterTable) {
            this._handlers = {};
            this._masterTable = masterTable;
        }
        /**
         * Invokes event with overridden this arg and specified event args
         *
         * @param thisArg "this" argument to be substituted to callee
         * @param eventArgs Event args will be passed to callee
         */
        TableEvent.prototype.invoke = function (thisArg, eventArgs) {
            var ea = {
                MasterTable: this._masterTable,
                EventArgs: eventArgs
            };
            var hndlrs = this._handlers;
            var i = 0;
            for (var k in hndlrs) {
                if (hndlrs.hasOwnProperty(k)) {
                    var kHandlers = hndlrs[k];
                    for (i = 0; i < kHandlers.length; i++) {
                        kHandlers[i].apply(thisArg, [ea]);
                    }
                    i = 0;
                }
            }
        };
        /**
         * Subscribes specified function to event with supplied string key.
         * Subscriber key is needed to have an ability to unsubscribe from event
         * and should reflect entity that has been subscriben
         *
         * @param handler Event handler to subscribe
         * @param subscriber Subscriber key to associate with handler
         */
        TableEvent.prototype.subscribe = function (handler, subscriber) {
            if (!this._handlers[subscriber]) {
                this._handlers[subscriber] = [];
            }
            this._handlers[subscriber].push(handler);
        };
        /**
         * Unsubscribes specified addressee from event
         * @param subscriber Subscriber key associated with handler
         */
        TableEvent.prototype.unsubscribe = function (subscriber) {
            this._handlers[subscriber] = null;
            delete this._handlers[subscriber];
        };
        return TableEvent;
    })();
    PowerTables.TableEvent = TableEvent;
    /**
     * Events manager for table.
     * Contains all available events
     */
    var EventsManager = (function () {
        function EventsManager(masterTable) {
            this._masterTable = masterTable;
            this.BeforeQueryGathering = new TableEvent(masterTable);
            this.AfterQueryGathering = new TableEvent(masterTable);
            this.BeforeClientQueryGathering = new TableEvent(masterTable);
            this.AfterClientQueryGathering = new TableEvent(masterTable);
            this.BeforeLoading = new TableEvent(masterTable);
            this.LoadingError = new TableEvent(masterTable);
            this.ColumnsCreation = new TableEvent(masterTable);
            this.DataReceived = new TableEvent(masterTable);
            this.AfterLoading = new TableEvent(masterTable);
            this.BeforeLayoutRendered = new TableEvent(masterTable);
            this.BeforeClientDataProcessing = new TableEvent(masterTable);
            this.AfterClientDataProcessing = new TableEvent(masterTable);
            this.BeforeLayoutRendered = new TableEvent(masterTable);
            this.AfterLayoutRendered = new TableEvent(masterTable);
            this.BeforeDataRendered = new TableEvent(masterTable);
            this.AfterDataRendered = new TableEvent(masterTable);
            this.BeforeClientRowsRendering = new TableEvent(masterTable);
        }
        /**
         * Registers new event for events manager.
         * This method is to be used by plugins to provide their
         * own events.
         *
         * Events being added should be described in plugin's .d.ts file
         * as extensions to Events manager
         * @param eventName Event name
         * @returns {}
         */
        EventsManager.prototype.registerEvent = function (eventName) {
            this[eventName] = new TableEvent(this._masterTable);
        };
        return EventsManager;
    })();
    PowerTables.EventsManager = EventsManager;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var EventsDelegatator = (function () {
        function EventsDelegatator(locator, bodyElement, layoutElement, rootId) {
            this._outSubscriptions = {};
            this._cellDomSubscriptions = {};
            this._rowDomSubscriptions = {};
            this._domEvents = {};
            this._outEvents = {};
            this._locator = locator;
            this._bodyElement = bodyElement;
            this._layoutElement = layoutElement;
            this._rootId = rootId;
            this._attachFn = document['addEventListener'] || document['attachEvent'];
            this._matches = (function (el) {
                if (!el)
                    return null;
                var p = el.prototype;
                return (p.matches || p.matchesSelector || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector);
            }(Element));
        }
        EventsDelegatator.prototype.ensureEventSubscription = function (eventId) {
            var fn = this.onTableEvent.bind(this);
            this._attachFn.call(this._bodyElement, eventId, fn);
            this._domEvents[eventId] = fn;
        };
        EventsDelegatator.prototype.ensureOutSubscription = function (eventId) {
            var fn = this.onOutTableEvent.bind(this);
            this._attachFn.call(this._layoutElement, eventId, fn);
            this._outEvents[eventId] = fn;
        };
        EventsDelegatator.prototype.traverseAndFire = function (subscriptions, path, args) {
            for (var i = 0; i < subscriptions.length; i++) {
                if (subscriptions[i].Selector) {
                    for (var j = 0; j < path.length; j++) {
                        if (this._matches.call(path[j], "#" + this._rootId + " " + subscriptions[i].Selector)) {
                            subscriptions[i].Handler(args);
                            break;
                        }
                    }
                }
                else {
                    subscriptions[i].Handler(args);
                }
            }
        };
        EventsDelegatator.prototype.onTableEvent = function (e) {
            var t = (e.target || e.srcElement), eventType = e.type;
            var forRow = this._rowDomSubscriptions[eventType];
            var forCell = this._cellDomSubscriptions[eventType];
            if (!forRow)
                forRow = [];
            if (!forCell)
                forCell = [];
            if (forRow.length === 0 && forCell.length === 0)
                return;
            var pathToCell = [];
            var pathToRow = [];
            var cellLocation = null, rowIndex = null;
            while (t !== this._bodyElement) {
                if (this._locator.isCell(t))
                    cellLocation = PowerTables.TrackHelper.getCellLocation(t);
                if (this._locator.isRow(t))
                    rowIndex = PowerTables.TrackHelper.getRowIndex(t);
                if (cellLocation == null)
                    pathToCell.push(t);
                if (rowIndex == null)
                    pathToRow.push(t);
                t = t.parentElement;
            }
            if (cellLocation != null) {
                var cellArgs = {
                    OriginalEvent: e,
                    DisplayingRowIndex: cellLocation.RowIndex,
                    ColumnIndex: cellLocation.ColumnIndex
                };
                this.traverseAndFire(forCell, pathToCell, cellArgs);
            }
            if (rowIndex != null) {
                var rowArgs = {
                    OriginalEvent: e,
                    DisplayingRowIndex: rowIndex
                };
                this.traverseAndFire(forRow, pathToRow, rowArgs);
            }
        };
        /**
         * Subscribe handler to any DOM event happening on particular table cell
         *
         * @param subscription Event subscription
         */
        EventsDelegatator.prototype.subscribeCellEvent = function (subscription) {
            if (!this._cellDomSubscriptions[subscription.EventId]) {
                this._cellDomSubscriptions[subscription.EventId] = [];
            }
            this._cellDomSubscriptions[subscription.EventId].push(subscription);
            this.ensureEventSubscription(subscription.EventId);
        };
        /**
         * Subscribe handler to any DOM event happening on particular table row.
         * Note that handler will fire even if particular table cell event happened
         *
         * @param subscription Event subscription
         */
        EventsDelegatator.prototype.subscribeRowEvent = function (subscription) {
            if (!this._rowDomSubscriptions[subscription.EventId]) {
                this._rowDomSubscriptions[subscription.EventId] = [];
            }
            this._rowDomSubscriptions[subscription.EventId].push(subscription);
            this.ensureEventSubscription(subscription.EventId);
        };
        EventsDelegatator.prototype.subscribeEvent = function (el, eventId, handler, receiver, eventArguments) {
            this._attachFn.call(el, eventId, function (e) {
                handler.apply(receiver, [
                    {
                        Element: el,
                        EventObject: e,
                        Receiver: receiver,
                        EventArguments: eventArguments
                    }
                ]);
            });
        };
        EventsDelegatator.prototype.onOutTableEvent = function (e) {
            var subscriptions = this._outSubscriptions[e.type];
            var target = (e.target || e.srcElement);
            for (var i = 0; i < subscriptions.length; i++) {
                var sub = subscriptions[i];
                var ct = target;
                var found = false;
                while (ct !== this._layoutElement) {
                    if (ct === sub.Element) {
                        found = true;
                        break;
                    }
                    ct = ct.parentElement;
                }
                if (!found) {
                    sub.EventObject = e;
                    sub.handler.apply(sub.Receiver, sub);
                }
            }
        };
        EventsDelegatator.prototype.subscribeOutOfElementEvent = function (el, eventId, handler, receiver, eventArguments) {
            this.ensureOutSubscription(eventId);
            if (!this._outSubscriptions.hasOwnProperty(eventId))
                this._outSubscriptions[eventId] = [];
            this._outSubscriptions[eventId].push({
                Element: el,
                EventArguments: eventArguments,
                EventObject: null,
                Receiver: receiver,
                handler: handler
            });
        };
        EventsDelegatator.prototype.unsubscribeOutEvents = function (e) {
            this.unsubscripeParentOutEvents(e);
            for (var os in this._outSubscriptions) {
                if (this._outSubscriptions[os].length === 0) {
                    this._layoutElement.removeEventListener(os, this._outEvents[os]);
                }
            }
        };
        EventsDelegatator.prototype.unsubscripeParentOutEvents = function (e) {
            for (var os in this._outSubscriptions) {
                var sub = this._outSubscriptions[os];
                for (var i = 0; i < sub.length; i++) {
                    if (sub[i].Element === e) {
                        sub.splice(i, 1);
                        break;
                    }
                }
            }
            for (var j = 0; j < e.childElementCount; j++) {
                this.unsubscripeParentOutEvents(e.childNodes.item(j));
            }
        };
        return EventsDelegatator;
    })();
    PowerTables.EventsDelegatator = EventsDelegatator;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * This thing is used to manage instances of columns, plugins etc.
     * It consumes PT configuration as source and provides caller with
     * plugins instances, variable ways to query them and accessing their properties
     */
    var InstanceManager = (function () {
        function InstanceManager(configuration, masterTable, events) {
            /**
             * Dictionary containing current table columns configurations.
             * Key - raw column name. Value - IColumn instance
             */
            this.Columns = {};
            /**
             * Dictionary containing all instances of table plugins.
             * Key - full plugin ID (incl. placement). Value - plugin itself
             */
            this.Plugins = {};
            this._rawColumnNames = [];
            this.Configuration = configuration;
            this._masterTable = masterTable;
            this._events = events;
            this._isHandlingSpecialPlacementCase = !(!this.Configuration.EmptyFiltersPlaceholder);
            this._specialCasePlaceholder = this.Configuration.EmptyFiltersPlaceholder;
            this.initColumns();
        }
        InstanceManager.prototype.initColumns = function () {
            var columns = [];
            for (var i = 0; i < this.Configuration.Columns.length; i++) {
                var cnf = this.Configuration.Columns[i];
                var c = {
                    Configuration: cnf,
                    RawName: cnf.RawColumnName,
                    MasterTable: this._masterTable,
                    Header: null,
                    Order: i,
                    IsDateTime: InstanceManager._datetimeTypes.indexOf(cnf.ColumnType) > -1,
                    IsString: InstanceManager._stringTypes.indexOf(cnf.ColumnType) > -1,
                    IsFloat: InstanceManager._floatTypes.indexOf(cnf.ColumnType) > -1,
                    IsInteger: InstanceManager._integerTypes.indexOf(cnf.ColumnType) > -1,
                    IsBoolean: InstanceManager._booleanTypes.indexOf(cnf.ColumnType) > -1,
                    IsEnum: cnf.IsEnum
                };
                c.Header = {
                    Column: c,
                    renderContent: null,
                    renderElement: null
                };
                this.Columns[c.RawName] = c;
                columns.push(c);
            }
            columns = columns.sort(function (a, b) { return a.Order - b.Order; });
            for (var j = 0; j < columns.length; j++) {
                this._rawColumnNames.push(columns[j].RawName);
            }
        };
        InstanceManager.prototype.initPlugins = function () {
            var pluginsConfiguration = this.Configuration.PluginsConfiguration;
            var specialCases = {};
            var anySpecialCases = false;
            // registering additional events
            for (var j = 0; j < pluginsConfiguration.length; j++) {
                var epConf = pluginsConfiguration[j];
                PowerTables.ComponentsContainer.registerComponentEvents(epConf.PluginId, this._events, this._masterTable);
            }
            // instantiating and initializing plugins
            for (var l = 0; l < pluginsConfiguration.length; l++) {
                var conf = pluginsConfiguration[l];
                var plugin = PowerTables.ComponentsContainer.resolveComponent(conf.PluginId);
                plugin.PluginLocation = (!conf.Placement) ? conf.PluginId : conf.Placement + "-" + conf.PluginId;
                plugin.RawConfig = conf;
                plugin.Order = conf.Order;
                plugin.init(this._masterTable);
                if (this._isHandlingSpecialPlacementCase && this.startsWith(conf.Placement, this._specialCasePlaceholder)) {
                    specialCases[conf.Placement] = plugin;
                    anySpecialCases = true;
                }
                else {
                    this.Plugins[plugin.PluginLocation] = plugin;
                }
            }
            for (var pluginId in pluginsConfiguration) {
                if (pluginsConfiguration.hasOwnProperty(pluginId)) {
                }
            }
            // handling special filters case
            if (this._isHandlingSpecialPlacementCase) {
                if (anySpecialCases) {
                    var columns = this.getUiColumnNames();
                    for (var i = 0; i < columns.length; i++) {
                        var c = columns[i];
                        var id = this._specialCasePlaceholder + "-" + c;
                        var specialPlugin = null;
                        for (var k in specialCases) {
                            if (this.startsWith(k, id)) {
                                specialPlugin = specialCases[k];
                            }
                        }
                        if (specialPlugin == null) {
                            specialPlugin = {
                                PluginLocation: id + "-empty",
                                renderContent: function () { return ''; },
                                Order: 0,
                                RawConfig: null,
                                renderElement: null,
                                init: null
                            };
                        }
                        specialPlugin.Order = i;
                        this.Plugins[specialPlugin.PluginLocation] = specialPlugin;
                    }
                }
            }
            this._events.ColumnsCreation.invoke(this, this.Columns);
        };
        InstanceManager.prototype.startsWith = function (s1, prefix) {
            if (s1 == undefined || s1 === null)
                return false;
            if (prefix.length > s1.length)
                return false;
            if (s1 === prefix)
                return true;
            var part = s1.substring(0, prefix.length);
            return part === prefix;
        };
        InstanceManager.prototype.endsWith = function (s1, postfix) {
            if (s1 == undefined || s1 === null)
                return false;
            if (postfix.length > s1.length)
                return false;
            if (s1 === postfix)
                return true;
            var part = s1.substring(s1.length - postfix.length - 1, postfix.length);
            return part === postfix;
        };
        /**
                 * Reteives plugin at specified placement
                 * @param pluginId Plugin ID
                 * @param placement Pluign placement
                 * @returns {}
                 */
        InstanceManager.prototype.getPlugin = function (pluginId, placement) {
            if (!placement)
                placement = '';
            var key = placement.length === 0 ? pluginId : placement + "-" + pluginId;
            if (this.Plugins[key])
                return (this.Plugins[key]);
            else {
                for (var k in this.Plugins) {
                    if (this.Plugins.hasOwnProperty(k)) {
                        var plg = this.Plugins[k];
                        if (this.startsWith(plg.RawConfig.PluginId, pluginId))
                            return plg;
                    }
                }
            }
            throw new Error("There is no plugin " + pluginId + " on place " + placement);
        };
        /**
         * Retrieves plugins list at specific placement
         *
         * @param placement Plugins placement
         * @returns {}
         */
        InstanceManager.prototype.getPlugins = function (placement) {
            var result = [];
            for (var k in this.Plugins) {
                if (this.Plugins.hasOwnProperty(k)) {
                    var kp = k.substring(0, placement.length);
                    if (kp === placement) {
                        result.push(this.Plugins[k]);
                    }
                }
            }
            result.sort(function (a, b) {
                return a.Order - b.Order;
            });
            return result;
        };
        /**
         * Reteives plugin at specified placement
         * @param pluginId Plugin ID
         * @param placement Pluign placement
         * @returns {}
         */
        InstanceManager.prototype.getColumnFilter = function (columnName) {
            var filterId = "filter-" + columnName;
            for (var k in this.Plugins) {
                if (this.Plugins.hasOwnProperty(k)) {
                    var kp = k.substring(0, filterId.length);
                    if (kp === filterId)
                        return this.Plugins[k];
                }
            }
            throw new Error("There is no filter for " + columnName);
        };
        /**
         * Retrieves sequential columns names in corresponding order
         * @returns {}
         */
        InstanceManager.prototype.getColumnNames = function () {
            return this._rawColumnNames;
        };
        /**
         * Retrieves sequential columns names in corresponding order
         * @returns {}
         */
        InstanceManager.prototype.getUiColumnNames = function () {
            var result = [];
            var uiCol = this.getUiColumns();
            for (var i = 0; i < uiCol.length; i++) {
                result.push(uiCol[i].RawName);
            }
            return result;
        };
        /**
         * Retreives columns suitable for UI rendering in corresponding order
         *
         * @returns {}
         */
        InstanceManager.prototype.getUiColumns = function () {
            var result = [];
            for (var ck in this.Columns) {
                if (this.Columns.hasOwnProperty(ck)) {
                    var col = this.Columns[ck];
                    if (col.Configuration.IsDataOnly)
                        continue;
                    result.push(col);
                }
            }
            result = result.sort(function (a, b) { return a.Order - b.Order; });
            return result;
        };
        /**
         * Retrieves column by its raw name
         *
         * @param columnName Raw column name
         * @returns {}
         */
        InstanceManager.prototype.getColumn = function (columnName) {
            if (!this.Columns.hasOwnProperty(columnName))
                throw new Error("Column " + columnName + " not found for rendering");
            return this.Columns[columnName];
        };
        InstanceManager._datetimeTypes = ['DateTime', 'DateTime?'];
        InstanceManager._stringTypes = ['String'];
        InstanceManager._floatTypes = ['Single', 'Double', 'Decimal', 'Single?', 'Double?', 'Decimal?'];
        InstanceManager._integerTypes = ['Int32', 'Int64', 'Int16', 'SByte', 'Byte', 'UInt32', 'UInt64', 'UInt16', 'Int32?', 'Int64?', 'Int16?', 'SByte?', 'Byte?', 'UInt32?', 'UInt64?', 'UInt16?'];
        InstanceManager._booleanTypes = ['Boolean', 'Boolean?'];
        return InstanceManager;
    })();
    PowerTables.InstanceManager = InstanceManager;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Component that is responsible for querying server
     */
    var Loader = (function () {
        function Loader(staticData, operationalAjaxUrl, events, dataHolder) {
            this._queryPartProviders = [];
            this._isFirstTimeLoading = false;
            this._staticData = staticData;
            this._operationalAjaxUrl = operationalAjaxUrl;
            this._events = events;
            this._dataHolder = dataHolder;
        }
        /**
         * Registers new query part provider to be used while collecting
         * query data before sending it to server.
         *
         * @param provider instance implementing IQueryPartProvider interface
         * @returns {}
         */
        Loader.prototype.registerQueryPartProvider = function (provider) {
            this._queryPartProviders.push(provider);
        };
        Loader.prototype.gatherQuery = function (queryScope) {
            var a = {
                Paging: {
                    PageSize: 0,
                    PageIndex: 0
                },
                Orderings: {},
                Filterings: {},
                AdditionalData: {},
                StaticDataJson: this._staticData
            };
            if (queryScope === PowerTables.QueryScope.Client) {
                this._events.BeforeClientQueryGathering.invoke(this, { Query: a, Scope: queryScope });
            }
            else {
                this._events.BeforeQueryGathering.invoke(this, { Query: a, Scope: queryScope });
            }
            for (var i = 0; i < this._queryPartProviders.length; i++) {
                this._queryPartProviders[i].modifyQuery(a, queryScope);
            }
            if (queryScope === PowerTables.QueryScope.Client) {
                this._events.AfterClientQueryGathering.invoke(this, { Query: a, Scope: queryScope });
            }
            else {
                this._events.AfterQueryGathering.invoke(this, { Query: a, Scope: queryScope });
            }
            return a;
        };
        Loader.prototype.getXmlHttp = function () {
            if (this._previousRequest) {
                this._previousRequest.abort();
                this._previousRequest = null;
            }
            var xmlhttp;
            try {
                xmlhttp = new ActiveXObject('Msxml2.XMLHTTP');
            }
            catch (e) {
                try {
                    xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
                }
                catch (E) {
                    xmlhttp = false;
                }
            }
            if (!xmlhttp && typeof XMLHttpRequest != 'undefined') {
                xmlhttp = new XMLHttpRequest();
            }
            this._previousRequest = xmlhttp;
            return xmlhttp;
        };
        Loader.prototype.checkError = function (json, data, req) {
            if (json['__ZBnpwvibZm'] && json['Success'] != undefined && !json.Success) {
                this._events.LoadingError.invoke(this, {
                    Request: data,
                    XMLHttp: req,
                    Reason: json.Message,
                    StackTrace: json['ExceptionStackTrace']
                });
                return true;
            }
            return false;
        };
        Loader.prototype.handleRegularJsonResponse = function (req, data, clientQuery, callback, errorCallback) {
            var json = JSON.parse(req.responseText);
            var error = this.checkError(json, data, req);
            if (!error) {
                this._events.DataReceived.invoke(this, {
                    Request: data,
                    XMLHttp: req,
                    Data: json
                });
                if (data.Command === 'query') {
                    this._dataHolder.storeResponse(json, clientQuery);
                    callback(json);
                    this._previousQueryString = JSON.stringify(data.Query);
                }
                else {
                    callback(json);
                }
            }
            else {
                if (errorCallback)
                    errorCallback(json);
            }
        };
        Loader.prototype.handleDeferredResponse = function (req, data, callback) {
            if (req.responseText.indexOf('$Token=') === 0) {
                var token = req.responseText.substr(7, req.responseText.length - 7);
                this._events.DeferredDataReceived.invoke(this, {
                    Request: data,
                    XMLHttp: req,
                    Token: token,
                    DataUrl: this._operationalAjaxUrl + '?q=' + token
                });
                callback({ $isDeferred: true, $url: this._operationalAjaxUrl + '?q=' + token, $token: token });
            }
        };
        Loader.prototype.doServerQuery = function (data, clientQuery, callback, errorCallback) {
            var _this = this;
            var dataText = JSON.stringify(data);
            var req = this.getXmlHttp();
            this._events.BeforeLoading.invoke(this, {
                Request: data,
                XMLHttp: req
            });
            req.open('POST', this._operationalAjaxUrl, 1);
            req.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            req.setRequestHeader('Content-type', 'application/json');
            var reqEvent = req.onload ? 'onload' : 'onreadystatechange'; // for IE
            req[reqEvent] = (function () {
                if (req.readyState !== 4)
                    return false;
                if (req.status === 200) {
                    var ctype = req.getResponseHeader('content-type');
                    if (ctype)
                        ctype = ctype.toLowerCase();
                    if (ctype && ctype.indexOf('application/json') >= 0) {
                        _this.handleRegularJsonResponse(req, data, clientQuery, callback, errorCallback);
                    }
                    else if (ctype && ctype.indexOf('lattice/service') >= 0) {
                        _this.handleDeferredResponse(req, data, callback);
                    }
                }
                else {
                    if (req.status === 0)
                        return false; // for IE
                    _this._events.LoadingError.invoke(_this, {
                        Request: data,
                        XMLHttp: req,
                        Reason: 'Network error',
                        StackTrace: 'Unable to connect to server to complete query'
                    });
                }
                _this._events.AfterLoading.invoke(_this, {
                    Request: data,
                    XMLHttp: req
                });
            });
            //req.onabort = (e => {
            //    this.Events.AfterLoading.invoke(this, [this]);
            //});
            //failTimeout = setTimeout(() => { req.abort(); this.Renderer.showError('Network error: network unreacheable'); }, 10000);
            req.send(dataText);
        };
        /**
         * Sends specified request to server and lets table handle it.
         * Always use this method to invoke table's server functionality because this method
         * correctly rises all events, handles errors etc
         *
         * @param command Query command
         * @param callback Callback that will be invoked after data received
         * @param queryModifier Inline query modifier for in-place query modification
         * @param errorCallback Will be called if error occures
         * @returns {}
         */
        Loader.prototype.requestServer = function (command, callback, queryModifier, errorCallback) {
            var scope = PowerTables.QueryScope.Transboundary;
            if (command === 'query')
                scope = PowerTables.QueryScope.Server;
            var serverQuery = this.gatherQuery(scope);
            var clientQuery = null;
            if (command === 'query')
                clientQuery = this.gatherQuery(PowerTables.QueryScope.Client);
            if (queryModifier) {
                queryModifier(serverQuery);
                queryModifier(clientQuery);
            }
            var queriesEqual = (command === 'query') && (JSON.stringify(serverQuery) === this._previousQueryString);
            if (!queriesEqual) {
                var data = {
                    Command: command,
                    Query: serverQuery
                };
                this.doServerQuery(data, clientQuery, callback, errorCallback);
            }
            else {
                this._dataHolder.filterStoredData(clientQuery);
                callback(null);
            }
        };
        return Loader;
    })();
    PowerTables.Loader = Loader;
})(PowerTables || (PowerTables = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var CheckboxifyPlugin = (function (_super) {
            __extends(CheckboxifyPlugin, _super);
            function CheckboxifyPlugin() {
                _super.apply(this, arguments);
                this._selectedItems = [];
                this._visibleAll = false;
                this._allSelected = false;
            }
            CheckboxifyPlugin.prototype.selectAll = function (selected) {
                var _this = this;
                if (!this._canSelectAll)
                    return;
                this._allSelected = selected == null ? !this._allSelected : selected;
                this.redrawHeader();
                this._selectedItems.splice(0, this._selectedItems.length);
                if (this._allSelected) {
                    if (this.Configuration.SelectAllSelectsClientUndisplayedData) {
                        for (var i = 0; i < this.MasterTable.DataHolder.StoredData.length; i++) {
                            this._selectedItems.push(this.MasterTable.DataHolder.StoredData[i][this._valueColumnName].toString());
                        }
                        this.MasterTable.Events.SelectionChanged.invoke(this, this._selectedItems);
                        this.MasterTable.Controller.redrawVisibleData();
                    }
                    else if (this.Configuration.SelectAllSelectsServerUndisplayedData) {
                        this.MasterTable.Loader.requestServer('checkboxify_all', function (data) {
                            _this._selectedItems = data;
                            _this.MasterTable.Events.SelectionChanged.invoke(_this, _this._selectedItems);
                            _this.MasterTable.Controller.redrawVisibleData();
                        });
                    }
                    else {
                        for (var j = 0; j < this.MasterTable.DataHolder.DisplayedData.length; j++) {
                            this._selectedItems.push(this.MasterTable.DataHolder.DisplayedData[j][this._valueColumnName].toString());
                        }
                        this.MasterTable.Events.SelectionChanged.invoke(this, this._selectedItems);
                        this.MasterTable.Controller.redrawVisibleData();
                    }
                }
                else {
                    this.MasterTable.Events.SelectionChanged.invoke(this, this._selectedItems);
                    this.MasterTable.Controller.redrawVisibleData();
                }
            };
            CheckboxifyPlugin.prototype.redrawHeader = function () {
                this.MasterTable.Renderer.Modifier.redrawHeader(this._ourColumn);
            };
            CheckboxifyPlugin.prototype.createColumn = function () {
                var _this = this;
                var conf = {
                    IsDataOnly: false,
                    IsEnum: false,
                    IsNullable: false,
                    RawColumnName: '_checkboxify',
                    CellRenderingTemplateId: null,
                    CellRenderingValueFunction: null,
                    Title: 'Checkboxify',
                    ColumnType: 'Int32'
                };
                var col = {
                    Configuration: conf,
                    Header: null,
                    IsBoolean: false,
                    IsDateTime: false,
                    IsEnum: false,
                    IsFloat: false,
                    IsInteger: false,
                    IsString: false,
                    MasterTable: this.MasterTable,
                    Order: -1,
                    RawName: '_checkboxify'
                };
                var header = {
                    Column: col,
                    renderContent: null,
                    renderElement: function (tp) { return tp.getCachedTemplate('checkboxifySelectAll')({ IsAllSelected: _this._allSelected, CanSelectAll: _this._canSelectAll }); },
                    selectAllEvent: function (e) { return _this.selectAll(); }
                };
                col.Header = header;
                this.MasterTable.Renderer.ContentRenderer.cacheColumnRenderingFunction(col, function (x) {
                    var value = x.DataObject[_this._valueColumnName].toString();
                    var selected = _this._selectedItems.indexOf(value) > -1;
                    var canCheck = _this.canCheck(x.DataObject, x.Row);
                    return _this.MasterTable.Renderer.getCachedTemplate('checkboxifyCell')({ Value: value, IsChecked: selected, CanCheck: canCheck });
                });
                return col;
            };
            CheckboxifyPlugin.prototype.canCheck = function (dataObject, row) {
                return dataObject != null && !row.IsSpecial;
            };
            CheckboxifyPlugin.prototype.getSelection = function () {
                return this._selectedItems;
            };
            CheckboxifyPlugin.prototype.selectByRowIndex = function (rowIndex) {
                var displayedLookup = this.MasterTable.DataHolder.localLookupDisplayedData(rowIndex);
                var v = displayedLookup.DataObject[this._valueColumnName].toString();
                var idx = this._selectedItems.indexOf(v);
                var overrideRow = false;
                if (idx > -1) {
                    this._selectedItems.splice(idx, 1);
                    this._allSelected = false;
                }
                else {
                    this._selectedItems.push(v);
                    overrideRow = true;
                    this._allSelected = this.MasterTable.DataHolder.DisplayedData.length === this._selectedItems.length;
                }
                this.redrawHeader();
                var row = this.MasterTable.Controller.produceRow(displayedLookup.DataObject, displayedLookup.DisplayedIndex);
                if (overrideRow) {
                    row.renderElement = function (e) { return e.getCachedTemplate('checkboxifyRow')(row); };
                }
                this.MasterTable.Events.SelectionChanged.invoke(this, this._selectedItems);
                this.MasterTable.Renderer.Modifier.redrawRow(row);
            };
            CheckboxifyPlugin.prototype.afterLayoutRender = function () {
                var _this = this;
                this.MasterTable.Renderer.Delegator.subscribeCellEvent({
                    EventId: 'click',
                    Selector: '[data-checkboxify]',
                    SubscriptionId: 'checkboxify',
                    Handler: function (e) {
                        _this.selectByRowIndex(e.DisplayingRowIndex);
                    }
                });
            };
            CheckboxifyPlugin.prototype.beforeRowsRendering = function (e) {
                for (var i = 0; i < e.EventArgs.length; i++) {
                    var row = e.EventArgs[i];
                    if (row.IsSpecial)
                        continue;
                    if (this._selectedItems.indexOf(row.DataObject[this._valueColumnName].toString()) > -1) {
                        row.renderElement = function (e) { return e.getCachedTemplate('checkboxifyRow')(row); };
                    }
                }
            };
            CheckboxifyPlugin.prototype.enableSelectAll = function (enabled) {
                var prev = this._canSelectAll;
                if (!this.Configuration.EnableSelectAll)
                    this._canSelectAll = false;
                else
                    this._canSelectAll = enabled;
                if (prev !== this._canSelectAll) {
                    this.redrawHeader();
                }
            };
            CheckboxifyPlugin.prototype.onClientReload = function (e) {
                if (this.Configuration.ResetOnClientReload) {
                    this.selectAll(false);
                }
                if (this.Configuration.SelectAllOnlyIfAllData) {
                    if (e.EventArgs.Displaying.length === e.EventArgs.Source.length)
                        this.enableSelectAll(true);
                    else
                        this.enableSelectAll(false);
                }
                else {
                    this.enableSelectAll(true);
                }
            };
            CheckboxifyPlugin.prototype.onServerReload = function (e) {
                if (this.Configuration.ResetOnReload) {
                    this.selectAll(false);
                }
            };
            CheckboxifyPlugin.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                var col = this.createColumn();
                this.MasterTable.InstanceManager.Columns['_checkboxify'] = col;
                this._ourColumn = col;
                this._valueColumnName = this.Configuration.SelectionColumnName;
                this._canSelectAll = this.Configuration.EnableSelectAll;
            };
            CheckboxifyPlugin.prototype.modifyQuery = function (query, scope) {
                query.AdditionalData['Selection'] = this._selectedItems.join('|');
                query.AdditionalData['SelectionColumn'] = this._valueColumnName;
            };
            CheckboxifyPlugin.registerEvents = function (e, masterTable) {
                e['SelectionChanged'] = new PowerTables.TableEvent(masterTable);
            };
            CheckboxifyPlugin.prototype.subscribe = function (e) {
                e.AfterLayoutRendered.subscribe(this.afterLayoutRender.bind(this), 'checkboxify');
                e.BeforeClientRowsRendering.subscribe(this.beforeRowsRendering.bind(this), 'checkboxify');
                e.AfterClientDataProcessing.subscribe(this.onClientReload.bind(this), 'checkboxify');
                e.DataReceived.subscribe(this.onServerReload.bind(this), 'checkboxify');
            };
            return CheckboxifyPlugin;
        })(Plugins.PluginBase);
        Plugins.CheckboxifyPlugin = CheckboxifyPlugin;
        PowerTables.ComponentsContainer.registerComponent('Checkboxify', CheckboxifyPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Editor = (function () {
            function Editor() {
            }
            Editor.prototype.notifyChanged = function (editor) {
            };
            return Editor;
        })();
        Plugins.Editor = Editor;
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Editors;
        (function (Editors) {
            var CellEditorBase = (function (_super) {
                __extends(CellEditorBase, _super);
                function CellEditorBase() {
                    _super.apply(this, arguments);
                }
                /**
                 * Retrieves original value for this particular cell editor
                 *
                 * @returns {Any} Original, unchanged value
                 */
                CellEditorBase.prototype.getThisOriginalValue = function () {
                    return this.OriginalDataObject[this.Column.RawName];
                };
                /**
                 * Resets editor value to initial settings
                 */
                CellEditorBase.prototype.reset = function () {
                    this.setValue(this.getThisOriginalValue());
                };
                /**
                 * Returns entered editor value
                 *
                 * @returns {}
                 */
                CellEditorBase.prototype.getValue = function () { throw new Error("Not implemented"); };
                /**
                 * Sets editor value from the outside
                 */
                CellEditorBase.prototype.setValue = function (value) { throw new Error("Not implemented"); };
                /**
                 * Validates entered value and returns set of error messages
                 * or null if entered value is valid
                 *
                 * @returns {Array} Array of
                 */
                CellEditorBase.prototype.validate = function () { return []; };
                /**
                 * Template-bound event raising on changing this editor's value
                 */
                CellEditorBase.prototype.changed = function (e) {
                    this.Editor.notifyChanged(this);
                };
                /**
                 * Event handler for commit (save edited, ok, submit etc) event raised from inside of CellEditor
                 * Commit leads to validation. Cell editor should be notified
                 */
                CellEditorBase.prototype.commitHandler = function (e) { };
                /**
                 * Event handler for reject (cancel editing) event raised from inside of CellEditor
                 * Cell editor should be notified
                 */
                CellEditorBase.prototype.rejectHandler = function (e) { };
                return CellEditorBase;
            })(Plugins.PluginBase);
            Editors.CellEditorBase = CellEditorBase;
        })(Editors = Plugins.Editors || (Plugins.Editors = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        /**
         * Base class for creating filters
         */
        var FilterBase = (function (_super) {
            __extends(FilterBase, _super);
            function FilterBase() {
                _super.apply(this, arguments);
            }
            FilterBase.prototype.modifyQuery = function (query, scope) { };
            FilterBase.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                this.MasterTable.Loader.registerQueryPartProvider(this);
            };
            /**
             * Call this method inside init and override filterPredicate method to make this filter
             * participate in client-side filtering
             */
            FilterBase.prototype.itIsClientFilter = function () {
                this.MasterTable.DataHolder.registerClientFilter(this);
            };
            FilterBase.prototype.filterPredicate = function (rowObject, query) { throw new Error('Please override this method'); };
            return FilterBase;
        })(Plugins.PluginBase);
        Plugins.FilterBase = FilterBase;
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var FormwatchPlugin = (function (_super) {
            __extends(FormwatchPlugin, _super);
            function FormwatchPlugin() {
                _super.apply(this, arguments);
                this._existingValues = {};
                this._filteringExecuted = {};
                this._timeouts = {};
            }
            FormwatchPlugin.prototype.modifyQuery = function (query, scope) {
                var result = {};
                for (var i = 0; i < this.Configuration.FieldsConfiguration.length; i++) {
                    var fieldConf = this.Configuration.FieldsConfiguration[i];
                    var value = null;
                    var name = fieldConf.FieldJsonName;
                    if (fieldConf.ConstantValue) {
                        value = fieldConf.ConstantValue;
                    }
                    else {
                        if (fieldConf.FieldValueFunction) {
                            value = fieldConf.FieldValueFunction();
                        }
                        else {
                            var element = document.querySelector(fieldConf.FieldSelector);
                            if (element) {
                                if (element.type === 'select-multiple') {
                                    var o = element;
                                    value = [];
                                    for (var k = 0; k < o.options.length; k++) {
                                        if (o.options[k].selected)
                                            value.push(o.options[k].value);
                                    }
                                }
                                else if (element.type === 'checkbox') {
                                    value = element.checked;
                                }
                                else {
                                    if (fieldConf.IsDateTime) {
                                        value = this.MasterTable.Date.getDateFromDatePicker(element);
                                        if (!this.MasterTable.Date.isValidDate(value)) {
                                            value = this.MasterTable.Date.parse(element.value);
                                            if (!this.MasterTable.Date.isValidDate(value)) {
                                                value = null;
                                            }
                                        }
                                    }
                                    else {
                                        value = element.value;
                                    }
                                }
                            }
                        }
                        if (fieldConf.SetConstantIfNotSupplied && !value) {
                            value = fieldConf.ConstantValue;
                        }
                    }
                    result[name] = value;
                }
                for (var fm in this.Configuration.FiltersMappings) {
                    if (this.Configuration.FiltersMappings.hasOwnProperty(fm)) {
                        var mappingConf = this.Configuration.FiltersMappings[fm];
                        var needToApply = (mappingConf.ForClient && mappingConf.ForServer)
                            || (mappingConf.ForClient && scope === PowerTables.QueryScope.Client)
                            || (mappingConf.ForServer && scope === PowerTables.QueryScope.Server)
                            || (scope === PowerTables.QueryScope.Transboundary);
                        if (needToApply) {
                            switch (mappingConf.FilterType) {
                                case 0:
                                    query.Filterings[fm] = result[mappingConf.FieldKeys[0]];
                                    break;
                                case 1:
                                    if (mappingConf.FieldKeys.length === 1 && (Object.prototype.toString.call(result[mappingConf[0]]) === '[object Array]')) {
                                        query.Filterings[fm] = result[mappingConf[0]][0] + "|" + result[mappingConf[0]][1];
                                    }
                                    else {
                                        query.Filterings[fm] = result[mappingConf.FieldKeys[0]] + "|" + result[mappingConf.FieldKeys[1]];
                                    }
                                    break;
                                case 2:
                                    if (mappingConf.FieldKeys.length === 1 && (Object.prototype.toString.call(result[mappingConf[0]]) === '[object Array]')) {
                                        query.Filterings[fm] = result[mappingConf[0]].join('|');
                                    }
                                    else {
                                        var values = [];
                                        for (var m = 0; m < mappingConf.FieldKeys.length; m++) {
                                            values.push(result[mappingConf.FieldKeys[m]]);
                                        }
                                        query.Filterings[fm] = values.join('|');
                                    }
                                    break;
                            }
                        }
                    }
                }
                if (this.Configuration.DoNotEmbed)
                    return;
                var str = JSON.stringify(result);
                query.AdditionalData['Formwatch'] = str;
            };
            FormwatchPlugin.prototype.subscribe = function (e) {
                var _this = this;
                for (var i = 0; i < this.Configuration.FieldsConfiguration.length; i++) {
                    var conf = this.Configuration.FieldsConfiguration[i];
                    if (conf.TriggerSearchOnEvents && conf.TriggerSearchOnEvents.length > 0) {
                        var element = document.querySelector(conf.FieldSelector);
                        for (var j = 0; j < conf.TriggerSearchOnEvents.length; j++) {
                            var evtToTrigger = conf.TriggerSearchOnEvents[j];
                            element.addEventListener(evtToTrigger, (function (c, el) { return function (evt) {
                                _this.fieldChange(c.FieldSelector, c.SearchTriggerDelay, el, evt);
                            }; })(conf, element));
                            if (conf.AutomaticallyAttachDatepicker) {
                                this.MasterTable.Date.createDatePicker(element);
                            }
                        }
                        this._existingValues[conf.FieldSelector] = element.value;
                    }
                }
            };
            FormwatchPlugin.prototype.fieldChange = function (fieldSelector, delay, element, e) {
                var _this = this;
                if (this._filteringExecuted[fieldSelector])
                    return;
                if (element.value === this._existingValues[fieldSelector]) {
                    return;
                }
                this._existingValues[fieldSelector] = element.value;
                if (delay > 0) {
                    if (this._timeouts[fieldSelector])
                        clearTimeout(this._timeouts[fieldSelector]);
                    this._timeouts[fieldSelector] = setTimeout(function () {
                        _this._filteringExecuted[fieldSelector] = true;
                        _this.MasterTable.Controller.reload();
                        _this._filteringExecuted[fieldSelector] = false;
                    }, delay);
                }
                else {
                    this._filteringExecuted[fieldSelector] = true;
                    this.MasterTable.Controller.reload();
                    this._filteringExecuted[fieldSelector] = false;
                }
            };
            FormwatchPlugin.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                this.MasterTable.Loader.registerQueryPartProvider(this);
            };
            return FormwatchPlugin;
        })(Plugins.PluginBase);
        Plugins.FormwatchPlugin = FormwatchPlugin;
        PowerTables.ComponentsContainer.registerComponent('Formwatch', FormwatchPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var HideoutPlugin = (function (_super) {
            __extends(HideoutPlugin, _super);
            function HideoutPlugin() {
                _super.apply(this, arguments);
                this.ColumnStates = [];
                this._columnStates = {};
                this._isInitializing = true;
            }
            HideoutPlugin.prototype.isColumnVisible = function (columnName) {
                return this.isColumnInstanceVisible(this.MasterTable.InstanceManager.Columns[columnName]);
            };
            HideoutPlugin.prototype.isColumnInstanceVisible = function (col) {
                if (!col)
                    return true;
                return this._columnStates[col.RawName].Visible;
            };
            HideoutPlugin.prototype.hideColumnByName = function (rawColname) {
                this.hideColumnInstance(this.MasterTable.InstanceManager.Columns[rawColname]);
            };
            HideoutPlugin.prototype.showColumnByName = function (rawColname) {
                this.showColumnInstance(this.MasterTable.InstanceManager.Columns[rawColname]);
            };
            //#region Events handling
            HideoutPlugin.prototype.toggleColumn = function (e) {
                this.toggleColumnByName(e.EventArguments[0]);
            };
            HideoutPlugin.prototype.showColumn = function (e) {
                this.showColumnByName(e.EventArguments[0]);
            };
            HideoutPlugin.prototype.hideColumn = function (e) {
                this.hideColumnByName(e.EventArguments[0]);
            };
            //#endregion
            //#region Correct showing/hiding
            //#endregion
            HideoutPlugin.prototype.toggleColumnByName = function (columnName) {
                if (this.isColumnVisible(columnName)) {
                    this.hideColumnByName(columnName);
                    return false;
                }
                else {
                    this.showColumnByName(columnName);
                    return true;
                }
            };
            HideoutPlugin.prototype.modifyQuery = function (query, scope) {
                var hidden = '';
                var shown = '';
                for (var i = 0; i < this.ColumnStates.length; i++) {
                    if (!this.ColumnStates[i].Visible) {
                        hidden = hidden + ',' + this.ColumnStates[i].RawName;
                    }
                    else {
                        shown = shown + ',' + this.ColumnStates[i].RawName;
                    }
                }
                query.AdditionalData['HideoutHidden'] = hidden;
                query.AdditionalData['HideoutShown'] = shown;
            };
            HideoutPlugin.prototype.hideColumnInstance = function (c) {
                if (!c)
                    return;
                this._columnStates[c.RawName].Visible = false;
                this._columnStates[c.RawName].DoesNotExists = false;
                this.MasterTable.Renderer.Modifier.hideHeader(c);
                this.MasterTable.Renderer.Modifier.hidePluginsByPosition("filter-" + c.RawName);
                if (this._isInitializing)
                    return;
                this.MasterTable.Renderer.Modifier.hideCellsByColumn(c);
                if (this.Configuration.ColumnInitiatingReload.indexOf(c.RawName) > -1)
                    this.MasterTable.Controller.reload();
                this.MasterTable.Renderer.Modifier.redrawPlugin(this);
            };
            HideoutPlugin.prototype.showColumnInstance = function (c) {
                if (!c)
                    return;
                this._columnStates[c.RawName].Visible = true;
                var wasNotExist = this._columnStates[c.RawName].DoesNotExists;
                this._columnStates[c.RawName].DoesNotExists = false;
                this.MasterTable.Renderer.Modifier.showHeader(c);
                this.MasterTable.Renderer.Modifier.showPluginsByPosition("filter-" + c.RawName);
                if (this._isInitializing)
                    return;
                if (wasNotExist) {
                    if (this.Configuration.ColumnInitiatingReload.indexOf(c.RawName) > -1) {
                        this.MasterTable.Controller.reload();
                    }
                    else {
                        this.MasterTable.Controller.redrawVisibleData();
                        ;
                    }
                }
                else {
                    this.MasterTable.Renderer.Modifier.showCellsByColumn(c);
                    if (this.Configuration.ColumnInitiatingReload.indexOf(c.RawName) > -1) {
                        this.MasterTable.Controller.reload();
                    }
                }
                this.MasterTable.Renderer.Modifier.redrawPlugin(this);
            };
            HideoutPlugin.prototype.onBeforeDataRendered = function () {
                for (var i = 0; i < this.ColumnStates.length; i++) {
                    var col = this.MasterTable.InstanceManager.Columns[this.ColumnStates[i].RawName];
                    if (!this.ColumnStates[i].Visible) {
                        col.Configuration.IsDataOnly = true;
                    }
                    else {
                        col.Configuration.IsDataOnly = false;
                    }
                }
            };
            HideoutPlugin.prototype.onDataRendered = function () {
                for (var i = 0; i < this.ColumnStates.length; i++) {
                    if (!this.ColumnStates[i].Visible)
                        this.ColumnStates[i].DoesNotExists = true;
                }
                this.MasterTable.Renderer.Modifier.redrawPlugin(this);
            };
            HideoutPlugin.prototype.onLayourRendered = function () {
                for (var j = 0; j < this.ColumnStates.length; j++) {
                    if (this.Configuration.HiddenColumns[this.ColumnStates[j].RawName]) {
                        this.hideColumnByName(this.ColumnStates[j].RawName);
                    }
                }
                this._isInitializing = false;
            };
            HideoutPlugin.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                this.MasterTable.Loader.registerQueryPartProvider(this);
                for (var i = 0; i < this.Configuration.HideableColumnsNames.length; i++) {
                    var hideable = this.Configuration.HideableColumnsNames[i];
                    var col = this.MasterTable.InstanceManager.Columns[hideable];
                    var instanceInfo = {
                        DoesNotExists: false,
                        Visible: true,
                        RawName: hideable,
                        Name: col.Configuration.Title
                    };
                    if (col.Configuration.IsDataOnly) {
                        throw new Error("Column " + col.RawName + " is .DataOnly but\nincluded into hideable columns list.\n.DataOnly columns are invalid for Hideout plugin. Please remove it from selectable columns list");
                    }
                    this._columnStates[hideable] = instanceInfo;
                    this.ColumnStates.push(instanceInfo);
                }
            };
            HideoutPlugin.prototype.renderContent = function (templatesProvider) {
                return templatesProvider.getCachedTemplate('hideout')(this);
            };
            HideoutPlugin.prototype.subscribe = function (e) {
                e.AfterDataRendered.subscribe(this.onDataRendered.bind(this), 'hideout');
                e.BeforeDataRendered.subscribe(this.onBeforeDataRendered.bind(this), 'hideout');
                e.AfterLayoutRendered.subscribe(this.onLayourRendered.bind(this), 'hideout');
            };
            return HideoutPlugin;
        })(Plugins.PluginBase);
        Plugins.HideoutPlugin = HideoutPlugin;
        PowerTables.ComponentsContainer.registerComponent('Hideout', HideoutPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var LimitPlugin = (function (_super) {
            __extends(LimitPlugin, _super);
            function LimitPlugin() {
                _super.apply(this, arguments);
                this._limitSize = 0;
                this.Sizes = [];
            }
            LimitPlugin.prototype.renderContent = function (templatesProvider) {
                return templatesProvider.getCachedTemplate('limit')(this);
            };
            LimitPlugin.prototype.changeLimitHandler = function (e) {
                var limit = parseInt(e.EventArguments[0]);
                if (isNaN(limit))
                    limit = 0;
                this.changeLimit(limit);
            };
            LimitPlugin.prototype.changeLimit = function (limit) {
                var changed = this._limitSize !== limit;
                if (!changed)
                    return;
                this._limitSize = limit;
                var labelPair = null;
                for (var i = 0; i < this.Sizes.length; i++) {
                    labelPair = this.Sizes[i];
                    if (labelPair.Value === limit) {
                        break;
                    }
                }
                if (labelPair != null)
                    this.SelectedValue = labelPair.Label;
                this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                if (this.Configuration.ReloadTableOnLimitChange)
                    this.MasterTable.Controller.reload();
            };
            LimitPlugin.prototype.modifyQuery = function (query, scope) {
                var client = this.Configuration.EnableClientLimiting;
                if (client && (scope === PowerTables.QueryScope.Client || scope === PowerTables.QueryScope.Transboundary)) {
                    query.Paging.PageSize = this._limitSize;
                }
                if (!client && (scope === PowerTables.QueryScope.Server || scope === PowerTables.QueryScope.Transboundary)) {
                    query.Paging.PageSize = this._limitSize;
                }
            };
            LimitPlugin.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                var def = null;
                for (var i = 0; i < this.Configuration.LimitValues.length; i++) {
                    var a = {
                        Value: this.Configuration.LimitValues[i],
                        Label: this.Configuration.LimitLabels[i],
                        IsSeparator: this.Configuration.LimitLabels[i] === '-'
                    };
                    this.Sizes.push(a);
                    if (a.Label === this.Configuration.DefaultValue) {
                        def = a;
                    }
                }
                if (def) {
                    this.SelectedValue = def.Label;
                    this._limitSize = def.Value;
                }
                else {
                    this._limitSize = 0;
                }
                if (this.Configuration.EnableClientLimiting) {
                    this.MasterTable.DataHolder.EnableClientTake = true;
                }
                this.MasterTable.Events.ColumnsCreation.subscribe(this.onColumnsCreation.bind(this), 'paging');
            };
            LimitPlugin.prototype.onColumnsCreation = function () {
                if (this.Configuration.EnableClientLimiting && !this.MasterTable.DataHolder.EnableClientSkip) {
                    var paging = null;
                    try {
                        paging = this.MasterTable.InstanceManager.getPlugin('Paging');
                    }
                    catch (a) {
                    }
                    if (paging != null)
                        throw new Error('Limit ang paging plugin must both work locally or both remote. Please enable client paging');
                }
            };
            return LimitPlugin;
        })(Plugins.FilterBase);
        Plugins.LimitPlugin = LimitPlugin;
        PowerTables.ComponentsContainer.registerComponent('Limit', LimitPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var LoadingPlugin = (function (_super) {
            __extends(LoadingPlugin, _super);
            function LoadingPlugin() {
                _super.apply(this, arguments);
            }
            LoadingPlugin.prototype.subscribe = function (e) {
                var _this = this;
                e.BeforeLoading.subscribe(function () { return _this.showLoadingIndicator(); }, "loading");
                e.AfterLoading.subscribe(function () { return _this.hideLoadingIndicator(); }, "loading");
                e.AfterLayoutRendered.subscribe(function () {
                    _this.hideLoadingIndicator();
                }, 'loading');
            };
            LoadingPlugin.prototype.showLoadingIndicator = function () {
                this.BlinkElement.style.visibility = 'visible';
            };
            LoadingPlugin.prototype.hideLoadingIndicator = function () {
                this.BlinkElement.style.visibility = 'collapse';
            };
            LoadingPlugin.prototype.renderContent = function (templatesProvider) {
                return templatesProvider.getCachedTemplate('loading')(null);
            };
            LoadingPlugin.Id = 'Loading';
            return LoadingPlugin;
        })(Plugins.PluginBase);
        Plugins.LoadingPlugin = LoadingPlugin;
        PowerTables.ComponentsContainer.registerComponent('Loading', LoadingPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Ordering;
        (function (Ordering) {
            var OrderingPlugin = (function (_super) {
                __extends(OrderingPlugin, _super);
                function OrderingPlugin() {
                    _super.apply(this, arguments);
                    this._clientOrderings = {};
                    this._serverOrderings = {};
                }
                OrderingPlugin.prototype.subscribe = function (e) {
                    var _this = this;
                    e.ColumnsCreation.subscribe(function (v) {
                        _this.overrideHeadersTemplates(v.EventArgs);
                    }, 'ordering');
                };
                OrderingPlugin.prototype.overrideHeadersTemplates = function (columns) {
                    var _this = this;
                    for (var ck in columns) {
                        if (columns.hasOwnProperty(ck)) {
                            var ordering = this.Configuration.DefaultOrderingsForColumns[ck];
                            if (!ordering)
                                continue;
                            var newHeader = {
                                Column: columns[ck],
                                switchOrdering: function (e) {
                                    _this.switchOrderingForColumn(e.Receiver.Column.RawName);
                                },
                                renderElement: function (tpl) { return tpl.getCachedTemplate('ordering')(this); },
                                IsClientOrdering: this.isClient(ck)
                            };
                            this.updateOrdering(ck, ordering);
                            this.specifyOrdering(newHeader, ordering);
                            columns[ck].Header = newHeader;
                        }
                    }
                };
                OrderingPlugin.prototype.updateOrdering = function (columnName, ordering) {
                    if (this.isClient(columnName))
                        this._clientOrderings[columnName] = ordering;
                    else
                        this._serverOrderings[columnName] = ordering;
                };
                OrderingPlugin.prototype.specifyOrdering = function (object, ordering) {
                    object.IsNeutral = object.IsDescending = object.IsAscending = false;
                    switch (ordering) {
                        case PowerTables.Ordering.Neutral:
                            object.IsNeutral = true;
                            break;
                        case PowerTables.Ordering.Descending:
                            object.IsDescending = true;
                            break;
                        case PowerTables.Ordering.Ascending:
                            object.IsAscending = true;
                            break;
                    }
                };
                OrderingPlugin.prototype.isClient = function (columnName) {
                    return this.Configuration.ClientSortableColumns.hasOwnProperty(columnName);
                };
                OrderingPlugin.prototype.switchOrderingForColumn = function (columnName) {
                    if (!this.Configuration.DefaultOrderingsForColumns[columnName])
                        throw new Error("Ordering is not configured for column " + columnName);
                    var orderingsCollection = this.isClient(columnName) ? this._clientOrderings : this._serverOrderings;
                    var next = this.nextOrdering(orderingsCollection[columnName]);
                    this.setOrderingForColumn(columnName, next);
                };
                OrderingPlugin.prototype.setOrderingForColumn = function (columnName, ordering) {
                    var coolHeader = this.MasterTable.InstanceManager.Columns[columnName].Header;
                    this.specifyOrdering(coolHeader, ordering);
                    this.updateOrdering(columnName, ordering);
                    this.MasterTable.Renderer.Modifier.redrawHeader(coolHeader.Column);
                    this.MasterTable.Controller.reload();
                };
                OrderingPlugin.prototype.nextOrdering = function (currentOrdering) {
                    switch (currentOrdering) {
                        case PowerTables.Ordering.Neutral: return PowerTables.Ordering.Ascending;
                        case PowerTables.Ordering.Descending: return PowerTables.Ordering.Neutral;
                        case PowerTables.Ordering.Ascending: return PowerTables.Ordering.Descending;
                    }
                };
                OrderingPlugin.prototype.makeDefaultOrderingFunction = function (fieldName) {
                    var self = this;
                    return (function (field) {
                        return function (a, b) {
                            var x = a[field], y = b[field];
                            if (x === y)
                                return 0;
                            if (x == null || x == undefined)
                                return -1;
                            if (y == null || y == undefined)
                                return 1;
                            if (typeof x === "string") {
                                return x.localeCompare(y);
                            }
                            return (x > y) ? 1 : -1;
                        };
                    })(fieldName);
                };
                OrderingPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    var hasClientOrderings = false;
                    var fn;
                    for (var cls in this.Configuration.ClientSortableColumns) {
                        if (this.Configuration.ClientSortableColumns.hasOwnProperty(cls)) {
                            hasClientOrderings = true;
                            fn = this.Configuration.ClientSortableColumns[cls];
                            if (!fn) {
                                fn = this.makeDefaultOrderingFunction(cls);
                                this.Configuration.ClientSortableColumns[cls] = fn;
                            }
                            this.MasterTable.DataHolder.registerClientOrdering(cls, fn);
                        }
                    }
                    if (hasClientOrderings) {
                        // if we have at least 1 client ordering then we have to reorder whole 
                        // received data on client
                        // to avoid client ordering priority
                        for (var serverColumn in this.Configuration.DefaultOrderingsForColumns) {
                            if (this.isClient(serverColumn))
                                continue;
                            fn = this.makeDefaultOrderingFunction(serverColumn);
                            this.MasterTable.DataHolder.registerClientOrdering(serverColumn, fn);
                        }
                    }
                };
                OrderingPlugin.prototype.mixinOrderings = function (orderingsCollection, query) {
                    for (var clo in orderingsCollection) {
                        if (orderingsCollection.hasOwnProperty(clo)) {
                            query.Orderings[clo] = orderingsCollection[clo];
                        }
                    }
                };
                OrderingPlugin.prototype.modifyQuery = function (query, scope) {
                    this.mixinOrderings(this._serverOrderings, query);
                    if (scope === PowerTables.QueryScope.Client || scope === PowerTables.QueryScope.Transboundary) {
                        this.mixinOrderings(this._clientOrderings, query);
                    }
                };
                return OrderingPlugin;
            })(Plugins.FilterBase);
            Ordering.OrderingPlugin = OrderingPlugin;
            PowerTables.ComponentsContainer.registerComponent('Ordering', OrderingPlugin);
        })(Ordering = Plugins.Ordering || (Plugins.Ordering = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var PagingPlugin = (function (_super) {
            __extends(PagingPlugin, _super);
            function PagingPlugin() {
                _super.apply(this, arguments);
                this._selectedPage = 0;
            }
            PagingPlugin.prototype.CurrentPage = function () { return this._selectedPage + 1; };
            PagingPlugin.prototype.TotalPages = function () { return this._totalPages; };
            PagingPlugin.prototype.PageSize = function () { return this._pageSize; };
            PagingPlugin.prototype.getCurrentPage = function () {
                return this._selectedPage;
            };
            PagingPlugin.prototype.getTotalPages = function () {
                return this._totalPages;
            };
            PagingPlugin.prototype.getPageSize = function () {
                return this._pageSize;
            };
            PagingPlugin.prototype.onFilterGathered = function (e) {
                this._pageSize = e.EventArgs.Query.Paging.PageSize;
            };
            PagingPlugin.prototype.onColumnsCreation = function () {
                if (this.Configuration.EnableClientPaging && !this.MasterTable.DataHolder.EnableClientTake) {
                    var limit = null;
                    try {
                        limit = this.MasterTable.InstanceManager.getPlugin('Limit');
                    }
                    catch (a) { }
                    if (limit != null)
                        throw new Error('Paging ang Limit plugins must both work locally or both remote. Please enable client limiting');
                }
            };
            PagingPlugin.prototype.onResponse = function (e) {
                this._selectedPage = e.EventArgs.Data.PageIndex;
                var tp = e.EventArgs.Data.ResultsCount / this._pageSize;
                if (tp !== parseInt(tp)) {
                    tp = parseInt(tp) + 1;
                }
                this._totalPages = tp;
                this.MasterTable.Renderer.Modifier.redrawPlugin(this);
            };
            PagingPlugin.prototype.onClientDataProcessing = function (e) {
                var tp = e.EventArgs.Filtered.length / this._pageSize;
                if (tp !== parseInt(tp)) {
                    tp = parseInt(tp) + 1;
                }
                if (tp < this._selectedPage) {
                    this._selectedPage = 0;
                }
                this._totalPages = tp;
                this.MasterTable.Renderer.Modifier.redrawPlugin(this);
            };
            PagingPlugin.prototype.goToPage = function (page) {
                this._selectedPage = parseInt(page);
                this.MasterTable.Controller.reload();
            };
            PagingPlugin.prototype.gotoPageClick = function (e) {
                if (this.GotoInput) {
                    var v = this.GotoInput.value;
                    v = (parseInt(v) - 1).toString();
                    this.goToPage(v);
                }
            };
            PagingPlugin.prototype.navigateToPage = function (e) {
                this.goToPage(e.EventArguments[0]);
            };
            PagingPlugin.prototype.nextClick = function (e) {
                if (this._selectedPage < this._totalPages)
                    this.goToPage((this._selectedPage + 1).toString());
            };
            PagingPlugin.prototype.previousClick = function (e) {
                if (this._selectedPage > 0)
                    this.goToPage((this._selectedPage - 1).toString());
            };
            PagingPlugin.prototype.constructPagesElements = function () {
                var a = [];
                var total = this._totalPages;
                var cur = this._selectedPage;
                var pdiff = this.Configuration.PagesToHideUnderPeriod;
                if (total > 1) {
                    this.Shown = true;
                    if (!this.Configuration.ArrowsMode) {
                        if (this.Configuration.UseFirstLastPage)
                            a.push({ Page: 0, First: true });
                        if (cur > 0)
                            a.push({ Page: 0, Prev: true });
                        if (this.Configuration.UsePeriods) {
                            if (cur - 1 >= pdiff)
                                a.push({ Page: 0, Period: true });
                            if (cur - 1 > 0)
                                a.push({ Page: cur - 1, InActivePage: true });
                            a.push({ Page: cur, ActivePage: true });
                            if (cur + 1 < total)
                                a.push({ Page: cur + 1, InActivePage: true });
                            if (total - (cur + 1) >= pdiff)
                                a.push({ Page: 0, Period: true });
                        }
                        else {
                            for (var i = 0; i < total; i++) {
                                if (cur === i) {
                                    a.push({ Page: i, ActivePage: true });
                                }
                                else {
                                    a.push({ Page: i, InActivePage: true });
                                }
                            }
                        }
                        if (cur < total - 1)
                            a.push({ Page: 0, Next: true });
                        if (this.Configuration.UseFirstLastPage)
                            a.push({ Page: total - 1, Last: true });
                        var disFunction = function () { return this.Page + 1; };
                        for (var j = 0; j < a.length; j++) {
                            a[j].DisPage = disFunction;
                        }
                        this.Pages = a;
                    }
                    else {
                        this.NextArrow = cur < total - 1;
                        this.PrevArrow = cur > 0;
                    }
                }
                else {
                    this.Shown = false;
                }
            };
            PagingPlugin.prototype.renderContent = function (templatesProvider) {
                this.constructPagesElements();
                return templatesProvider.getCachedTemplate('paging')(this);
            };
            PagingPlugin.prototype.validateGotopage = function () {
                var v = this.GotoInput.value;
                var i = parseInt(v);
                var valid = !isNaN(i) && (i > 0) && (i <= this._totalPages);
                if (valid) {
                    this.MasterTable.Renderer.Modifier.normalState(this.VisualStates);
                }
                else {
                    this.MasterTable.Renderer.Modifier.changeState("invalid", this.VisualStates);
                }
            };
            PagingPlugin.prototype.modifyQuery = function (query, scope) {
                if (this.Configuration.EnableClientPaging && scope === PowerTables.QueryScope.Client) {
                    query.Paging.PageIndex = this._selectedPage;
                }
                if ((!this.Configuration.EnableClientPaging) && scope !== PowerTables.QueryScope.Client) {
                    query.Paging.PageIndex = this._selectedPage;
                }
            };
            PagingPlugin.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                if (!this.Configuration.EnableClientPaging) {
                    this.MasterTable.Events.AfterQueryGathering.subscribe(this.onFilterGathered.bind(this), 'paging');
                }
                else {
                    this.MasterTable.Events.AfterClientQueryGathering.subscribe(this.onFilterGathered.bind(this), 'paging');
                }
                if (!this.Configuration.EnableClientPaging) {
                    this.MasterTable.Events.DataReceived.subscribe(this.onResponse.bind(this), 'paging');
                }
                else {
                    this.MasterTable.Events.AfterClientDataProcessing.subscribe(this.onClientDataProcessing.bind(this), 'paging');
                }
                this.MasterTable.Events.ColumnsCreation.subscribe(this.onColumnsCreation.bind(this), 'paging');
                if (this.Configuration.EnableClientPaging) {
                    this.MasterTable.DataHolder.EnableClientSkip = true;
                }
            };
            return PagingPlugin;
        })(Plugins.FilterBase);
        Plugins.PagingPlugin = PagingPlugin;
        PowerTables.ComponentsContainer.registerComponent('Paging', PagingPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var PluginBase = (function () {
            function PluginBase() {
                this.afterDrawn = null;
            }
            PluginBase.prototype.init = function (masterTable) {
                this.MasterTable = masterTable;
                this.Configuration = this.RawConfig.Configuration;
                this.subscribe(masterTable.Events);
                this.registerAdditionalHelpers(masterTable.Renderer.HandlebarsInstance);
            };
            /**
             * Events subscription method.
             * In derived class here should be subscription to various events
             *
             * @param e Events manager
             */
            PluginBase.prototype.subscribe = function (e) {
                if (this.afterDrawn != null) {
                    this.MasterTable.Events.AfterLayoutRendered.subscribe(this.afterDrawn.bind(this), this.RawConfig.PluginId);
                }
            };
            /**
             * In this method you can register any additional Handlebars.js helpers in case of your
             * templates needs ones
             *
             * @param hb Handlebars instance
             * @returns {}
             */
            PluginBase.prototype.registerAdditionalHelpers = function (hb) { };
            return PluginBase;
        })();
        Plugins.PluginBase = PluginBase;
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var RangeFilterPlugin = (function (_super) {
            __extends(RangeFilterPlugin, _super);
            function RangeFilterPlugin() {
                var _this = this;
                _super.apply(this, arguments);
                this._filteringIsBeingExecuted = false;
                this._isInitializing = true;
                this.afterDrawn = function (e) {
                    if (_this.Configuration.Hidden)
                        return;
                    if (_this._associatedColumn.IsDateTime) {
                        var fromDate = _this.MasterTable.Date.parse(_this.Configuration.FromValue);
                        var toDate = _this.MasterTable.Date.parse(_this.Configuration.ToValue);
                        _this.MasterTable.Date.putDateToDatePicker(_this.FromValueProvider, fromDate);
                        _this.MasterTable.Date.putDateToDatePicker(_this.ToValueProvider, toDate);
                    }
                    _this._isInitializing = false;
                };
            }
            RangeFilterPlugin.prototype.getFromValue = function () {
                if (!this.FromValueProvider)
                    return '';
                if (this._associatedColumn.IsDateTime) {
                    var date = this.MasterTable.Date.getDateFromDatePicker(this.FromValueProvider);
                    return this.MasterTable.Date.serialize(date);
                }
                return this.FromValueProvider.value;
            };
            RangeFilterPlugin.prototype.getToValue = function () {
                if (!this.ToValueProvider)
                    return '';
                if (this._associatedColumn.IsDateTime) {
                    var date = this.MasterTable.Date.getDateFromDatePicker(this.ToValueProvider);
                    return this.MasterTable.Date.serialize(date);
                }
                return this.ToValueProvider.value;
            };
            RangeFilterPlugin.prototype.handleValueChanged = function () {
                var _this = this;
                if (this._isInitializing)
                    return;
                if (this._filteringIsBeingExecuted)
                    return;
                if ((this._fromPreviousValue === this.getFromValue())
                    && (this._toPreviousValue === this.getToValue()))
                    return;
                this._fromPreviousValue = this.getFromValue();
                this._toPreviousValue = this.getToValue();
                if (this.Configuration.InputDelay > 0) {
                    clearTimeout(this._inpTimeout);
                    this._inpTimeout = setTimeout(function () {
                        _this._filteringIsBeingExecuted = true;
                        _this.MasterTable.Controller.reload();
                        _this._filteringIsBeingExecuted = false;
                    }, this.Configuration.InputDelay);
                }
                else {
                    this._filteringIsBeingExecuted = true;
                    this.MasterTable.Controller.reload();
                    this._filteringIsBeingExecuted = false;
                }
            };
            RangeFilterPlugin.prototype.getFilterArgument = function () {
                var args = [];
                var frm = this.getFromValue();
                var to = this.getToValue();
                args.push(frm);
                args.push(to);
                var result = args.join('|');
                return result;
            };
            RangeFilterPlugin.prototype.modifyQuery = function (query, scope) {
                if (this.Configuration.Hidden)
                    return;
                var val = this.getFilterArgument();
                if (!val || val.length === 0)
                    return;
                if (this.Configuration.ClientFiltering && scope === PowerTables.QueryScope.Client || scope === PowerTables.QueryScope.Transboundary) {
                    query.Filterings[this._associatedColumn.RawName] = val;
                }
                if ((!this.Configuration.ClientFiltering) && scope === PowerTables.QueryScope.Server || scope === PowerTables.QueryScope.Transboundary) {
                    query.Filterings[this._associatedColumn.RawName] = val;
                }
            };
            RangeFilterPlugin.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                if (this.Configuration.ClientFiltering) {
                    this.itIsClientFilter();
                }
                this._associatedColumn = this.MasterTable.InstanceManager.Columns[this.Configuration.ColumnName];
            };
            RangeFilterPlugin.prototype.renderContent = function (templatesProvider) {
                if (this.Configuration.Hidden)
                    return '';
                return templatesProvider.getCachedTemplate('rangeFilter')(this);
            };
            RangeFilterPlugin.prototype.filterPredicate = function (rowObject, query) {
                var fval = query.Filterings[this._associatedColumn.RawName];
                if (!fval)
                    return true;
                var args = fval.split('|');
                var fromValue = args[0];
                var toValue = args[1];
                if (this.Configuration.ClientFilteringFunction) {
                    return this.Configuration.ClientFilteringFunction(rowObject, fromValue, toValue, query);
                }
                var frmEmpty = fromValue.trim().length === 0;
                var toEmpty = toValue.trim().length === 0;
                if (frmEmpty && toEmpty)
                    return true;
                if (!query.Filterings.hasOwnProperty(this._associatedColumn.RawName))
                    return true;
                var objVal = rowObject[this._associatedColumn.RawName];
                if (objVal == null)
                    return false;
                if (this._associatedColumn.IsString) {
                    var str = objVal.toString();
                    return ((frmEmpty) || str.localeCompare(fromValue) >= 0) && ((toEmpty) || str.localeCompare(toValue) <= 0);
                }
                if (this._associatedColumn.IsFloat) {
                    return ((frmEmpty) || objVal >= parseFloat(fromValue)) && ((toEmpty) || objVal <= parseFloat(toValue));
                }
                if (this._associatedColumn.IsInteger || this._associatedColumn.IsEnum) {
                    return ((frmEmpty) || objVal >= parseInt(fromValue)) && ((toEmpty) || objVal <= parseInt(toValue));
                }
                if (this._associatedColumn.IsDateTime) {
                    return ((frmEmpty) || objVal >= this.MasterTable.Date.parse(fromValue)) && ((toEmpty) || objVal <= this.MasterTable.Date.parse(toValue));
                }
                return true;
            };
            return RangeFilterPlugin;
        })(Plugins.FilterBase);
        Plugins.RangeFilterPlugin = RangeFilterPlugin;
        PowerTables.ComponentsContainer.registerComponent('RangeFilter', RangeFilterPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var ResponseInfoPlugin = (function (_super) {
            __extends(ResponseInfoPlugin, _super);
            function ResponseInfoPlugin() {
                _super.apply(this, arguments);
                this._isReadyForRendering = false;
            }
            ResponseInfoPlugin.prototype.onResponse = function (e) {
                this._isServerRequest = true;
                if (this.Configuration.ResponseObjectOverriden) {
                    this._recentData = e.EventArgs.Data.AdditionalData['ResponseInfo'];
                    this._isReadyForRendering = true;
                    this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                }
                else {
                    this._recentServerData = {
                        TotalCount: e.EventArgs.Data.ResultsCount,
                        IsLocalRequest: false,
                        CurrentPage: e.EventArgs.Data.PageIndex,
                        PagingEnabled: this._pagingEnabled
                    };
                }
            };
            ResponseInfoPlugin.prototype.onClientDataProcessed = function (e) {
                if (this.Configuration.ResponseObjectOverriden)
                    return;
                if (!this.Configuration.ClientEvaluationFunction) {
                    this._recentData = {
                        TotalCount: this._recentServerData.TotalCount || this.MasterTable.DataHolder.StoredData.length,
                        IsLocalRequest: !this._isServerRequest,
                        CurrentPage: this._recentServerData.CurrentPage || ((!this._pagingPlugin) ? 0 : this._pagingPlugin.getCurrentPage() + 1),
                        TotalPages: ((!this._pagingPlugin) ? 0 : this._pagingPlugin.getTotalPages()),
                        PagingEnabled: this._pagingEnabled,
                        CurrentlyShown: this.MasterTable.DataHolder.DisplayedData.length
                    };
                }
                else {
                    this._recentData = this.Configuration.ClientEvaluationFunction(e.EventArgs, (!this._pagingPlugin) ? 0 : (this._pagingPlugin.getCurrentPage()), (!this._pagingPlugin) ? 0 : (this._pagingPlugin.getTotalPages()));
                }
                this._isServerRequest = false;
                this._isReadyForRendering = true;
                this.MasterTable.Renderer.Modifier.redrawPlugin(this);
            };
            ResponseInfoPlugin.prototype.renderContent = function (templatesProvider) {
                if (!this._isReadyForRendering)
                    return '';
                if (this.Configuration.ClientTemplateFunction) {
                    return this.Configuration.ClientTemplateFunction(this._recentData);
                }
                else {
                    return this._recentTemplate(this._recentData);
                }
            };
            ResponseInfoPlugin.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                if (this.Configuration.TemplateText && this.Configuration.TemplateText.length > 0) {
                    this._recentTemplate = this.MasterTable.Renderer.HandlebarsInstance.compile(this.Configuration.TemplateText);
                }
                else {
                    this._recentTemplate = this.MasterTable.Renderer.getCachedTemplate('responseInfo');
                }
                this.MasterTable.Events.AfterClientDataProcessing.subscribe(this.onClientDataProcessed.bind(this), 'responseInfo');
                this.MasterTable.Events.DataReceived.subscribe(this.onResponse.bind(this), 'responseInfo');
                try {
                    this._pagingPlugin = this.MasterTable.InstanceManager.getPlugin('Paging');
                    this._pagingEnabled = true;
                }
                catch (v) {
                    this._pagingEnabled = false;
                }
            };
            return ResponseInfoPlugin;
        })(Plugins.PluginBase);
        Plugins.ResponseInfoPlugin = ResponseInfoPlugin;
        PowerTables.ComponentsContainer.registerComponent('ResponseInfo', ResponseInfoPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var SelectFilterPlugin = (function (_super) {
            __extends(SelectFilterPlugin, _super);
            function SelectFilterPlugin() {
                _super.apply(this, arguments);
            }
            SelectFilterPlugin.prototype.getArgument = function () {
                return this.getSelectionArray().join('|');
            };
            SelectFilterPlugin.prototype.getSelectionArray = function () {
                if (!this.FilterValueProvider)
                    return [];
                if (!this.Configuration.IsMultiple) {
                    var selected = this.FilterValueProvider.options[this.FilterValueProvider.selectedIndex];
                    return [selected.value];
                }
                else {
                    var elemValues = [];
                    for (var i = 0, iLen = this.FilterValueProvider.options.length; i < iLen; i++) {
                        var opt = this.FilterValueProvider.options[i];
                        if (opt.selected) {
                            elemValues.push(opt.value);
                        }
                    }
                    return elemValues;
                }
            };
            SelectFilterPlugin.prototype.modifyQuery = function (query, scope) {
                if (this.Configuration.Hidden)
                    return;
                var val = this.getArgument();
                if (!val || val.length === 0)
                    return;
                if (this.Configuration.ClientFiltering && scope === PowerTables.QueryScope.Client || scope === PowerTables.QueryScope.Transboundary) {
                    query.Filterings[this._associatedColumn.RawName] = val;
                }
                if ((!this.Configuration.ClientFiltering) && scope === PowerTables.QueryScope.Server || scope === PowerTables.QueryScope.Transboundary) {
                    query.Filterings[this._associatedColumn.RawName] = val;
                }
            };
            SelectFilterPlugin.prototype.renderContent = function (templatesProvider) {
                if (this.Configuration.Hidden)
                    return '';
                return templatesProvider.getCachedTemplate('selectFilter')(this);
            };
            SelectFilterPlugin.prototype.handleValueChanged = function () {
                this.MasterTable.Controller.reload();
            };
            SelectFilterPlugin.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                this._associatedColumn = this.MasterTable.InstanceManager.Columns[this.Configuration.ColumnName];
                if (this.Configuration.AllowSelectNothing) {
                    var nothingItem = { Value: '', Text: this.Configuration.NothingText || '-', Disabled: false, Selected: false };
                    this.Configuration.Items = [nothingItem].concat(this.Configuration.Items);
                }
                var sv = this.Configuration.SelectedValue;
                if (sv !== undefined && sv !== null) {
                    for (var i = 0; i < this.Configuration.Items.length; i++) {
                        if (this.Configuration.Items[i].Value !== sv) {
                            this.Configuration.Items[i].Selected = false;
                        }
                        else {
                            this.Configuration.Items[i].Selected = true;
                        }
                    }
                }
                if (this.Configuration.ClientFiltering) {
                    this.itIsClientFilter();
                }
            };
            SelectFilterPlugin.prototype.filterPredicate = function (rowObject, query) {
                var fval = query.Filterings[this._associatedColumn.RawName];
                if (!fval)
                    return true;
                var arr = fval.split('|');
                if (this.Configuration.ClientFilteringFunction) {
                    return this.Configuration.ClientFilteringFunction(rowObject, arr, query);
                }
                if (!query.Filterings.hasOwnProperty(this._associatedColumn.RawName))
                    return true;
                var objVal = rowObject[this._associatedColumn.RawName];
                if (objVal == null)
                    return false;
                if (this._associatedColumn.IsString) {
                    return arr.indexOf(objVal) >= 0;
                }
                var single = false;
                if (this._associatedColumn.IsFloat) {
                    arr.map(function (v) {
                        if (parseFloat(v) === objVal)
                            single = true;
                    });
                    return single;
                }
                if (this._associatedColumn.IsInteger || this._associatedColumn.IsEnum) {
                    single = false;
                    arr.map(function (v) {
                        if (parseInt(v) === objVal)
                            single = true;
                    });
                    return single;
                }
                if (this._associatedColumn.IsBoolean) {
                    single = false;
                    arr.map(function (v) {
                        var bv = v.toLocaleUpperCase() === 'TRUE' ? true :
                            v.toLocaleUpperCase() === 'FALSE' ? false : null;
                        if (bv == null) {
                            bv = parseInt(fval) > 0;
                        }
                        if (bv === objVal) {
                            single = true;
                        }
                    });
                    return single;
                }
                return true;
            };
            return SelectFilterPlugin;
        })(Plugins.FilterBase);
        Plugins.SelectFilterPlugin = SelectFilterPlugin;
        PowerTables.ComponentsContainer.registerComponent('SelectFilter', SelectFilterPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var ToolbarPlugin = (function (_super) {
            __extends(ToolbarPlugin, _super);
            function ToolbarPlugin() {
                _super.apply(this, arguments);
                this.AllButtons = {};
                this._buttonsConfig = {};
            }
            ToolbarPlugin.prototype.buttonHandleEvent = function (e) {
                var btnId = e.EventArguments[0];
                this.handleButtonAction(this._buttonsConfig[btnId]);
            };
            ToolbarPlugin.prototype.redrawMe = function () {
                this.MasterTable.Renderer.Modifier.redrawPlugin(this);
            };
            ToolbarPlugin.prototype.handleButtonAction = function (btn) {
                if (btn.OnClick) {
                    btn.OnClick.call(this.MasterTable, this.MasterTable, this.AllButtons[btn.InternalId]);
                }
                if (btn.Command) {
                    var _self = this;
                    // ReSharper disable Lambda
                    var f = function (queryModifier) {
                        if (btn.BlackoutWhileCommand) {
                            btn.IsDisabled = true;
                            _self.redrawMe();
                        }
                        _self.MasterTable.Loader.requestServer(btn.Command, function (response) {
                            if (btn.CommandCallbackFunction) {
                                btn.CommandCallbackFunction.apply(_self.MasterTable, [_self.MasterTable, response]);
                            }
                            else {
                                if (response.$isDeferred && response.$url) {
                                    window.location.href = response.$url;
                                }
                            }
                            if (btn.BlackoutWhileCommand) {
                                btn.IsDisabled = false;
                                _self.redrawMe();
                            }
                        }, queryModifier, function () {
                            if (btn.BlackoutWhileCommand) {
                                btn.IsDisabled = false;
                                _self.redrawMe();
                            }
                        });
                    };
                    // ReSharper restore Lambda
                    if (btn.ConfirmationFunction)
                        btn.ConfirmationFunction.apply(this.MasterTable, [f]);
                    else
                        f();
                }
            };
            ToolbarPlugin.prototype.renderContent = function (templatesProvider) {
                return templatesProvider.getCachedTemplate('toolbar')(this);
            };
            ToolbarPlugin.prototype.traverseButtons = function (arr) {
                for (var i = 0; i < arr.length; i++) {
                    this._buttonsConfig[arr[i].InternalId] = arr[i];
                    if (arr[i].HasSubmenu) {
                        this.traverseButtons(arr[i].Submenu);
                    }
                }
            };
            ToolbarPlugin.prototype.onSelectionChanged = function (e) {
                var atleastOne = false;
                var disabled = e.EventArgs.length === 0;
                for (var bc in this._buttonsConfig) {
                    if (this._buttonsConfig.hasOwnProperty(bc)) {
                        if (this._buttonsConfig[bc].DisableIfNothingChecked) {
                            if (this._buttonsConfig[bc].IsDisabled !== disabled) {
                                atleastOne = true;
                                this._buttonsConfig[bc].IsDisabled = disabled;
                            }
                        }
                    }
                }
                if (atleastOne)
                    this.MasterTable.Renderer.Modifier.redrawPlugin(this);
            };
            ToolbarPlugin.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                try {
                    var p = this.MasterTable.InstanceManager.getPlugin('Checkboxify');
                    var nothingSelected = p.getSelection().length === 0;
                    for (var i = 0; i < this.Configuration.Buttons.length; i++) {
                        if (this.Configuration.Buttons[i].DisableIfNothingChecked) {
                            this.Configuration.Buttons[i].IsDisabled = nothingSelected;
                        }
                    }
                }
                catch (e) {
                }
                this.traverseButtons(this.Configuration.Buttons);
                this.MasterTable.Events.SelectionChanged.subscribe(this.onSelectionChanged.bind(this), 'toolbar');
            };
            return ToolbarPlugin;
        })(Plugins.PluginBase);
        Plugins.ToolbarPlugin = ToolbarPlugin;
        PowerTables.ComponentsContainer.registerComponent('Toolbar', ToolbarPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var TotalsPlugin = (function (_super) {
            __extends(TotalsPlugin, _super);
            function TotalsPlugin() {
                _super.apply(this, arguments);
            }
            TotalsPlugin.prototype.makeTotalsRow = function () {
                var cols = this.MasterTable.InstanceManager.getUiColumns();
                var dataObject = {};
                for (var j = 0; j < cols.length; j++) {
                    var v = null;
                    var cl = cols[j];
                    if (this._totalsForColumns.hasOwnProperty(cl.RawName)) {
                        v = this._totalsForColumns[cl.RawName];
                        if (this.Configuration.ColumnsValueFunctions[cl.RawName]) {
                            v = this.Configuration.ColumnsValueFunctions[cl.RawName](v);
                        }
                    }
                    dataObject[cols[j].RawName] = v;
                }
                var result = {
                    Index: -1,
                    MasterTable: this.MasterTable,
                    DataObject: dataObject,
                    Cells: {},
                    renderContent: null,
                    renderElement: null,
                    IsSpecial: true
                };
                for (var i = 0; i < cols.length; i++) {
                    var col = cols[i];
                    var cell = {
                        DataObject: dataObject,
                        renderElement: null,
                        Column: cols[i],
                        Row: result,
                        Data: dataObject[col.RawName]
                    };
                    result.Cells[col.RawName] = cell;
                }
                return result;
            };
            TotalsPlugin.prototype.onResponse = function (e) {
                var response = e.EventArgs.Data;
                var total = response.AdditionalData['Total'];
                this._totalsForColumns = total.TotalsForColumns;
            };
            TotalsPlugin.prototype.onClientRowsRendering = function (e) {
                if (this._totalsForColumns) {
                    if (this.Configuration.ShowOnTop) {
                        e.EventArgs.splice(0, 0, this.makeTotalsRow());
                    }
                    else {
                        e.EventArgs.push(this.makeTotalsRow());
                    }
                }
            };
            TotalsPlugin.prototype.onClientDataProcessed = function (e) {
                if (!this._totalsForColumns)
                    this._totalsForColumns = {};
                for (var k in this.Configuration.ColumnsCalculatorFunctions) {
                    if (this.Configuration.ColumnsCalculatorFunctions.hasOwnProperty(k)) {
                        this._totalsForColumns[k] = this.Configuration.ColumnsCalculatorFunctions[k](e.EventArgs).toString();
                    }
                }
            };
            TotalsPlugin.prototype.subscribe = function (e) {
                e.DataReceived.subscribe(this.onResponse.bind(this), 'totals');
                e.BeforeClientRowsRendering.subscribe(this.onClientRowsRendering.bind(this), 'totals');
                e.AfterClientDataProcessing.subscribe(this.onClientDataProcessed.bind(this), 'totals');
            };
            return TotalsPlugin;
        })(Plugins.PluginBase);
        Plugins.TotalsPlugin = TotalsPlugin;
        PowerTables.ComponentsContainer.registerComponent('Total', TotalsPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var ValueFilterPlugin = (function (_super) {
            __extends(ValueFilterPlugin, _super);
            function ValueFilterPlugin() {
                var _this = this;
                _super.apply(this, arguments);
                this._filteringIsBeingExecuted = false;
                this._isInitializing = true;
                this.afterDrawn = function (e) {
                    if (_this.Configuration.Hidden)
                        return;
                    if (_this._associatedColumn.IsDateTime) {
                        var date = _this.MasterTable.Date.parse(_this.Configuration.DefaultValue);
                        _this.MasterTable.Date.putDateToDatePicker(_this.FilterValueProvider, date);
                    }
                    _this._isInitializing = false;
                };
            }
            ValueFilterPlugin.prototype.getValue = function () {
                if (!this.FilterValueProvider)
                    return '';
                if (this._associatedColumn.IsDateTime) {
                    return this.MasterTable.Date.serialize(this.MasterTable.Date.getDateFromDatePicker(this.FilterValueProvider));
                }
                return this.FilterValueProvider.value;
            };
            ValueFilterPlugin.prototype.handleValueChanged = function () {
                var _this = this;
                if (this._isInitializing)
                    return;
                if (this._filteringIsBeingExecuted)
                    return;
                if (this.getValue() === this._previousValue) {
                    return;
                }
                this._previousValue = this.getValue();
                if (this.Configuration.InputDelay > 0) {
                    clearTimeout(this._inpTimeout);
                    this._inpTimeout = setTimeout(function () {
                        _this._filteringIsBeingExecuted = true;
                        _this.MasterTable.Controller.reload();
                        _this._filteringIsBeingExecuted = false;
                    }, this.Configuration.InputDelay);
                }
                else {
                    this._filteringIsBeingExecuted = true;
                    this.MasterTable.Controller.reload();
                    this._filteringIsBeingExecuted = false;
                }
            };
            ValueFilterPlugin.prototype.renderContent = function (templatesProvider) {
                if (this.Configuration.Hidden)
                    return '';
                return templatesProvider.getCachedTemplate('valueFilter')(this);
            };
            ValueFilterPlugin.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                if (this.Configuration.ClientFiltering) {
                    this.itIsClientFilter();
                }
                this._associatedColumn = this.MasterTable.InstanceManager.Columns[this.Configuration.ColumnName];
            };
            ValueFilterPlugin.prototype.filterPredicate = function (rowObject, query) {
                var fval = query.Filterings[this._associatedColumn.RawName];
                if (!fval)
                    return true;
                if (this.Configuration.ClientFilteringFunction) {
                    return this.Configuration.ClientFilteringFunction(rowObject, fval, query);
                }
                if (!query.Filterings.hasOwnProperty(this._associatedColumn.RawName))
                    return true;
                var objVal = rowObject[this._associatedColumn.RawName];
                if (objVal == null)
                    return false;
                if (this._associatedColumn.IsString) {
                    var entries = fval.split(/\s/);
                    for (var i = 0; i < entries.length; i++) {
                        var e = entries[i].trim();
                        if (e.length > 0) {
                            if (objVal.indexOf(e) > -1)
                                return true;
                        }
                    }
                }
                if (this._associatedColumn.IsFloat) {
                    var f = parseFloat(fval);
                    return objVal === f;
                }
                if (this._associatedColumn.IsInteger || this._associatedColumn.IsEnum) {
                    var int = parseInt(fval);
                    return objVal === int;
                }
                if (this._associatedColumn.IsBoolean) {
                    var bv = fval.toLocaleUpperCase() === 'TRUE' ? true :
                        fval.toLocaleUpperCase() === 'FALSE' ? false : null;
                    if (bv == null) {
                        bv = parseInt(fval) > 0;
                    }
                    return objVal === bv;
                }
                if (this._associatedColumn.IsDateTime) {
                    var date = this.MasterTable.Date.parse(fval);
                    return date === objVal;
                }
                return true;
            };
            ValueFilterPlugin.prototype.modifyQuery = function (query, scope) {
                if (this.Configuration.Hidden)
                    return;
                var val = this.getValue();
                if (!val || val.length === 0)
                    return;
                if (this.Configuration.ClientFiltering && scope === PowerTables.QueryScope.Client || scope === PowerTables.QueryScope.Transboundary) {
                    query.Filterings[this._associatedColumn.RawName] = val;
                }
                if ((!this.Configuration.ClientFiltering) && scope === PowerTables.QueryScope.Server || scope === PowerTables.QueryScope.Transboundary) {
                    query.Filterings[this._associatedColumn.RawName] = val;
                }
            };
            return ValueFilterPlugin;
        })(Plugins.FilterBase);
        Plugins.ValueFilterPlugin = ValueFilterPlugin;
        PowerTables.ComponentsContainer.registerComponent('ValueFilter', ValueFilterPlugin);
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var PowerTable = (function () {
        function PowerTable(configuration) {
            this._configuration = configuration;
            this.bindReady();
        }
        PowerTable.prototype.bindReady = function () {
            var _self = this;
            if (document.addEventListener) {
                document.addEventListener('DOMContentLoaded', function () {
                    document.removeEventListener('DOMContentLoaded', arguments.callee, false);
                    _self.initialize();
                }, false);
            }
            else if (document.attachEvent) {
                document.attachEvent('onreadystatechange', function () {
                    if (document.readyState === 'complete') {
                        document.detachEvent('onreadystatechange', arguments.callee);
                        _self.initialize();
                    }
                });
                if (document.documentElement.doScroll && window == window.top)
                    (function () {
                        if (_self._isReady)
                            return;
                        try {
                            document.documentElement.doScroll('left');
                        }
                        catch (error) {
                            setTimeout(arguments.callee, 0);
                            return;
                        }
                        _self.initialize();
                    })();
            }
            window.addEventListener('load', function (e) {
                if (_self._isReady)
                    return;
                _self.initialize();
            });
        };
        PowerTable.prototype.initialize = function () {
            this._isReady = true;
            this.Date = new PowerTables.DateService(this._configuration.DatepickerOptions);
            this.Events = new PowerTables.EventsManager(this);
            this.InstanceManager = new PowerTables.InstanceManager(this._configuration, this, this.Events);
            this.DataHolder = new PowerTables.DataHolder(this);
            this.Loader = new PowerTables.Loader(this._configuration.StaticData, this._configuration.OperationalAjaxUrl, this.Events, this.DataHolder);
            this.Renderer = new PowerTables.Rendering.Renderer(this._configuration.TableRootId, this._configuration.Prefix, this.InstanceManager, this.Events, this.Date);
            this.Controller = new PowerTables.Controller(this);
            this.InstanceManager.initPlugins();
            this.Renderer.layout();
            if (this._configuration.LoadImmediately) {
                this.Controller.reload();
            }
            else {
                this.Controller.showTableMessage({
                    MessageType: 'initial',
                    Message: 'No filtering specified',
                    AdditionalData: 'To retrieve query results please specify several filters'
                });
            }
        };
        /**
         * Reloads table content.
         * This method is left for backward compatibility
         *
         * @returns {}
         */
        PowerTable.prototype.reload = function () {
            this.Controller.reload();
        };
        /**
         * Fires specified DOM event on specified element
         *
         * @param eventName DOM event id
         * @param element Element is about to dispatch event
         */
        PowerTable.fireDomEvent = function (eventName, element) {
            if ('createEvent' in document) {
                var evt = document.createEvent('HTMLEvents');
                evt.initEvent(eventName, false, true);
                element.dispatchEvent(evt);
            }
            else
                element['fireEvent'](eventName);
        };
        return PowerTable;
    })();
    PowerTables.PowerTable = PowerTable;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        var BackBinder = (function () {
            function BackBinder(hb, instances, stack, dateService) {
                this._eventsQueue = [];
                this._markQueue = [];
                this._datepickersQueue = [];
                this._cachedVisualStates = {};
                this._hasVisualStates = false;
                this._instances = instances;
                hb.registerHelper('BindEvent', this.bindEventHelper.bind(this));
                hb.registerHelper('Mark', this.markHelper.bind(this));
                hb.registerHelper('Datepicker', this.datepickerHelper.bind(this));
                hb.registerHelper('VState', this.visualStateHelper.bind(this));
                this._stack = stack;
                this._dateService = dateService;
            }
            BackBinder.prototype.steal = function (stealer, parentElement) {
                this._stealer = stealer;
                this.backBind(parentElement);
                this._stealer = null;
            };
            BackBinder.prototype.traverseBackbind = function (parentElement, backbindCollection, attribute, fn) {
                var elements = parentElement.querySelectorAll("[" + attribute + "]");
                for (var i = 0; i < elements.length; i++) {
                    var element = elements.item(i);
                    var idx = parseInt(element.getAttribute(attribute));
                    var backbindDescription = backbindCollection[idx];
                    fn.call(this, backbindDescription, element);
                    element.removeAttribute(attribute);
                }
                if (parentElement.hasAttribute(attribute)) {
                    var meIdx = parseInt(parentElement.getAttribute(attribute));
                    var descr = backbindCollection[meIdx];
                    fn.call(this, descr, parentElement);
                }
            };
            /**
             * Applies binding of events left in events queue
             *
             * @param parentElement Parent element to lookup for event binding attributes
             * @returns {}
             */
            BackBinder.prototype.backBind = function (parentElement) {
                var _this = this;
                // back binding of datepickers
                this.traverseBackbind(parentElement, this._datepickersQueue, 'data-dp', function (b, e) {
                    _this._dateService.createDatePicker(e);
                });
                // back binding of componens needed HTML elements
                this.traverseBackbind(parentElement, this._markQueue, 'data-mrk', function (b, e) {
                    var target = _this._stealer || b.ElementReceiver;
                    if (Object.prototype.toString.call(b.ElementReceiver[b.FieldName]) === '[object Array]') {
                        target[b.FieldName].push(e);
                    }
                    else if (b.Key != null && b.Key != undefined) {
                        if (typeof b.ElementReceiver[b.FieldName] === 'object') {
                            target[b.FieldName][b.Key] = e;
                        }
                    }
                    else {
                        target[b.FieldName] = e;
                    }
                });
                // backbinding of events
                this.traverseBackbind(parentElement, this._eventsQueue, 'data-be', function (subscription, element) {
                    for (var j = 0; j < subscription.Functions.length; j++) {
                        var bindFn = subscription.Functions[j];
                        var handler = null;
                        var target = _this._stealer || subscription.EventReceiver;
                        if (target[bindFn] && (typeof target[bindFn] === 'function'))
                            handler = subscription.EventReceiver[bindFn];
                        else
                            handler = eval(bindFn);
                        for (var k = 0; k < subscription.Events.length; k++) {
                            if (subscription.Events[k].substring(0, 4) === 'out-') {
                                _this.Delegator.subscribeOutOfElementEvent(element, subscription.Events[k], handler, target, subscription.EventArguments);
                            }
                            else {
                                _this.Delegator.subscribeEvent(element, subscription.Events[k], handler, target, subscription.EventArguments);
                            }
                        }
                    }
                });
                if (this._hasVisualStates) {
                    var targetPendingNormal = [];
                    for (var vsk in this._cachedVisualStates) {
                        if (this._cachedVisualStates.hasOwnProperty(vsk)) {
                            var state = this._cachedVisualStates[vsk];
                            var elements = parentElement.querySelectorAll("[data-state-" + vsk + "]");
                            for (var i = 0; i < elements.length; i++) {
                                var element = elements.item(i);
                                state[i].Element = element;
                                element.removeAttribute("data-state-" + vsk);
                                var target = this._stealer || state[i].Receiver;
                                if (!target['VisualStates'])
                                    target['VisualStates'] = {};
                                if (!target['VisualStates'].hasOwnProperty(vsk))
                                    target['VisualStates'][vsk] = [];
                                target['VisualStates'][vsk].push(state[i]);
                                if (targetPendingNormal.indexOf(target) < 0)
                                    targetPendingNormal.push(target);
                            }
                        }
                    }
                    this._hasVisualStates = false;
                    this.resolveNormalStates(targetPendingNormal);
                    this._cachedVisualStates = {};
                }
                this._markQueue = [];
                this._eventsQueue = [];
                this._datepickersQueue = [];
            };
            BackBinder.prototype.resolveNormalStates = function (targets) {
                for (var i = 0; i < targets.length; i++) {
                    this.addNormalState(targets[i]['VisualStates'], targets[i]);
                }
            };
            BackBinder.prototype.addNormalState = function (states, target) {
                var normalState = [];
                var trackedElements = [];
                for (var sk in states) {
                    if (states.hasOwnProperty(sk)) {
                        for (var i = 0; i < states[sk].length; i++) {
                            var stateIdx = trackedElements.indexOf(states[sk][i].Element);
                            if (stateIdx < 0) {
                                stateIdx = normalState.length;
                                trackedElements.push(states[sk][i].Element);
                                var newEntry = {
                                    Element: states[sk][i].Element,
                                    attrs: {},
                                    classes: [],
                                    styles: {},
                                    id: 'normal',
                                    Receiver: target
                                };
                                normalState.push(newEntry);
                                for (var j = 0; j < newEntry.Element.classList.length; j++) {
                                    newEntry.classes.push(newEntry.Element.classList.item(j));
                                }
                            }
                            this.mixinToNormal(normalState[stateIdx], states[sk][i]);
                        }
                    }
                }
                states['_normal'] = normalState;
            };
            BackBinder.prototype.mixinToNormal = function (normal, custom) {
                if (custom.attrs) {
                    for (var attrKey in custom.attrs) {
                        if (custom.attrs.hasOwnProperty(attrKey)) {
                            if (!normal.attrs.hasOwnProperty(attrKey)) {
                                normal.attrs[attrKey] = (!normal.Element.hasAttribute(attrKey)) ?
                                    null : normal.Element.getAttribute(attrKey);
                            }
                        }
                    }
                }
                if (custom.styles) {
                    for (var styleKey in custom.styles) {
                        if (custom.styles.hasOwnProperty(styleKey)) {
                            if (!normal.styles.hasOwnProperty(styleKey)) {
                                normal.styles[styleKey] = normal.Element.style.getPropertyValue(styleKey);
                            }
                        }
                    }
                }
            };
            BackBinder.prototype.bindEventHelper = function () {
                var commaSeparatedFunctions = arguments[0];
                var commaSeparatedEvents = arguments[1];
                var eventArgs = [];
                if (arguments.length > 3) {
                    for (var i = 2; i <= arguments.length - 2; i++) {
                        eventArgs.push(arguments[i]);
                    }
                }
                var ed = {
                    EventReceiver: this._stack.Current.Object,
                    Functions: commaSeparatedFunctions.split(','),
                    Events: commaSeparatedEvents.split(','),
                    EventArguments: eventArgs
                };
                var index = this._eventsQueue.length;
                this._eventsQueue.push(ed);
                return "data-be=\"" + index + "\"";
            };
            BackBinder.prototype.markHelper = function (fieldName, key) {
                var index = this._markQueue.length;
                var md = {
                    ElementReceiver: this._stack.Current.Object,
                    FieldName: fieldName,
                    Key: key
                };
                this._markQueue.push(md);
                return "data-mrk=\"" + index + "\"";
            };
            BackBinder.prototype.datepickerHelper = function (columnName) {
                var index = this._datepickersQueue.length;
                if (this._instances.Columns[columnName].IsDateTime) {
                    var md = {
                        ElementReceiver: this._stack.Current.Object
                    };
                    this._datepickersQueue.push(md);
                    return "data-dp=\"" + index + "\"";
                }
                return '';
            };
            BackBinder.prototype.visualStateHelper = function (stateName, stateJson) {
                var state = JSON.parse(stateJson);
                state.Receiver = this._stack.Current.Object;
                if (!this._cachedVisualStates[stateName])
                    this._cachedVisualStates[stateName] = [];
                var index = this._cachedVisualStates[stateName].length;
                this._cachedVisualStates[stateName].push(state);
                this._hasVisualStates = true;
                return "data-state-" + stateName + "=\"" + index + "\"";
            };
            return BackBinder;
        })();
        Rendering.BackBinder = BackBinder;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Part of renderer that is responsible for rendering of dynamically loaded content
         */
        var ContentRenderer = (function () {
            function ContentRenderer(templatesProvider, stack, instances) {
                this._columnsRenderFunctions = {};
                this._hb = templatesProvider.HandlebarsInstance;
                this._templatesProvider = templatesProvider;
                this._stack = stack;
                this._instances = instances;
                this.cacheColumnRenderers(this._instances.Columns);
            }
            /**
             * Renders supplied table rows to string
             *
             * @param rows Table rows
             * @returns String containing HTML of table rows
             */
            ContentRenderer.prototype.renderBody = function (rows) {
                var result = '';
                var wrapper = this._templatesProvider.getCachedTemplate('rowWrapper');
                for (var i = 0; i < rows.length; i++) {
                    var rw = rows[i];
                    this._stack.push(Rendering.RenderingContextType.Row, rw);
                    if (rw.renderElement) {
                        result += rw.renderElement(this._templatesProvider);
                    }
                    else {
                        result += wrapper(rw);
                    }
                    this._stack.popContext();
                }
                return result;
            };
            ContentRenderer.prototype.renderContent = function (columnName) {
                var result = '';
                switch (this._stack.Current.Type) {
                    case Rendering.RenderingContextType.Row:
                        var row = this._stack.Current.Object;
                        var columns = this._instances.getUiColumns();
                        var cellWrapper = this._templatesProvider.getCachedTemplate('cellWrapper');
                        for (var i = 0; i < columns.length; i++) {
                            var cell = row.Cells[columns[i].RawName];
                            this._stack.push(Rendering.RenderingContextType.Cell, cell, columns[i].RawName);
                            if (cell.renderElement)
                                result += cell.renderElement(this._templatesProvider);
                            else
                                result += cellWrapper(cell);
                            this._stack.popContext();
                        }
                        break;
                    case Rendering.RenderingContextType.Cell:
                        var tmpl = this._columnsRenderFunctions[this._stack.Current.Object.Column.RawName];
                        result += tmpl(this._stack.Current.Object);
                        break;
                }
                return result;
            };
            ContentRenderer.prototype.cacheColumnRenderers = function (columns) {
                for (var key in columns) {
                    if (columns.hasOwnProperty(key)) {
                        var columnConfig = columns[key].Configuration;
                        if (columnConfig.CellRenderingValueFunction) {
                            this._columnsRenderFunctions[columnConfig.RawColumnName] =
                                function (x) {
                                    return x.Column.Configuration.CellRenderingValueFunction(x.DataObject);
                                };
                            continue;
                        }
                        if (columnConfig.CellRenderingTemplateId) {
                            var compiled = this._hb.compile(document.getElementById(columnConfig.CellRenderingTemplateId).innerHTML);
                            this._columnsRenderFunctions[columnConfig.RawColumnName] =
                                (function (compl) { return function (x) { return compl(x.DataObject); }; })(compiled);
                            continue;
                        }
                        this._columnsRenderFunctions[columnConfig.RawColumnName] =
                            function (x) { return ((x.Data !== null && x.Data != undefined) ? x.Data : ''); };
                    }
                }
                ;
            };
            /**
             * Adds/replaces column rendering function for specified column
             *
             * @param column Column to cache renderer for
             * @param fn Rendering function
             */
            ContentRenderer.prototype.cacheColumnRenderingFunction = function (column, fn) {
                this._columnsRenderFunctions[column.Configuration.RawColumnName] = fn;
            };
            return ContentRenderer;
        })();
        Rendering.ContentRenderer = ContentRenderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * This module allows you to locate particular elements in table's DOM
         */
        var DOMLocator = (function () {
            function DOMLocator(bodyElement, rootElement, rootId) {
                this._bodyElement = bodyElement;
                this._rootElement = rootElement;
                this._rootIdPrefix = "#" + rootId;
            }
            /**
             * Retrieves cell element by cell object
             *
             * @param cell Cell element
             * @returns {HTMLElement} Element containing cell (with wrapper)
             */
            DOMLocator.prototype.getCellElement = function (cell) {
                var track = PowerTables.TrackHelper.getCellTrack(cell);
                return this._bodyElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves cell element using supplied coordinates
             *
             * @param cell Cell element
             * @returns {HTMLElement} Element containing cell (with wrapper)
             */
            DOMLocator.prototype.getCellElementByIndex = function (rowDisplayIndex, columnIndex) {
                var track = PowerTables.TrackHelper.getCellTrackByIndexes(rowDisplayIndex, columnIndex);
                return this._bodyElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves row element (including wrapper)
             *
             * @param row Row
             * @returns HTML element
             */
            DOMLocator.prototype.getRowElement = function (row) {
                var track = PowerTables.TrackHelper.getRowTrack(row);
                return this._bodyElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
            * Retrieves row element (including wrapper) by specified row index
            *
            * @param row Row
            * @returns HTML element
            */
            DOMLocator.prototype.getRowElementByIndex = function (rowDisplayingIndex) {
                var track = PowerTables.TrackHelper.getRowTrackByIndex(rowDisplayingIndex);
                return this._bodyElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves data cells for specified column (including wrappers)
             *
             * @param column Column desired data cells belongs to
             * @returns HTML NodeList containing results
             */
            DOMLocator.prototype.getColumnCellsElements = function (column) {
                var colIdx = column.MasterTable.InstanceManager.getUiColumnNames().indexOf(column.RawName);
                return this._bodyElement.querySelectorAll(this._rootIdPrefix + " [data-track$=\"-c" + colIdx + "\"]");
            };
            /**
             * Retrieves data cells for specified column (including wrappers) by column index
             *
             * @param column Column desired data cells belongs to
             * @returns HTML NodeList containing results
             */
            DOMLocator.prototype.getColumnCellsElementsByColumnIndex = function (columnIndex) {
                return this._bodyElement.querySelectorAll(this._rootIdPrefix + " [data-track$=\"-c" + columnIndex + "\"]");
            };
            /**
             * Retrieves data cells for whole row (including wrapper)
             *
             * @param row Row with data cells
             * @returns NodeList containing results
             */
            DOMLocator.prototype.getRowCellsElements = function (row) {
                return this.getRowCellsElementsByIndex(row.Index);
            };
            /**
             * Retrieves data cells for whole row (including wrapper)
             *
             * @param row Row with data cells
             * @returns NodeList containing results
             */
            DOMLocator.prototype.getRowCellsElementsByIndex = function (rowDisplayingIndex) {
                return this._bodyElement.querySelectorAll(this._rootIdPrefix + " [data-track^=\"c-r" + rowDisplayingIndex + "-\"]");
            };
            /**
             * Retrieves HTML element for column header (including wrapper)
             *
             * @param header Column header
             * @returns HTML element
             */
            DOMLocator.prototype.getHeaderElement = function (header) {
                var track = PowerTables.TrackHelper.getHeaderTrack(header);
                return this._rootElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves HTML element for plugin (including wrapper)
             *
             * @param plugin Plugin
             * @returns HTML element
             */
            DOMLocator.prototype.getPluginElement = function (plugin) {
                var track = PowerTables.TrackHelper.getPluginTrack(plugin);
                return this._rootElement.querySelector(this._rootIdPrefix + " [data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves HTML element for plugin (including wrapper)
             *
             * @param plugin Plugin
             * @returns HTML element
             */
            DOMLocator.prototype.getPluginElementsByPositionPart = function (placement) {
                var track = PowerTables.TrackHelper.getPluginTrackByLocation(placement);
                return this._rootElement.querySelectorAll(this._rootIdPrefix + " [data-track^=\"" + track + "\"]");
            };
            /**
             * Determines if supplied element is table row
             *
             * @param e Testing element
             * @returns {boolean} True when supplied element is row, false otherwise
             */
            DOMLocator.prototype.isRow = function (e) {
                if (!e)
                    return false;
                if (!e.getAttribute)
                    return false;
                var trk = e.getAttribute('data-track');
                if (!trk)
                    return false;
                return (trk.charAt(0) === 'r') && (trk.charAt(1) === '-');
            };
            /**
             * Determines if supplied element is table cell
             *
             * @param e Testing element
             * @returns {boolean} True when supplied element is cell, false otherwise
             */
            DOMLocator.prototype.isCell = function (e) {
                if (!e)
                    return false;
                if (!e.getAttribute)
                    return false;
                var trk = e.getAttribute('data-track');
                if (!trk)
                    return false;
                return (trk.charAt(0) === 'c')
                    && (trk.charAt(1) === '-')
                    && (trk.charAt(2) === 'r');
            };
            return DOMLocator;
        })();
        Rendering.DOMLocator = DOMLocator;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        var DOMModifier = (function () {
            function DOMModifier(stack, locator, backBinder, templatesProvider, layoutRenderer, instances) {
                this.displayCache = {};
                this._stack = stack;
                this._locator = locator;
                this._backBinder = backBinder;
                this._templatesProvider = templatesProvider;
                this._layoutRenderer = layoutRenderer;
                this._instances = instances;
            }
            /**
             * Applies settings for specified state
             *
             * @param state State id
             * @param states VisualStates collection
             */
            DOMModifier.prototype.changeState = function (state, states) {
                this.applyNormal(states['_normal']);
                if (!states[state])
                    return;
                this.applyState(states[state]);
            };
            /**
             * Reverts elements back to normal state
             *
             * @param states VisualStates collection
             */
            DOMModifier.prototype.normalState = function (states) {
                this.applyNormal(states['_normal']);
            };
            DOMModifier.prototype.applyState = function (desired) {
                for (var i = 0; i < desired.length; i++) {
                    var ns = desired[i];
                    for (var k = 0; k < ns.classes.length; k++) {
                        var cls = ns.classes[k].substring(1);
                        if (ns.classes[k].charAt(0) === '+')
                            ns.Element.classList.add(cls);
                        else
                            ns.Element.classList.remove(cls);
                    }
                    for (var ak in ns.attrs) {
                        if (ns.attrs.hasOwnProperty(ak)) {
                            if (ns.attrs[ak] == null)
                                ns.Element.removeAttribute(ak);
                            else
                                ns.Element.setAttribute(ak, ns.attrs[ak]);
                        }
                    }
                    for (var sk in ns.styles) {
                        if (ns.styles.hasOwnProperty(sk)) {
                            ns.Element.style.setProperty(sk, ns.styles[sk]);
                        }
                    }
                }
            };
            DOMModifier.prototype.applyNormal = function (normal) {
                for (var i = 0; i < normal.length; i++) {
                    var ns = normal[i];
                    ns.Element.setAttribute('class', ns.classes.join(' '));
                    for (var ak in ns.attrs) {
                        if (ns.attrs.hasOwnProperty(ak)) {
                            if (ns.attrs[ak] == null)
                                ns.Element.removeAttribute(ak);
                            else
                                ns.Element.setAttribute(ak, ns.attrs[ak]);
                        }
                    }
                    for (var sk in ns.styles) {
                        if (ns.styles.hasOwnProperty(sk)) {
                            ns.Element.style.setProperty(sk, ns.styles[sk]);
                        }
                    }
                }
            };
            //#region Show/hide infrastructure
            DOMModifier.prototype.getRealDisplay = function (elem) {
                if (elem.currentStyle)
                    return elem.currentStyle.display;
                else if (window.getComputedStyle) {
                    var computedStyle = window.getComputedStyle(elem, null);
                    return computedStyle.getPropertyValue('display');
                }
                return '';
            };
            DOMModifier.prototype.hideElement = function (el) {
                if (!el)
                    return;
                if (!el.getAttribute('displayOld'))
                    el.setAttribute("displayOld", el.style.display);
                el.style.display = "none";
            };
            DOMModifier.prototype.showElement = function (el) {
                if (!el)
                    return;
                if (this.getRealDisplay(el) !== 'none')
                    return;
                var old = el.getAttribute("displayOld");
                el.style.display = old || "";
                if (this.getRealDisplay(el) === "none") {
                    var nodeName = el.nodeName, body = document.body, display;
                    if (this.displayCache[nodeName])
                        display = this.displayCache[nodeName];
                    else {
                        var testElem = document.createElement(nodeName);
                        body.appendChild(testElem);
                        display = this.getRealDisplay(testElem);
                        if (display === "none")
                            display = "block";
                        body.removeChild(testElem);
                        this.displayCache[nodeName] = display;
                    }
                    el.setAttribute('displayOld', display);
                    el.style.display = display;
                }
            };
            DOMModifier.prototype.destroyElement = function (element) {
                element.parentElement.removeChild(element);
            };
            DOMModifier.prototype.destroyElements = function (elements) {
                for (var i = 0; i < elements.length; i++) {
                    this.destroyElement(elements.item(i));
                }
            };
            DOMModifier.prototype.hideElements = function (element) {
                if (!element)
                    return;
                for (var i = 0; i < element.length; i++) {
                    this.hideElement(element.item(i));
                }
            };
            DOMModifier.prototype.showElements = function (element) {
                if (!element)
                    return;
                for (var i = 0; i < element.length; i++) {
                    this.showElement(element.item(i));
                }
            };
            //#endregion
            //#region Plugins
            /**
             * Redraws specified plugin refreshing all its graphical state
             *
             * @param plugin Plugin to redraw
             * @returns {}
             */
            DOMModifier.prototype.redrawPlugin = function (plugin) {
                this._stack.clear();
                var oldPluginElement = this._locator.getPluginElement(plugin);
                var parent = oldPluginElement.parentElement;
                var parser = new Rendering.Html2Dom.HtmlParser();
                var html = this._layoutRenderer.renderPlugin(plugin);
                var newPluginElement = parser.html2Dom(html);
                parent.replaceChild(newPluginElement, oldPluginElement);
                this._backBinder.backBind(newPluginElement);
            };
            /**
             * Redraws specified plugins refreshing all them graphical state (by position)
             *
             * @param position Plugin position
             * @returns {}
             */
            DOMModifier.prototype.redrawPluginsByPosition = function (position) {
                var plugins = this._instances.getPlugins(position);
                for (var i = 0; i < plugins.length; i++) {
                    this.redrawPlugin(plugins[i]);
                }
            };
            DOMModifier.prototype.hidePlugin = function (plugin) {
                var pluginElement = this._locator.getPluginElement(plugin);
                this.hideElement(pluginElement);
            };
            DOMModifier.prototype.showPlugin = function (plugin) {
                var pluginElement = this._locator.getPluginElement(plugin);
                this.showElement(pluginElement);
            };
            DOMModifier.prototype.destroyPlugin = function (plugin) {
                var pluginElement = this._locator.getPluginElement(plugin);
                this.destroyElement(pluginElement);
            };
            DOMModifier.prototype.hidePluginsByPosition = function (position) {
                var plugins = this._instances.getPlugins(position);
                for (var i = 0; i < plugins.length; i++) {
                    this.hidePlugin(plugins[i]);
                }
            };
            DOMModifier.prototype.showPluginsByPosition = function (position) {
                var plugins = this._instances.getPlugins(position);
                for (var i = 0; i < plugins.length; i++) {
                    this.showPlugin(plugins[i]);
                }
            };
            DOMModifier.prototype.destroyPluginsByPosition = function (position) {
                var plugins = this._instances.getPlugins(position);
                for (var i = 0; i < plugins.length; i++) {
                    this.destroyPlugin(plugins[i]);
                }
            };
            //#endregion
            //#region Rows
            /**
             * Redraws specified row refreshing all its graphical state
             *
             * @param row
             * @returns {}
             */
            DOMModifier.prototype.redrawRow = function (row) {
                this._stack.clear();
                this._stack.push(Rendering.RenderingContextType.Row, row);
                var wrapper = this._templatesProvider.getCachedTemplate('rowWrapper');
                var html;
                if (row.renderElement) {
                    html = row.renderElement(this._templatesProvider);
                }
                else {
                    html = wrapper(row);
                }
                this._stack.popContext();
                var oldElement = this._locator.getRowElement(row);
                this.replaceElement(oldElement, html);
            };
            DOMModifier.prototype.destroyRow = function (row) {
                var rowElement = this._locator.getRowElement(row);
                this.destroyElement(rowElement);
            };
            DOMModifier.prototype.hideRow = function (row) {
                var rowElement = this._locator.getRowElement(row);
                this.hideElement(rowElement);
            };
            DOMModifier.prototype.showRow = function (row) {
                var rowElement = this._locator.getRowElement(row);
                this.showElement(rowElement);
            };
            /**
             * Redraws specified row refreshing all its graphical state
             *
             * @param row
             * @returns {}
             */
            DOMModifier.prototype.appendRow = function (row, afterRowAtIndex) {
                this._stack.clear();
                var wrapper = this._templatesProvider.getCachedTemplate('rowWrapper');
                var html;
                if (row.renderElement) {
                    html = row.renderElement(this._templatesProvider);
                }
                else {
                    html = wrapper(row);
                }
                var referenceNode = this._locator.getRowElementByIndex(afterRowAtIndex);
                var newRowElement = this.createElement(html);
                referenceNode.parentNode.insertBefore(newRowElement, referenceNode.nextSibling);
            };
            /**
             * Removes referenced row by its index
             *
             * @param rowDisplayIndex
             * @returns {}
             */
            DOMModifier.prototype.destroyRowByIndex = function (rowDisplayIndex) {
                var referenceNode = this._locator.getRowElementByIndex(rowDisplayIndex);
                referenceNode.parentElement.removeChild(referenceNode);
            };
            DOMModifier.prototype.hideRowByIndex = function (rowDisplayIndex) {
                var rowElement = this._locator.getRowElementByIndex(rowDisplayIndex);
                this.hideElement(rowElement);
            };
            DOMModifier.prototype.showRowByIndex = function (rowDisplayIndex) {
                var rowElement = this._locator.getRowElementByIndex(rowDisplayIndex);
                this.showElement(rowElement);
            };
            //#endregion
            //#region Cells
            DOMModifier.prototype.redrawCell = function (cell) {
                this._stack.clear();
                this._stack.push(Rendering.RenderingContextType.Cell, cell);
                var wrapper = this._templatesProvider.getCachedTemplate('cellWrapper');
                var html;
                if (cell.renderElement) {
                    html = cell.renderElement(this._templatesProvider);
                }
                else {
                    html = wrapper(cell);
                }
                this._stack.popContext();
                var oldElement = this._locator.getCellElement(cell);
                this.replaceElement(oldElement, html);
            };
            DOMModifier.prototype.destroyCell = function (cell) {
                var e = this._locator.getCellElement(cell);
                e.parentElement.removeChild(e);
            };
            DOMModifier.prototype.hideCell = function (cell) {
                var e = this._locator.getCellElement(cell);
                this.hideElement(e);
            };
            DOMModifier.prototype.showCell = function (cell) {
                var e = this._locator.getCellElement(cell);
                this.hideElement(e);
            };
            DOMModifier.prototype.destroyCellsByColumn = function (column) {
                var e = this._locator.getColumnCellsElements(column);
                this.destroyElements(e);
            };
            DOMModifier.prototype.hideCellsByColumn = function (column) {
                var e = this._locator.getColumnCellsElements(column);
                this.hideElements(e);
            };
            DOMModifier.prototype.showCellsByColumn = function (column) {
                var e = this._locator.getColumnCellsElements(column);
                this.showElements(e);
            };
            DOMModifier.prototype.destroyColumnCellsElementsByColumnIndex = function (columnIndex) {
                var e = this._locator.getColumnCellsElementsByColumnIndex(columnIndex);
                this.destroyElements(e);
            };
            DOMModifier.prototype.hideColumnCellsElementsByColumnIndex = function (columnIndex) {
                var e = this._locator.getColumnCellsElementsByColumnIndex(columnIndex);
                this.hideElements(e);
            };
            DOMModifier.prototype.showColumnCellsElementsByColumnIndex = function (columnIndex) {
                var e = this._locator.getColumnCellsElementsByColumnIndex(columnIndex);
                this.showElements(e);
            };
            //#endregion
            /**
             * Redraws header for specified column
             *
             * @param column Column which header is to be redrawn
             */
            DOMModifier.prototype.redrawHeader = function (column) {
                this._stack.clear();
                var html = this._layoutRenderer.renderHeader(column);
                var oldHeaderElement = this._locator.getHeaderElement(column.Header);
                var newElement = this.replaceElement(oldHeaderElement, html);
                this._backBinder.backBind(newElement);
            };
            DOMModifier.prototype.destroyHeader = function (column) {
                var e = this._locator.getHeaderElement(column.Header);
                this.destroyElement(e);
            };
            DOMModifier.prototype.hideHeader = function (column) {
                var e = this._locator.getHeaderElement(column.Header);
                this.hideElement(e);
            };
            DOMModifier.prototype.showHeader = function (column) {
                var e = this._locator.getHeaderElement(column.Header);
                this.hideElement(e);
            };
            DOMModifier.prototype.createElement = function (html) {
                var parser = new Rendering.Html2Dom.HtmlParser();
                return parser.html2Dom(html);
            };
            DOMModifier.prototype.replaceElement = function (element, html) {
                var node = this.createElement(html);
                element.parentElement.replaceChild(node, element);
                return node;
            };
            return DOMModifier;
        })();
        Rendering.DOMModifier = DOMModifier;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        var Html2Dom;
        (function (Html2Dom) {
            var HtmlParserDefinitions = (function () {
                function HtmlParserDefinitions() {
                }
                HtmlParserDefinitions.makeMap = function (str) {
                    var obj = {}, items = str.split(',');
                    for (var i = 0; i < items.length; i++)
                        obj[items[i]] = true;
                    return obj;
                };
                // Regular Expressions for parsing tags and attributes
                HtmlParserDefinitions.startTag = /^<([-A-Za-z0-9_]+)((?:[\s\w\-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/;
                HtmlParserDefinitions.endTag = /^<\/([-A-Za-z0-9_]+)[^>]*>/;
                HtmlParserDefinitions.attr = /([-A-Za-z0-9_]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;
                // Empty Elements - HTML 4.01
                HtmlParserDefinitions.empty = HtmlParserDefinitions.makeMap('area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed');
                // Block Elements - HTML 4.01
                HtmlParserDefinitions.block = HtmlParserDefinitions.makeMap('address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul,span');
                // Inline Elements - HTML 4.01
                HtmlParserDefinitions.inline = HtmlParserDefinitions.makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,strike,strong,sub,sup,textarea,tt,u,var');
                // Elements that you can, intentionally, leave open
                // (and which close themselves)
                HtmlParserDefinitions.closeSelf = HtmlParserDefinitions.makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');
                // Attributes that have their values filled in disabled="disabled"
                HtmlParserDefinitions.fillAttrs = HtmlParserDefinitions.makeMap('checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected');
                // Special Elements (can contain anything)
                HtmlParserDefinitions.special = HtmlParserDefinitions.makeMap('script,style');
                return HtmlParserDefinitions;
            })();
            Html2Dom.HtmlParserDefinitions = HtmlParserDefinitions;
            /**
             * Small HTML parser to turn user's HTMl to DOM
             * Thanks to John Resig, co-author of jQuery
             * http://ejohn.org/blog/pure-javascript-html-parser/
             */
            var HtmlParser = (function () {
                function HtmlParser() {
                    this._elems = [];
                    this._topNodes = [];
                    this._stack = [];
                    this._stack.last = function () {
                        if (this.length === 0)
                            return null;
                        return this[this.length - 1];
                    };
                }
                //#region parsering
                HtmlParser.prototype.parse = function (html) {
                    var _this = this;
                    var index, chars, match, last = html;
                    while (html) {
                        chars = true;
                        var stackCurrent = this._stack.last();
                        // Make sure we're not in a script or style element
                        if (!stackCurrent || !HtmlParserDefinitions.special[stackCurrent]) {
                            // Comment
                            if (html.indexOf('<!--') === 0) {
                                index = html.indexOf('-->');
                                if (index >= 0) {
                                    html = html.substring(index + 3);
                                    chars = false;
                                }
                            }
                            else if (html.indexOf('</') === 0) {
                                match = html.match(HtmlParserDefinitions.endTag);
                                if (match) {
                                    html = html.substring(match[0].length);
                                    match[0].replace(HtmlParserDefinitions.endTag, this.parseEndTag.bind(this));
                                    chars = false;
                                }
                            }
                            else if (html.indexOf('<') === 0) {
                                match = html.match(HtmlParserDefinitions.startTag);
                                if (match) {
                                    html = html.substring(match[0].length);
                                    match[0].replace(HtmlParserDefinitions.startTag, this.parseStartTag.bind(this));
                                    chars = false;
                                }
                            }
                            if (chars) {
                                index = html.indexOf('<');
                                var text = index < 0 ? html : html.substring(0, index);
                                html = index < 0 ? '' : html.substring(index);
                                this.chars(text);
                            }
                        }
                        else {
                            html = html.replace(new RegExp("(.*)</" + this._stack.last() + "[^>]*>"), function (all, text) {
                                text = text.replace(/<!--(.*?)-->/g, '$1')
                                    .replace(/<!\[CDATA\[(.*?)]]>/g, '$1');
                                _this.chars(text);
                                return '';
                            });
                            this.parseEndTag('', this._stack.last());
                        }
                        if (html === last)
                            throw new Error("HTML Parse Error: " + html);
                        last = html;
                    }
                    // Clean up any remaining tags
                    this.parseEndTag();
                };
                HtmlParser.prototype.parseStartTag = function (tag, tagName, rest, unary) {
                    tagName = tagName.toLowerCase();
                    //if (HtmlParserDefinitions.block[tagName]) {
                    //    while (this._stack.last() && HtmlParserDefinitions.inline[this._stack.last()]) {
                    //        this.parseEndTag("", this._stack.last());
                    //    }
                    //}
                    if (HtmlParserDefinitions.closeSelf[tagName] && this._stack.last() === tagName) {
                        this.parseEndTag('', tagName);
                    }
                    unary = HtmlParserDefinitions.empty[tagName] || !!unary;
                    if (!unary)
                        this._stack.push(tagName);
                    var attrs = [];
                    rest.replace(HtmlParserDefinitions.attr, function (match, name) {
                        var value = arguments[2] ? arguments[2] :
                            arguments[3] ? arguments[3] :
                                arguments[4] ? arguments[4] :
                                    HtmlParserDefinitions.fillAttrs[name] ? name : '';
                        attrs.push({
                            name: name,
                            value: value,
                            escaped: value.replace(/(^|[^\\])"/g, '$1\\\"') //"
                        });
                    });
                    this.start(tagName, attrs, unary);
                    return '';
                };
                HtmlParser.prototype.parseEndTag = function (tag, tagName) {
                    var pos;
                    // If no tag name is provided, clean shop
                    if (!tagName)
                        pos = 0;
                    else {
                        for (pos = this._stack.length - 1; pos >= 0; pos--)
                            if (this._stack[pos] === tagName)
                                break;
                    }
                    if (pos >= 0) {
                        // Close all the open elements, up the stack
                        for (var i = this._stack.length - 1; i >= pos; i--)
                            this.end(this._stack[i]);
                        // Remove the open elements from the stack
                        this._stack.length = pos;
                    }
                    return '';
                };
                HtmlParser.prototype.start = function (tagName, attrs, unary) {
                    var elem = document.createElement(tagName);
                    for (var i = 0; i < attrs.length; i++) {
                        elem.setAttribute(attrs[i].name, attrs[i].value);
                    }
                    if (this._curParentNode && this._curParentNode.appendChild) {
                        this._curParentNode.appendChild(elem);
                    }
                    if (!unary) {
                        this._elems.push(elem);
                        this._curParentNode = elem;
                    }
                };
                HtmlParser.prototype.end = function (tag) {
                    this._elems.length -= 1;
                    if (this._elems.length === 0) {
                        this._topNodes.push(this._curParentNode);
                    }
                    this._curParentNode = this._elems[this._elems.length - 1];
                };
                HtmlParser.prototype.chars = function (text) {
                    if (text.length === 0)
                        return;
                    if (!this._curParentNode) {
                        throw new Error('Html2Dom error');
                    }
                    this._curParentNode.appendChild(document.createTextNode(text));
                };
                //#endregion
                HtmlParser.prototype.html2Dom = function (html) {
                    this.parse(html.trim());
                    if (this._topNodes.length > 1) {
                        throw new Error('Wrapper must have root element. Templates with multiple root elements are not supported yet');
                    }
                    return this._topNodes.length ? this._topNodes[0] : null;
                };
                return HtmlParser;
            })();
            Html2Dom.HtmlParser = HtmlParser;
        })(Html2Dom = Rendering.Html2Dom || (Rendering.Html2Dom = {}));
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Rendering stack class. Provives common helper
         * infrastructure for context-oriented rendering
         */
        var RenderingStack = (function () {
            function RenderingStack() {
                this._contextStack = [];
                /**
                 * Current rendering context
                 */
                this.Current = null;
            }
            /**
             * Clears rendering stack
             * @returns {}
             */
            RenderingStack.prototype.clear = function () {
                this.Current = null;
                if (this._contextStack.length === 0)
                    return;
                this._contextStack = [];
            };
            /**
             * Pushes rendering context into stack
             * @param ctx
             * @returns {}
             */
            RenderingStack.prototype.pushContext = function (ctx) {
                this._contextStack.push(ctx);
                this.Current = ctx;
            };
            /**
             * Pushes rendering context into stack
             * @param elementType What is being rendered
             * @param element Reference to object is being rendered
             * @param columnName Optional column name - for column-contexted rendering objects
             * @returns {}
             */
            RenderingStack.prototype.push = function (elementType, element, columnName) {
                if (columnName === void 0) { columnName = ''; }
                var ctx = {
                    Type: elementType,
                    Object: element,
                    ColumnName: columnName,
                    CurrentTrack: this.getTrack(elementType, element)
                };
                this._contextStack.push(ctx);
                this.Current = ctx;
            };
            RenderingStack.prototype.getTrack = function (elementType, element) {
                var trk;
                switch (elementType) {
                    case RenderingContextType.Plugin:
                        trk = PowerTables.TrackHelper.getPluginTrack(element);
                        break;
                    case RenderingContextType.Header:
                        trk = PowerTables.TrackHelper.getHeaderTrack(element);
                        break;
                    case RenderingContextType.Cell:
                        trk = PowerTables.TrackHelper.getCellTrack(element);
                        break;
                    case RenderingContextType.Row:
                        trk = PowerTables.TrackHelper.getRowTrack(element);
                        break;
                    default:
                        throw new Error('Invalid context element type');
                }
                return trk;
            };
            /**
             * Pops rendering context from stack
             * @returns {}
             */
            RenderingStack.prototype.popContext = function () {
                this._contextStack.pop();
                if (this._contextStack.length === 0)
                    this.Current = null;
                else
                    this.Current = this._contextStack[this._contextStack.length - 1];
            };
            return RenderingStack;
        })();
        Rendering.RenderingStack = RenderingStack;
        /**
         * What renders in current helper method
         */
        (function (RenderingContextType) {
            /**
             * Plugin (0)
             */
            RenderingContextType[RenderingContextType["Plugin"] = 0] = "Plugin";
            /**
             * Column header (1)
             */
            RenderingContextType[RenderingContextType["Header"] = 1] = "Header";
            /**
             * Row (containing cells) (2)
             */
            RenderingContextType[RenderingContextType["Row"] = 2] = "Row";
            /**
             * Cell (belonging to row and column) (3)
             */
            RenderingContextType[RenderingContextType["Cell"] = 3] = "Cell";
        })(Rendering.RenderingContextType || (Rendering.RenderingContextType = {}));
        var RenderingContextType = Rendering.RenderingContextType;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
/// <reference path="../ExternalTypings.d.ts"/>
/// <reference path="RenderingStack.ts"/>
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Layout renderer
         * Is responsive for common layout rendering (with plugins, columns, etc)
         */
        var LayoutRenderer = (function () {
            function LayoutRenderer(templates, stack, instances) {
                this._hb = templates.HandlebarsInstance;
                this._templatesProvider = templates;
                this._stack = stack;
                this._instances = instances;
                this._hb.registerHelper('Body', this.bodyHelper);
                this._hb.registerHelper('Plugin', this.pluginHelper.bind(this));
                this._hb.registerHelper('Plugins', this.pluginsHelper.bind(this));
                this._hb.registerHelper('Header', this.headerHelper.bind(this));
                this._hb.registerHelper('Headers', this.headersHelper.bind(this));
            }
            //#region Handlebars helpers
            LayoutRenderer.prototype.bodyHelper = function () {
                return '<input type="hidden" data-track="tableBodyHere" style="display:none;"/>';
            };
            //#region Plugin helpers
            LayoutRenderer.prototype.pluginHelper = function (pluginPosition, pluginId) {
                var plugin = this._instances.getPlugin(pluginId, pluginPosition);
                return this.renderPlugin(plugin);
            };
            LayoutRenderer.prototype.pluginsHelper = function (pluginPosition) {
                var plugins = this._instances.getPlugins(pluginPosition);
                if (!plugins)
                    return '';
                var result = '';
                for (var a in plugins) {
                    if (plugins.hasOwnProperty(a)) {
                        var v = plugins[a];
                        result += this.renderPlugin(v);
                    }
                }
                return result;
            };
            /**
                     * Renders specified plugin into string including its wrapper
                     *
                     * @param plugin Plugin interface
                     * @returns {}
                     */
            LayoutRenderer.prototype.renderPlugin = function (plugin) {
                if (plugin.renderElement)
                    return plugin.renderElement(this._templatesProvider);
                if (!plugin.renderContent)
                    return '';
                this._stack.push(Rendering.RenderingContextType.Plugin, plugin);
                var result = this._templatesProvider.getCachedTemplate('pluginWrapper')(plugin);
                this._stack.popContext();
                return result;
            };
            //#endregion
            // #region headers helper
            LayoutRenderer.prototype.headerHelper = function (columnName) {
                return this.renderHeader(this._instances.getColumn(columnName));
            };
            /**
             * Renders specified column's header into string including its wrapper
             *
             * @param column Column which header is about to be rendered
             * @returns {}
             */
            LayoutRenderer.prototype.renderHeader = function (column) {
                this._stack.push(Rendering.RenderingContextType.Header, column.Header, column.RawName);
                var result;
                if (column.Header.renderElement)
                    result = column.Header.renderElement(this._templatesProvider);
                else
                    result = this._templatesProvider.getCachedTemplate('headerWrapper')(column.Header);
                this._stack.popContext();
                return result;
            };
            LayoutRenderer.prototype.headersHelper = function () {
                var columns = this._instances.getUiColumns();
                var result = '';
                for (var a in columns) {
                    if (columns.hasOwnProperty(a)) {
                        var v = columns[a];
                        result += this.renderHeader(v);
                    }
                }
                return result;
            };
            //#endregion
            //#endregion
            LayoutRenderer.prototype.renderContent = function (columnName) {
                switch (this._stack.Current.Type) {
                    case Rendering.RenderingContextType.Header:
                        return this._stack.Current.Object.Column.Configuration.Title
                            || this._stack.Current.Object.Column.RawName;
                    case Rendering.RenderingContextType.Plugin:
                        // if we are here then plugin's renderContent is not 
                        // overriden
                        throw new Error('It is required to override renderContent for plugin');
                }
                return '';
            };
            return LayoutRenderer;
        })();
        Rendering.LayoutRenderer = LayoutRenderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Enity responsible for displaying table
         */
        var Renderer = (function () {
            function Renderer(rootId, prefix, instances, events, dateService) {
                this._templatesCache = {};
                this._instances = instances;
                this._stack = new Rendering.RenderingStack();
                this.RootElement = document.getElementById(rootId);
                this._rootId = rootId;
                this._events = events;
                this.HandlebarsInstance = Handlebars.create();
                this.LayoutRenderer = new Rendering.LayoutRenderer(this, this._stack, this._instances);
                this.ContentRenderer = new Rendering.ContentRenderer(this, this._stack, this._instances);
                this.BackBinder = new Rendering.BackBinder(this.HandlebarsInstance, instances, this._stack, dateService);
                this.HandlebarsInstance.registerHelper('ifq', this.ifqHelper);
                this.HandlebarsInstance.registerHelper('ifloc', this.iflocHelper.bind(this));
                this.HandlebarsInstance.registerHelper('Content', this.contentHelper.bind(this));
                this.HandlebarsInstance.registerHelper('Track', this.trackHelper.bind(this));
                this.cacheTemplates(prefix);
            }
            //#region Templates caching
            Renderer.prototype.cacheTemplates = function (templatesPrefix) {
                var selector = "script[type=\"text/x-handlebars-template\"][id^=\"" + templatesPrefix + "-\"]";
                var templates = document.querySelectorAll(selector);
                for (var i = 0; i < templates.length; i++) {
                    var item = templates.item(i);
                    var key = item.id.substring(templatesPrefix.length + 1);
                    this._templatesCache[key] = this.HandlebarsInstance.compile(item.innerHTML);
                }
            };
            /**
             * Retrieves cached template handlebars function
             * @param Template Id
             * @returns Handlebars function
             */
            Renderer.prototype.getCachedTemplate = function (templateId) {
                if (!this._templatesCache.hasOwnProperty(templateId))
                    throw new Error("Cannot find template " + templateId);
                return this._templatesCache[templateId];
            };
            //#endregion
            //#region Public methods
            /**
             * Perform table layout inside specified root element
             */
            Renderer.prototype.layout = function () {
                this._events.BeforeLayoutRendered.invoke(this, null);
                var rendered = this.getCachedTemplate('layout')(null);
                this.RootElement.innerHTML = rendered;
                var bodyMarker = this.RootElement.querySelector('[data-track="tableBodyHere"]');
                if (!bodyMarker)
                    throw new Error('{{Body}} placeholder is missing in table layout template');
                this.BodyElement = bodyMarker.parentElement;
                this.BodyElement.removeChild(bodyMarker);
                this.Locator = new Rendering.DOMLocator(this.BodyElement, this.RootElement, this._rootId);
                this.Modifier = new Rendering.DOMModifier(this._stack, this.Locator, this.BackBinder, this, this.LayoutRenderer, this._instances);
                this.Delegator = new PowerTables.EventsDelegatator(this.Locator, this.BodyElement, this.RootElement, this._rootId);
                this.BackBinder.Delegator = this.Delegator;
                this.BackBinder.backBind(this.RootElement);
                this._events.AfterLayoutRendered.invoke(this, null);
            };
            /**
             * Clear dynamically loaded table content and replace it with new one
             *
             * @param rows Set of table rows
             */
            Renderer.prototype.body = function (rows) {
                this._events.BeforeClientRowsRendering.invoke(this, rows);
                this.clearBody();
                var html = this.ContentRenderer.renderBody(rows);
                this.BodyElement.innerHTML = html;
                this._events.AfterDataRendered.invoke(this, null);
            };
            /**
             * Removes all dynamically loaded content in table
             *
             * @returns {}
             */
            Renderer.prototype.clearBody = function () {
                //this.BodyElement.innerHTML = '';
                while (this.BodyElement.firstChild) {
                    this.BodyElement.removeChild(this.BodyElement.firstChild);
                }
            };
            //#endregion
            //#region Helpers
            Renderer.prototype.contentHelper = function (columnName) {
                if (this._stack.Current.Object.renderContent) {
                    return this._stack.Current.Object.renderContent(this);
                }
                else {
                    switch (this._stack.Current.Type) {
                        case Rendering.RenderingContextType.Header:
                        case Rendering.RenderingContextType.Plugin:
                            return this.LayoutRenderer.renderContent(columnName);
                        case Rendering.RenderingContextType.Row:
                        case Rendering.RenderingContextType.Cell:
                            return this.ContentRenderer.renderContent(columnName);
                        default:
                            throw new Error('Unknown rendering context type');
                    }
                }
            };
            Renderer.prototype.trackHelper = function () {
                var trk = this._stack.Current.CurrentTrack;
                if (trk.length === 0)
                    return '';
                return "data-track=\"" + trk + "\"";
            };
            Renderer.prototype.ifqHelper = function (a, b, opts) {
                if (a == b)
                    return opts.fn(this);
                else
                    return opts.inverse(this);
            };
            Renderer.prototype.iflocHelper = function (location, opts) {
                if (this._stack.Current.Type === Rendering.RenderingContextType.Plugin) {
                    var loc = this._stack.Current.Object.PluginLocation;
                    if (loc.length < location.length)
                        return opts.inverse(this);
                    if (loc.length === location.length && loc === location)
                        return opts.fn(this);
                    if (loc.substring(0, location.length) === location)
                        return opts.fn(this);
                }
                return opts.inverse(this);
            };
            return Renderer;
        })();
        Rendering.Renderer = Renderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
    * Helper class for producing track ids
    */
    var TrackHelper = (function () {
        function TrackHelper() {
        }
        /**
         * Returns string track ID for cell
         */
        TrackHelper.getCellTrack = function (cell) {
            var colIdx = cell.Column.MasterTable.InstanceManager.getUiColumnNames().indexOf(cell.Column.RawName);
            var rowIdx = cell.Row.Index;
            return TrackHelper.getCellTrackByIndexes(rowIdx, colIdx);
        };
        /**
         * Returns string track ID for cell
         */
        TrackHelper.getCellTrackByIndexes = function (rowIndex, columnIndex) {
            return "c-r" + rowIndex + "-c" + columnIndex;
        };
        /**
         * Returns string track ID for plugin
         */
        TrackHelper.getPluginTrack = function (plugin) {
            return "p-" + plugin.PluginLocation;
        };
        /**
         * Returns string track ID for plugin
         */
        TrackHelper.getPluginTrackByLocation = function (pluginLocation) {
            return "p-" + pluginLocation;
        };
        /**
         * Returns string track ID for header
         */
        TrackHelper.getHeaderTrack = function (header) {
            return "h-" + header.Column.RawName;
        };
        /**
         * Returns string track ID for header
         */
        TrackHelper.getHeaderTrackByColumnName = function (columnName) {
            return "h-" + columnName;
        };
        /**
         * Returns string track ID for row
         */
        TrackHelper.getRowTrack = function (row) {
            return this.getRowTrackByIndex(row.Index);
        };
        /**
         * Returns string track ID for row
         */
        TrackHelper.getRowTrackByIndex = function (index) {
            return "r-" + index;
        };
        /**
         * Parses cell track to retrieve column and row index
         *
         * @param e HTML element containing cell with wrapper
         * @returns {ICellLocation} Cell location
         */
        TrackHelper.getCellLocation = function (e) {
            if (!e)
                return null;
            if (!e.getAttribute)
                return null;
            var trk = e.getAttribute('data-track').substring(3).split('-c');
            return {
                RowIndex: parseInt(trk[0]),
                ColumnIndex: parseInt(trk[1])
            };
        };
        /**
         * Parses row track to retrieve row index
         *
         * @param e HTML element containing row with wrapper
         * @returns {number} Row index
         */
        TrackHelper.getRowIndex = function (e) {
            if (!e)
                return null;
            if (!e.getAttribute)
                return null;
            var trk = e.getAttribute('data-track').substring(1);
            return parseInt(trk);
        };
        return TrackHelper;
    })();
    PowerTables.TrackHelper = TrackHelper;
})(PowerTables || (PowerTables = {}));
//# sourceMappingURL=powertables.js.map